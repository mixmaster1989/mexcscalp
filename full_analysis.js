#!/usr/bin/env node
require('dotenv').config();
const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–ò–°–¢–ò–ö–ò –û–†–î–ï–†–û–í MEXC SCALPER');
console.log('‚ïê'.repeat(80));
console.log('');

class FullAnalysisRunner {
  constructor() {
    this.scripts = [
      { name: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤', file: 'order_stats.js' },
      { name: 'üìã –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π', file: 'events_analysis.js' },
      { name: 'üí∞ –ê–Ω–∞–ª–∏–∑ PnL', file: 'pnl_analysis.js' },
      { name: '‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑', file: 'time_analysis.js' }
    ];
  }

  async runScript(scriptPath) {
    return new Promise((resolve, reject) => {
      const child = spawn('node', [scriptPath], {
        stdio: 'inherit',
        cwd: __dirname
      });

      child.on('close', (code) => {
        if (code === 0) {
          resolve();
        } else {
          reject(new Error(`–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
        }
      });

      child.on('error', (error) => {
        reject(error);
      });
    });
  }

  async run() {
    console.log('üéØ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...\n');

    for (let i = 0; i < this.scripts.length; i++) {
      const script = this.scripts[i];
      console.log(`\n${'='.repeat(80)}`);
      console.log(`üìã ${i + 1}/${this.scripts.length} - ${script.name}`);
      console.log(`${'='.repeat(80)}\n`);

      try {
        await this.runScript(script.file);
        console.log(`\n‚úÖ ${script.name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      } catch (error) {
        console.error(`\n‚ùå –û—à–∏–±–∫–∞ –≤ ${script.name}:`, error.message);
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫—Ä–∏–ø—Ç–∞–º–∏
      if (i < this.scripts.length - 1) {
        console.log('\n‚è≥ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–Ω–∞–ª–∏–∑—É...\n');
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    console.log('\n' + '='.repeat(80));
    console.log('üéâ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!');
    console.log('='.repeat(80));
    console.log('\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log('   node order_stats.js     - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤');
    console.log('   node events_analysis.js - –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π');
    console.log('   node pnl_analysis.js    - –ê–Ω–∞–ª–∏–∑ PnL');
    console.log('   node time_analysis.js   - –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑');
    console.log('\nüìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ./data/mexc_bot.db');
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
const runner = new FullAnalysisRunner();
runner.run().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
});
