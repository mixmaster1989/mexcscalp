require('dotenv').config();
const { MexcSpotClient } = require('./dist/exchange/mexc-spot');
const axios = require('axios');

async function analyzeProfitability() {
  console.log('üí∞ –ê–ù–ê–õ–ò–ó –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò –¢–û–†–ì–û–í–õ–ò');
  console.log('================================\n');

  try {
    const client = new MexcSpotClient();
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const account = await client.getAccountInfo();
    const balances = account.balances || [];
    const ethBalance = balances.find(b => b.asset === 'ETH');
    const usdcBalance = balances.find(b => b.asset === 'USDC');
    
    if (!ethBalance) {
      console.log('‚ùå ETH –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const totalETH = parseFloat(ethBalance.free) + parseFloat(ethBalance.locked);
    const totalUSDC = parseFloat(usdcBalance.free) + parseFloat(usdcBalance.locked);
    
    console.log('üìä –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°:');
    console.log(`ETH: ${totalETH.toFixed(8)}`);
    console.log(`USDC: ${totalUSDC.toFixed(2)}`);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ ETHUSDC
    const trades = await client.getMyTrades('ETHUSDC', { limit: 100 });
    const buyTrades = trades.filter(t => !t.isBuyerMaker); // BUY —Å–¥–µ–ª–∫–∏
    
    if (buyTrades.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –ø–æ–∫—É–ø–∫–∏ ETH');
      return;
    }
    
    // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
    let totalETHBought = 0;
    let totalUSDCSpent = 0;
    let totalCommission = 0;
    
    console.log('\nüìà –ê–ù–ê–õ–ò–ó –ü–û–ö–£–ü–û–ö ETH:');
    console.log('========================');
    
    buyTrades.forEach((trade, index) => {
      const qty = parseFloat(trade.qty);
      const price = parseFloat(trade.price);
      const amount = parseFloat(trade.quoteQty);
      const commission = parseFloat(trade.commission || 0);
      
      totalETHBought += qty;
      totalUSDCSpent += amount;
      totalCommission += commission;
      
      if (index < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–¥–µ–ª–æ–∫
        console.log(`${index + 1}. –ö—É–ø–ª–µ–Ω–æ: ${qty.toFixed(8)} ETH @ ${price.toFixed(2)} USDC`);
        console.log(`   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${amount.toFixed(2)} USDC`);
      }
    });
    
    const avgBuyPrice = totalUSDCSpent / totalETHBought;
    
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ö–£–ü–û–ö:`);
    console.log(`–í—Å–µ–≥–æ ETH –∫—É–ø–ª–µ–Ω–æ: ${totalETHBought.toFixed(8)}`);
    console.log(`–ü–æ—Ç—Ä–∞—á–µ–Ω–æ USDC: ${totalUSDCSpent.toFixed(2)}`);
    console.log(`–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${avgBuyPrice.toFixed(2)} USDC`);
    console.log(`–ö–æ–º–∏—Å—Å–∏—è: ${totalCommission.toFixed(2)} USDC`);
    
    // 4. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH
    const priceResponse = await axios.get('https://api.mexc.com/api/v3/ticker/price?symbol=ETHUSDC');
    const currentPrice = parseFloat(priceResponse.data.price);
    
    console.log(`\nüíπ –¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê ETH: ${currentPrice.toFixed(2)} USDC`);
    
    // 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
    const currentValue = totalETH * currentPrice;
    const profitLoss = currentValue - totalUSDCSpent;
    const profitPercent = (profitLoss / totalUSDCSpent) * 100;
    
    console.log(`\nüí∞ –†–ê–°–ß–ï–¢ –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò:`);
    console.log(`–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ETH: ${currentValue.toFixed(2)} USDC`);
    console.log(`–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–æ–∫—É–ø–∫—É: ${totalUSDCSpent.toFixed(2)} USDC`);
    console.log(`–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: ${profitLoss.toFixed(2)} USDC (${profitPercent.toFixed(2)}%)`);
    
    // 6. –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const firstTrade = buyTrades[buyTrades.length - 1]; // –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Å–¥–µ–ª–∫–∞
    const lastTrade = buyTrades[0]; // –°–∞–º–∞—è –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞
    
    console.log(`\n‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó:`);
    console.log(`–ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞: ${new Date(firstTrade.time).toLocaleString()}`);
    console.log(`–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: ${new Date(lastTrade.time).toLocaleString()}`);
    
    // 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    if (profitPercent > 0) {
      console.log(`‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–∞! +${profitPercent.toFixed(2)}%`);
      console.log(`üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–∏ —á–∞—Å—Ç–∏ –ø—Ä–∏–±—ã–ª–∏`);
    } else {
      console.log(`‚ùå –¢–æ—Ä–≥–æ–≤–ª—è —É–±—ã—Ç–æ—á–Ω–∞: ${profitPercent.toFixed(2)}%`);
      console.log(`üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã`);
    }
    
    // 8. –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∫–∏
    const priceRange = Math.max(...buyTrades.map(t => parseFloat(t.price))) - 
                      Math.min(...buyTrades.map(t => parseFloat(t.price)));
    const avgTradeSize = totalUSDCSpent / buyTrades.length;
    
    console.log(`\nüìä –ê–ù–ê–õ–ò–ó –°–¢–†–ê–¢–ï–ì–ò–ò:`);
    console.log(`–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ${priceRange.toFixed(2)} USDC`);
    console.log(`–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: ${avgTradeSize.toFixed(2)} USDC`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: ${buyTrades.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
  }
}

analyzeProfitability();
