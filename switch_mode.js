#!/usr/bin/env node
require('dotenv').config();
const fs = require('fs');
const path = require('path');

console.log('üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –†–ï–ñ–ò–ú–û–í –°–ö–ê–õ–¨–ü–ï–†–ê\n');

class ModeSwitcher {
  constructor() {
    this.configPath = './scalper_config.json';
  }

  loadConfig() {
    try {
      const configData = fs.readFileSync(this.configPath, 'utf8');
      return JSON.parse(configData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞:', error.message);
      return null;
    }
  }

  saveConfig(config) {
    try {
      fs.writeFileSync(this.configPath, JSON.stringify(config, null, 2));
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:', error.message);
    }
  }

  showCurrentConfig() {
    const config = this.loadConfig();
    if (!config) return;

    console.log('üìä –¢–ï–ö–£–©–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:');
    console.log('‚ïê'.repeat(50));
    console.log(`–ü–∞—Ä–∞: ${config.symbol}`);
    console.log(`–î–µ–ø–æ–∑–∏—Ç: ${config.deposit_usd} USDC`);
    console.log(`–†–µ–∂–∏–º: ${config.mode === 'ladder' ? '–õ–µ—Å–µ–Ω–∫–∞' : '–Å—Ä—à–∏–∫–∏'}`);
    
    if (config.mode === 'ladder') {
      console.log('\nüìà –ü–ê–†–ê–ú–ï–¢–†–´ –õ–ï–°–ï–ù–ö–ò:');
      console.log(`  –£—Ä–æ–≤–Ω–µ–π: ${config.ladder.levels}`);
      console.log(`  –®–∞–≥ (k_step): ${config.ladder.k_step}`);
      console.log(`  TP: ${config.ladder.tp_pct}%`);
      console.log(`  –ì–µ–æ–º–µ—Ç—Ä–∏—è (r): ${config.ladder.geometry_r}`);
      console.log(`  Z_max: ${config.ladder.z_max}`);
    } else {
      console.log('\nüü¢ –ü–ê–†–ê–ú–ï–¢–†–´ –Å–†–®–ò–ö–û–í:');
      console.log(`  –£—Ä–æ–≤–Ω–µ–π: ${config.hedgehog.levels}`);
      console.log(`  –û—Ç—Å—Ç—É–ø (offset_k): ${config.hedgehog.offset_k}`);
      console.log(`  –®–∞–≥ (step_k): ${config.hedgehog.step_k}`);
      console.log(`  TP: ${config.hedgehog.tp_pct}%`);
      console.log(`  –ú–∞–∫—Å. –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${config.hedgehog.max_inventory_pct}%`);
    }
    
    console.log('\n‚ö†Ô∏è –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢:');
    console.log(`  –ú–∞–∫—Å. –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É: ${config.risk.max_notional_per_symbol}%`);
    console.log(`  –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: ${config.risk.max_drawdown_pct}%`);
    console.log(`  –ú–∞–∫—Å. —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥: ${config.risk.max_consecutive_losses}`);
  }

  showPresets() {
    const config = this.loadConfig();
    if (!config) return;

    console.log('\nüéØ –î–û–°–¢–£–ü–ù–´–ï –ü–†–ï–°–ï–¢–´:');
    console.log('‚ïê'.repeat(50));
    
    Object.keys(config.presets).forEach((presetName, index) => {
      const preset = config.presets[presetName];
      console.log(`${index + 1}. ${presetName.toUpperCase()}`);
      console.log(`   –†–µ–∂–∏–º: ${preset.mode === 'ladder' ? '–õ–µ—Å–µ–Ω–∫–∞' : '–Å—Ä—à–∏–∫–∏'}`);
      console.log(`   ${preset.description}`);
      console.log('');
    });
  }

  applyPreset(presetName) {
    const config = this.loadConfig();
    if (!config) return;

    const preset = config.presets[presetName];
    if (!preset) {
      console.error(`‚ùå –ü—Ä–µ—Å–µ—Ç "${presetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ—Å–µ—Ç
    config.mode = preset.mode;
    
    if (preset.ladder) {
      config.ladder = { ...config.ladder, ...preset.ladder };
    }
    
    if (preset.hedgehog) {
      config.hedgehog = { ...config.hedgehog, ...preset.hedgehog };
    }

    this.saveConfig(config);
    
    console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç: ${presetName.toUpperCase()}`);
    console.log(`üìä –†–µ–∂–∏–º: ${preset.mode === 'ladder' ? '–õ–µ—Å–µ–Ω–∫–∞' : '–Å—Ä—à–∏–∫–∏'}`);
    console.log(`üìù ${preset.description}`);
  }

  switchMode(mode) {
    const config = this.loadConfig();
    if (!config) return;

    if (mode !== 'ladder' && mode !== 'hedgehog') {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ladder –∏–ª–∏ hedgehog');
      return;
    }

    config.mode = mode;
    this.saveConfig(config);
    
    console.log(`‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${mode === 'ladder' ? '–õ–µ—Å–µ–Ω–∫–∞' : '–Å—Ä—à–∏–∫–∏'}`);
  }

  updateParameter(section, param, value) {
    const config = this.loadConfig();
    if (!config) return;

    if (!config[section]) {
      console.error(`‚ùå –°–µ–∫—Ü–∏—è "${section}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    if (config[section][param] === undefined) {
      console.error(`‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä "${param}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ü–∏–∏ "${section}"`);
      return;
    }

    const oldValue = config[section][param];
    config[section][param] = parseFloat(value);
    this.saveConfig(config);
    
    console.log(`‚úÖ ${section}.${param}: ${oldValue} ‚Üí ${value}`);
  }

  showHelp() {
    console.log('üìñ –ö–û–ú–ê–ù–î–´:');
    console.log('‚ïê'.repeat(50));
    console.log('node switch_mode.js status          - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
    console.log('node switch_mode.js presets         - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã');
    console.log('node switch_mode.js preset <name>   - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç');
    console.log('node switch_mode.js mode <type>     - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º (ladder/hedgehog)');
    console.log('node switch_mode.js set <section> <param> <value> - –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä');
    console.log('');
    console.log('üìù –ü–†–ò–ú–ï–†–´:');
    console.log('node switch_mode.js preset eth_conservative');
    console.log('node switch_mode.js mode hedgehog');
    console.log('node switch_mode.js set hedgehog tp_pct 0.12');
    console.log('node switch_mode.js set ladder levels 9');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const switcher = new ModeSwitcher();

if (args.length === 0) {
  switcher.showHelp();
} else {
  const command = args[0];
  
  switch (command) {
    case 'status':
      switcher.showCurrentConfig();
      break;
      
    case 'presets':
      switcher.showPresets();
      break;
      
    case 'preset':
      if (args[1]) {
        switcher.applyPreset(args[1]);
      } else {
        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞');
      }
      break;
      
    case 'mode':
      if (args[1]) {
        switcher.switchMode(args[1]);
      } else {
        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º: ladder –∏–ª–∏ hedgehog');
      }
      break;
      
    case 'set':
      if (args.length === 4) {
        switcher.updateParameter(args[1], args[2], args[3]);
      } else {
        console.error('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: set <section> <param> <value>');
      }
      break;
      
    default:
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
      switcher.showHelp();
  }
}


