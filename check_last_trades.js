#!/usr/bin/env node
require('dotenv').config();
const { MexcRestClient } = require('./dist/infra/mexcRest');

console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –°–î–ï–õ–û–ö\n');

const client = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);

async function checkLastTrades() {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ —á–µ—Ä–µ–∑ API...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    const trades = await client.getMyTrades('ETHUSDC', 50);
    
    if (trades.length === 0) {
      console.log('‚ùå –°–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${trades.length} —Å–¥–µ–ª–æ–∫\n`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
    console.log('üìã –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:');
    console.log('‚ïê'.repeat(80));
    console.log('–í—Ä–µ–º—è                | –°—Ç–æ—Ä–æ–Ω–∞ | –¶–µ–Ω–∞     | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | ID');
    console.log('‚îÄ'.repeat(80));
    
    trades.slice(0, 10).forEach((trade, i) => {
      const time = new Date(trade.timestamp).toLocaleString('ru-RU');
      const side = trade.side === 'buy' ? 'üü¢ BUY' : 'üî¥ SELL';
      const price = parseFloat(trade.price).toFixed(2);
      const quantity = parseFloat(trade.quantity).toFixed(6);
      
      console.log(`${time.padStart(19)} | ${side.padStart(7)} | ${price.padStart(8)} | ${quantity.padStart(10)} | ${trade.id}`);
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–¥–µ–ª–∫—É
    const lastTrade = trades[0];
    const lastTradeTime = new Date(lastTrade.timestamp);
    const now = new Date();
    const timeDiff = now - lastTradeTime;
    const hoursAgo = Math.floor(timeDiff / (1000 * 60 * 60));
    const minutesAgo = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
    
    console.log('\nüéØ –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ï–ô –°–î–ï–õ–ö–ò:');
    console.log('‚ïê'.repeat(50));
    console.log(`–í—Ä–µ–º—è: ${lastTradeTime.toLocaleString('ru-RU')}`);
    console.log(`–°—Ç–æ—Ä–æ–Ω–∞: ${lastTrade.side === 'buy' ? 'üü¢ BUY' : 'üî¥ SELL'}`);
    console.log(`–¶–µ–Ω–∞: ${lastTrade.price} USDC`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${lastTrade.quantity} ETH`);
    console.log(`ID: ${lastTrade.id}`);
    console.log(`–ö–æ–º–∏—Å—Å–∏—è: ${lastTrade.commission || 'N/A'}`);
    console.log(`–í—Ä–µ–º—è –Ω–∞–∑–∞–¥: ${hoursAgo}—á ${minutesAgo}–º`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    const tradesByDay = {};
    trades.forEach(trade => {
      const date = new Date(trade.timestamp).toLocaleDateString('ru-RU');
      if (!tradesByDay[date]) {
        tradesByDay[date] = [];
      }
      tradesByDay[date].push(trade);
    });
    
    console.log('\nüìÖ –°–î–ï–õ–ö–ò –ü–û –î–ù–Ø–ú:');
    console.log('‚ïê'.repeat(50));
    Object.keys(tradesByDay).sort().reverse().forEach(date => {
      const dayTrades = tradesByDay[date];
      const buyTrades = dayTrades.filter(t => t.side === 'buy').length;
      const sellTrades = dayTrades.filter(t => t.side === 'sell').length;
      console.log(`${date}: ${dayTrades.length} —Å–¥–µ–ª–æ–∫ (BUY: ${buyTrades}, SELL: ${sellTrades})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const last24h = trades.filter(trade => {
      const tradeTime = new Date(trade.timestamp);
      const dayAgo = new Date(now - 24 * 60 * 60 * 1000);
      return tradeTime > dayAgo;
    });
    
    console.log('\n‚è∞ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê:');
    console.log('‚ïê'.repeat(50));
    if (last24h.length > 0) {
      console.log(`‚úÖ ${last24h.length} —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞`);
      const last24hTime = new Date(last24h[0].timestamp);
      console.log(`–ü–æ—Å–ª–µ–¥–Ω—è—è: ${last24hTime.toLocaleString('ru-RU')}`);
    } else {
      console.log('‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    const lastWeek = trades.filter(trade => {
      const tradeTime = new Date(trade.timestamp);
      const weekAgo = new Date(now - 7 * 24 * 60 * 60 * 1000);
      return tradeTime > weekAgo;
    });
    
    console.log(`\nüìä –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –ü–û–°–õ–ï–î–ù–Æ–Æ –ù–ï–î–ï–õ–Æ: ${lastWeek.length} —Å–¥–µ–ª–æ–∫`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫:', error.message);
  }
}

checkLastTrades();
