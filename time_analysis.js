#!/usr/bin/env node
require('dotenv').config();
const sqlite3 = require('sqlite3').verbose();
const { MexcRestClient } = require('./dist/infra/mexcRest');

console.log('‚è∞ –ê–ù–ê–õ–ò–ó –ü–û –í–†–ï–ú–ï–ù–ù–´–ú –ü–ï–†–ò–û–î–ê–ú\n');

class TimeAnalysisAnalyzer {
  constructor() {
    this.db = null;
    this.client = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);
  }

  async connectDB() {
    return new Promise((resolve, reject) => {
      this.db = new sqlite3.Database('./data/mexc_bot.db', (err) => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }

  async closeDB() {
    if (this.db) {
      return new Promise((resolve) => {
        this.db.close(resolve);
      });
    }
  }

  async query(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.all(sql, params, (err, rows) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows || []);
        }
      });
    });
  }

  async getOne(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.get(sql, params, (err, row) => {
        if (err) {
          reject(err);
        } else {
          resolve(row);
        }
      });
    });
  }

  // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
  async analyzeDayOfWeek() {
    console.log('üìÖ –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò:');
    console.log('‚ïê'.repeat(60));

    try {
      const dayStats = await this.query(`
        SELECT 
          CASE strftime('%w', datetime(ts_entry/1000, 'unixepoch'))
            WHEN '0' THEN '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            WHEN '1' THEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
            WHEN '2' THEN '–í—Ç–æ—Ä–Ω–∏–∫'
            WHEN '3' THEN '–°—Ä–µ–¥–∞'
            WHEN '4' THEN '–ß–µ—Ç–≤–µ—Ä–≥'
            WHEN '5' THEN '–ü—è—Ç–Ω–∏—Ü–∞'
            WHEN '6' THEN '–°—É–±–±–æ—Ç–∞'
          END as day_name,
          strftime('%w', datetime(ts_entry/1000, 'unixepoch')) as day_num,
          COUNT(*) as trades_count,
          SUM(pnl) as total_pnl,
          AVG(pnl) as avg_pnl,
          COUNT(CASE WHEN pnl > 0 THEN 1 END) as winning_trades,
          AVG(duration_ms) as avg_duration_ms
        FROM trades 
        GROUP BY day_num, day_name
        ORDER BY day_num
      `);

      if (dayStats.length === 0) {
        console.log('   ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏');
        return;
      }

      console.log('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏  | –°–¥–µ–ª–æ–∫ | PnL      | –í–∏–Ω—Ä–µ–π—Ç | –°—Ä–µ–¥–Ω–∏–π PnL | –í—Ä–µ–º—è');
      console.log('‚îÄ'.repeat(70));

      dayStats.forEach(day => {
        const winRate = day.trades_count > 0 ? (day.winning_trades / day.trades_count * 100) : 0;
        const pnlEmoji = day.total_pnl >= 0 ? 'üü¢' : 'üî¥';
        const pnlFormatted = day.total_pnl >= 0 ? `+${day.total_pnl.toFixed(4)}` : day.total_pnl.toFixed(4);
        const avgDuration = Math.round(day.avg_duration_ms / 1000); // —Å–µ–∫—É–Ω–¥—ã
        
        console.log(`${day.day_name.padStart(11)} | ${day.trades_count.toString().padStart(6)} | ${pnlEmoji} ${pnlFormatted.padStart(8)} | ${winRate.toFixed(1).padStart(6)}% | ${day.avg_pnl.toFixed(4).padStart(10)} | ${avgDuration}s`);
      });

      // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–µ–Ω—å
      const bestDay = dayStats.reduce((best, day) => day.total_pnl > best.total_pnl ? day : best);
      const worstDay = dayStats.reduce((worst, day) => day.total_pnl < worst.total_pnl ? day : worst);

      console.log('\nüéØ –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:');
      console.log(`   –õ—É—á—à–∏–π –¥–µ–Ω—å: ${bestDay.day_name} (+${bestDay.total_pnl.toFixed(4)} USDC, ${bestDay.trades_count} —Å–¥–µ–ª–æ–∫)`);
      console.log(`   –•—É–¥—à–∏–π –¥–µ–Ω—å: ${worstDay.day_name} (${worstDay.total_pnl.toFixed(4)} USDC, ${worstDay.trades_count} —Å–¥–µ–ª–æ–∫)`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:', error.message);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
  async analyzeMonthly() {
    console.log('\nüìÜ –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û –ú–ï–°–Ø–¶–ê–ú:');
    console.log('‚ïê'.repeat(60));

    try {
      const monthlyStats = await this.query(`
        SELECT 
          strftime('%Y-%m', datetime(ts_entry/1000, 'unixepoch')) as month,
          COUNT(*) as trades_count,
          SUM(pnl) as total_pnl,
          AVG(pnl) as avg_pnl,
          COUNT(CASE WHEN pnl > 0 THEN 1 END) as winning_trades,
          COUNT(CASE WHEN pnl < 0 THEN 1 END) as losing_trades,
          MAX(pnl) as best_trade,
          MIN(pnl) as worst_trade,
          SUM(qty) as total_volume
        FROM trades 
        GROUP BY month 
        ORDER BY month DESC
      `);

      if (monthlyStats.length === 0) {
        console.log('   ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –º–µ—Å—è—Ü–∞–º');
        return;
      }

      console.log('–ú–µ—Å—è—Ü    | –°–¥–µ–ª–æ–∫ | PnL      | –í–∏–Ω—Ä–µ–π—Ç | –õ—É—á—à–∞—è  | –•—É–¥—à–∞—è  | –û–±—ä–µ–º');
      console.log('‚îÄ'.repeat(70));

      monthlyStats.forEach(month => {
        const winRate = month.trades_count > 0 ? (month.winning_trades / month.trades_count * 100) : 0;
        const pnlEmoji = month.total_pnl >= 0 ? 'üü¢' : 'üî¥';
        const pnlFormatted = month.total_pnl >= 0 ? `+${month.total_pnl.toFixed(4)}` : month.total_pnl.toFixed(4);
        
        console.log(`${month.month.padStart(8)} | ${month.trades_count.toString().padStart(6)} | ${pnlEmoji} ${pnlFormatted.padStart(8)} | ${winRate.toFixed(1).padStart(6)}% | ${month.best_trade.toFixed(4).padStart(7)} | ${month.worst_trade.toFixed(4).padStart(7)} | ${month.total_volume.toFixed(4)}`);
      });

      // –¢—Ä–µ–Ω–¥ –ø–æ –º–µ—Å—è—Ü–∞–º
      console.log('\nüìà –¢—Ä–µ–Ω–¥ –ø–æ –º–µ—Å—è—Ü–∞–º:');
      for (let i = 1; i < monthlyStats.length; i++) {
        const current = monthlyStats[i - 1];
        const previous = monthlyStats[i];
        const pnlChange = current.total_pnl - previous.total_pnl;
        const tradesChange = current.trades_count - previous.trades_count;
        
        const pnlTrend = pnlChange > 0 ? 'üìà' : pnlChange < 0 ? 'üìâ' : '‚û°Ô∏è';
        const tradesTrend = tradesChange > 0 ? 'üìà' : tradesChange < 0 ? 'üìâ' : '‚û°Ô∏è';
        
        console.log(`   ${current.month}: PnL ${pnlTrend} ${pnlChange >= 0 ? '+' : ''}${pnlChange.toFixed(4)}, –°–¥–µ–ª–æ–∫ ${tradesTrend} ${tradesChange >= 0 ? '+' : ''}${tradesChange}`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:', error.message);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
  async analyzeSeasonality() {
    console.log('\nüåç –ê–ù–ê–õ–ò–ó –°–ï–ó–û–ù–ù–û–°–¢–ò:');
    console.log('‚ïê'.repeat(50));

    try {
      const seasonStats = await this.query(`
        SELECT 
          CASE 
            WHEN strftime('%m', datetime(ts_entry/1000, 'unixepoch')) IN ('12', '01', '02') THEN '–ó–∏–º–∞'
            WHEN strftime('%m', datetime(ts_entry/1000, 'unixepoch')) IN ('03', '04', '05') THEN '–í–µ—Å–Ω–∞'
            WHEN strftime('%m', datetime(ts_entry/1000, 'unixepoch')) IN ('06', '07', '08') THEN '–õ–µ—Ç–æ'
            WHEN strftime('%m', datetime(ts_entry/1000, 'unixepoch')) IN ('09', '10', '11') THEN '–û—Å–µ–Ω—å'
          END as season,
          COUNT(*) as trades_count,
          SUM(pnl) as total_pnl,
          AVG(pnl) as avg_pnl,
          COUNT(CASE WHEN pnl > 0 THEN 1 END) as winning_trades
        FROM trades 
        WHERE season IS NOT NULL
        GROUP BY season
        ORDER BY 
          CASE season
            WHEN '–ó–∏–º–∞' THEN 1
            WHEN '–í–µ—Å–Ω–∞' THEN 2
            WHEN '–õ–µ—Ç–æ' THEN 3
            WHEN '–û—Å–µ–Ω—å' THEN 4
          END
      `);

      if (seasonStats.length === 0) {
        console.log('   ‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏');
        return;
      }

      console.log('–°–µ–∑–æ–Ω  | –°–¥–µ–ª–æ–∫ | PnL      | –í–∏–Ω—Ä–µ–π—Ç | –°—Ä–µ–¥–Ω–∏–π PnL');
      console.log('‚îÄ'.repeat(50));

      seasonStats.forEach(season => {
        const winRate = season.trades_count > 0 ? (season.winning_trades / season.trades_count * 100) : 0;
        const pnlEmoji = season.total_pnl >= 0 ? 'üü¢' : 'üî¥';
        const pnlFormatted = season.total_pnl >= 0 ? `+${season.total_pnl.toFixed(4)}` : season.total_pnl.toFixed(4);
        
        console.log(`${season.season.padStart(6)} | ${season.trades_count.toString().padStart(6)} | ${pnlEmoji} ${pnlFormatted.padStart(8)} | ${winRate.toFixed(1).padStart(6)}% | ${season.avg_pnl.toFixed(4).padStart(10)}`);
      });

      // –õ—É—á—à–∏–π —Å–µ–∑–æ–Ω
      const bestSeason = seasonStats.reduce((best, season) => season.total_pnl > best.total_pnl ? season : best);
      console.log(`\nüèÜ –õ—É—á—à–∏–π —Å–µ–∑–æ–Ω: ${bestSeason.season} (+${bestSeason.total_pnl.toFixed(4)} USDC)`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏:', error.message);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
  async analyzeTimeOfDay() {
    console.log('\nüïê –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û –í–†–ï–ú–ï–ù–ò –°–£–¢–û–ö:');
    console.log('‚ïê'.repeat(60));

    try {
      const timeStats = await this.query(`
        SELECT 
          CASE 
            WHEN strftime('%H', datetime(ts_entry/1000, 'unixepoch')) BETWEEN '00' AND '05' THEN '–ù–æ—á—å (00-05)'
            WHEN strftime('%H', datetime(ts_entry/1000, 'unixepoch')) BETWEEN '06' AND '11' THEN '–£—Ç—Ä–æ (06-11)'
            WHEN strftime('%H', datetime(ts_entry/1000, 'unixepoch')) BETWEEN '12' AND '17' THEN '–î–µ–Ω—å (12-17)'
            WHEN strftime('%H', datetime(ts_entry/1000, 'unixepoch')) BETWEEN '18' AND '23' THEN '–í–µ—á–µ—Ä (18-23)'
          END as time_period,
          COUNT(*) as trades_count,
          SUM(pnl) as total_pnl,
          AVG(pnl) as avg_pnl,
          COUNT(CASE WHEN pnl > 0 THEN 1 END) as winning_trades
        FROM trades 
        WHERE time_period IS NOT NULL
        GROUP BY time_period
        ORDER BY 
          CASE time_period
            WHEN '–ù–æ—á—å (00-05)' THEN 1
            WHEN '–£—Ç—Ä–æ (06-11)' THEN 2
            WHEN '–î–µ–Ω—å (12-17)' THEN 3
            WHEN '–í–µ—á–µ—Ä (18-23)' THEN 4
          END
      `);

      if (timeStats.length === 0) {
        console.log('   ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫');
        return;
      }

      console.log('–ü–µ—Ä–∏–æ–¥      | –°–¥–µ–ª–æ–∫ | PnL      | –í–∏–Ω—Ä–µ–π—Ç | –°—Ä–µ–¥–Ω–∏–π PnL');
      console.log('‚îÄ'.repeat(60));

      timeStats.forEach(period => {
        const winRate = period.trades_count > 0 ? (period.winning_trades / period.trades_count * 100) : 0;
        const pnlEmoji = period.total_pnl >= 0 ? 'üü¢' : 'üî¥';
        const pnlFormatted = period.total_pnl >= 0 ? `+${period.total_pnl.toFixed(4)}` : period.total_pnl.toFixed(4);
        
        console.log(`${period.time_period.padStart(11)} | ${period.trades_count.toString().padStart(6)} | ${pnlEmoji} ${pnlFormatted.padStart(8)} | ${winRate.toFixed(1).padStart(6)}% | ${period.avg_pnl.toFixed(4).padStart(10)}`);
      });

      // –õ—É—á—à–∏–π –ø–µ—Ä–∏–æ–¥
      const bestPeriod = timeStats.reduce((best, period) => period.total_pnl > best.total_pnl ? period : best);
      console.log(`\nüèÜ –õ—É—á—à–∏–π –ø–µ—Ä–∏–æ–¥: ${bestPeriod.time_period} (+${bestPeriod.total_pnl.toFixed(4)} USDC)`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:', error.message);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫
  async analyzeTradeDuration() {
    console.log('\n‚è±Ô∏è –ê–ù–ê–õ–ò–ó –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–ò –°–î–ï–õ–û–ö:');
    console.log('‚ïê'.repeat(50));

    try {
      const durationStats = await this.query(`
        SELECT 
          CASE 
            WHEN duration_ms < 60000 THEN '–ú–µ–Ω–µ–µ 1 –º–∏–Ω'
            WHEN duration_ms < 300000 THEN '1-5 –º–∏–Ω'
            WHEN duration_ms < 900000 THEN '5-15 –º–∏–Ω'
            WHEN duration_ms < 3600000 THEN '15-60 –º–∏–Ω'
            WHEN duration_ms < 86400000 THEN '1-24 —á–∞—Å–∞'
            ELSE '–ë–æ–ª–µ–µ 24 —á–∞—Å–æ–≤'
          END as duration_range,
          COUNT(*) as trades_count,
          SUM(pnl) as total_pnl,
          AVG(pnl) as avg_pnl,
          COUNT(CASE WHEN pnl > 0 THEN 1 END) as winning_trades,
          AVG(duration_ms) as avg_duration_ms
        FROM trades 
        GROUP BY duration_range
        ORDER BY 
          CASE duration_range
            WHEN '–ú–µ–Ω–µ–µ 1 –º–∏–Ω' THEN 1
            WHEN '1-5 –º–∏–Ω' THEN 2
            WHEN '5-15 –º–∏–Ω' THEN 3
            WHEN '15-60 –º–∏–Ω' THEN 4
            WHEN '1-24 —á–∞—Å–∞' THEN 5
            WHEN '–ë–æ–ª–µ–µ 24 —á–∞—Å–æ–≤' THEN 6
          END
      `);

      if (durationStats.length === 0) {
        console.log('   ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        return;
      }

      console.log('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å | –°–¥–µ–ª–æ–∫ | PnL      | –í–∏–Ω—Ä–µ–π—Ç | –°—Ä–µ–¥–Ω–∏–π PnL | –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è');
      console.log('‚îÄ'.repeat(70));

      durationStats.forEach(duration => {
        const winRate = duration.trades_count > 0 ? (duration.winning_trades / duration.trades_count * 100) : 0;
        const pnlEmoji = duration.total_pnl >= 0 ? 'üü¢' : 'üî¥';
        const pnlFormatted = duration.total_pnl >= 0 ? `+${duration.total_pnl.toFixed(4)}` : duration.total_pnl.toFixed(4);
        const avgDurationMinutes = Math.round(duration.avg_duration_ms / 60000);
        
        console.log(`${duration.duration_range.padStart(12)} | ${duration.trades_count.toString().padStart(6)} | ${pnlEmoji} ${pnlFormatted.padStart(8)} | ${winRate.toFixed(1).padStart(6)}% | ${duration.avg_pnl.toFixed(4).padStart(10)} | ${avgDurationMinutes} –º–∏–Ω`);
      });

      // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      const bestDuration = durationStats.reduce((best, duration) => duration.avg_pnl > best.avg_pnl ? duration : best);
      console.log(`\nüéØ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${bestDuration.duration_range} (—Å—Ä–µ–¥–Ω–∏–π PnL: ${bestDuration.avg_pnl.toFixed(4)} USDC)`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error.message);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
  async analyzeTrends() {
    console.log('\nüìà –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í:');
    console.log('‚ïê'.repeat(50));

    try {
      // –¢—Ä–µ–Ω–¥ –ø–æ –Ω–µ–¥–µ–ª—è–º
      const weeklyTrends = await this.query(`
        SELECT 
          strftime('%Y-W%W', datetime(ts_entry/1000, 'unixepoch')) as week,
          COUNT(*) as trades_count,
          SUM(pnl) as total_pnl,
          AVG(pnl) as avg_pnl
        FROM trades 
        WHERE ts_entry > strftime('%s', 'now', '-12 weeks') * 1000
        GROUP BY week 
        ORDER BY week DESC
        LIMIT 12
      `);

      if (weeklyTrends.length > 1) {
        console.log('üìä –¢—Ä–µ–Ω–¥ –ø–æ –Ω–µ–¥–µ–ª—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –Ω–µ–¥–µ–ª—å):');
        console.log('–ù–µ–¥–µ–ª—è    | –°–¥–µ–ª–æ–∫ | PnL      | –°—Ä–µ–¥–Ω–∏–π PnL');
        console.log('‚îÄ'.repeat(50));

        weeklyTrends.forEach(week => {
          const pnlEmoji = week.total_pnl >= 0 ? 'üü¢' : 'üî¥';
          const pnlFormatted = week.total_pnl >= 0 ? `+${week.total_pnl.toFixed(4)}` : week.total_pnl.toFixed(4);
          
          console.log(`${week.week.padStart(9)} | ${week.trades_count.toString().padStart(6)} | ${pnlEmoji} ${pnlFormatted.padStart(8)} | ${week.avg_pnl.toFixed(4).padStart(10)}`);
        });

        // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        const recentWeeks = weeklyTrends.slice(0, 4);
        const olderWeeks = weeklyTrends.slice(4, 8);
        
        const recentAvgPnL = recentWeeks.reduce((sum, w) => sum + w.avg_pnl, 0) / recentWeeks.length;
        const olderAvgPnL = olderWeeks.reduce((sum, w) => sum + w.avg_pnl, 0) / olderWeeks.length;
        
        const trend = recentAvgPnL - olderAvgPnL;
        const trendEmoji = trend > 0 ? 'üìà' : trend < 0 ? 'üìâ' : '‚û°Ô∏è';
        
        console.log(`\nüéØ –¢—Ä–µ–Ω–¥: ${trendEmoji} ${trend >= 0 ? '+' : ''}${trend.toFixed(4)} USDC (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏ vs –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 4)`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤:', error.message);
    }
  }

  async run() {
    try {
      await this.connectDB();
      await this.analyzeDayOfWeek();
      await this.analyzeMonthly();
      await this.analyzeSeasonality();
      await this.analyzeTimeOfDay();
      await this.analyzeTradeDuration();
      await this.analyzeTrends();
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
      await this.closeDB();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
const analyzer = new TimeAnalysisAnalyzer();
analyzer.run();


