require('dotenv').config();
const { MexcRestClient } = require('./dist/infra/mexcRest');

const client = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);

async function debugOrderPlacement() {
  try {
    console.log('üîß –î–ï–ë–ê–ì –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –û–†–î–ï–†–û–í...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    const price = await client.getPrice('ETH/USDC');
    console.log('üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:', price);
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –æ—Ä–¥–µ—Ä
    const testPrice = price - 10; // –ù–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    const roundedPrice = Math.round(testPrice * 100) / 100;
    const qty = 0.000345;
    
    console.log('ÔøΩÔøΩ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞:');
    console.log('   Symbol: ETH/USDC');
    console.log('   Side: BUY');
    console.log('   Type: LIMIT');
    console.log('   Price:', roundedPrice);
    console.log('   Quantity:', qty);
    
    const timestamp = Date.now();
    const clientOrderId = `DEBUG_BUY_${timestamp}`;
    console.log('   ClientOrderId:', clientOrderId);
    
    console.log('\nüîÑ –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä...');
    
    const result = await client.placeOrder(
      'ETH/USDC',
      'buy',
      'limit',
      qty,
      roundedPrice,
      clientOrderId
    );
    
    console.log('‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω:', result);
    
  } catch (error) {
    console.log('‚ùå –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê:', error);
    console.log('   –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
    console.log('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.log('   Response:', error.response?.data);
    console.log('   Status:', error.response?.status);
    
    if (error.response?.data) {
      console.log('\nüîç –ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó:');
      console.log('   –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error.response.data);
      console.log('   –ö–ª—é—á–∏:', Object.keys(error.response.data));
      console.log('   –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

debugOrderPlacement();
