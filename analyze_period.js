#!/usr/bin/env node
require('dotenv').config();
const { MexcRestClient } = require('./dist/infra/mexcRest');

console.log('üîç –ê–ù–ê–õ–ò–ó –°–î–ï–õ–û–ö –ó–ê –ü–ï–†–ò–û–î: 2 —Å–µ–Ω—Ç—è–±—Ä—è 16:00 - 3 —Å–µ–Ω—Ç—è–±—Ä—è 09:00\n');

const client = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL –ø–∞—Ä —Å–¥–µ–ª–æ–∫ BUY/SELL
function calculateTradePairsPnL(trades) {
    const buyTrades = trades.filter(t => t.side === 'buy').sort((a, b) => a.timestamp - b.timestamp);
    const sellTrades = trades.filter(t => t.side === 'sell').sort((a, b) => a.timestamp - b.timestamp);
    const tradesWithPnL = [...trades];
    
    // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º BUY –∏ SELL —Å–¥–µ–ª–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL
    let buyIndex = 0;
    let sellIndex = 0;
    
    while (buyIndex < buyTrades.length && sellIndex < sellTrades.length) {
        const buyTrade = buyTrades[buyIndex];
        const sellTrade = sellTrades[sellIndex];
        
        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
        const buyTradeInMain = tradesWithPnL.find(t => t.id === buyTrade.id);
        const sellTradeInMain = tradesWithPnL.find(t => t.id === sellTrade.id);
        
        if (buyTradeInMain && sellTradeInMain) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL: (–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ - –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏) * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            const pnl = (sellTrade.price - buyTrade.price) * buyTrade.quantity;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º PnL –≤ –æ–±–µ–∏—Ö —Å–¥–µ–ª–∫–∞—Ö
            buyTradeInMain.pnl = pnl;
            sellTradeInMain.pnl = pnl;
        }
        
        buyIndex++;
        sellIndex++;
    }
    
    return tradesWithPnL;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function calculateTradeStats(trades) {
    if (trades.length === 0) {
        return {
            totalTrades: 0,
            winningTrades: 0,
            losingTrades: 0,
            totalPnl: 0,
            avgPnl: 0,
            winRate: 0,
            bestTrade: 0,
            worstTrade: 0
        };
    }
    
    const winningTrades = trades.filter(t => t.pnl > 0);
    const losingTrades = trades.filter(t => t.pnl < 0);
    const totalPnl = trades.reduce((sum, t) => sum + (t.pnl || 0), 0);
    const bestTrade = Math.max(...trades.map(t => t.pnl || 0));
    const worstTrade = Math.min(...trades.map(t => t.pnl || 0));
    
    return {
        totalTrades: trades.length,
        winningTrades: winningTrades.length,
        losingTrades: losingTrades.length,
        totalPnl,
        avgPnl: totalPnl / trades.length,
        winRate: (winningTrades.length / trades.length) * 100,
        bestTrade,
        worstTrade
    };
}

async function analyzePeriod() {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    const startTime = new Date('2025-09-02T16:00:00.000Z').getTime();
    const endTime = new Date('2025-09-03T09:00:00.000Z').getTime();
    
    console.log('‚è∞ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:');
    console.log(`   –ù–∞—á–∞–ª–æ: ${new Date(startTime).toLocaleString('ru-RU')}`);
    console.log(`   –ö–æ–Ω–µ—Ü: ${new Date(endTime).toLocaleString('ru-RU')}`);
    console.log(`   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round((endTime - startTime) / (1000 * 60 * 60))} —á–∞—Å–æ–≤\n`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫...');
    const allTrades = await client.getMyTrades('ETHUSDC', 1000);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
    const periodTrades = allTrades.filter(trade => 
      trade.timestamp >= startTime && trade.timestamp <= endTime
    );
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${periodTrades.length} —Å–¥–µ–ª–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n`);
    
    if (periodTrades.length === 0) {
      console.log('‚ÑπÔ∏è  –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –¥–ª—è —Å–¥–µ–ª–æ–∫
    console.log('üí∞ –†–∞—Å—á–µ—Ç PnL –¥–ª—è —Å–¥–µ–ª–æ–∫...');
    const tradesWithPnL = calculateTradePairsPnL(periodTrades);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = calculateTradeStats(tradesWithPnL);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –¥–Ω—è–º
    const tradesByDay = {};
    tradesWithPnL.forEach(trade => {
      const date = new Date(trade.timestamp).toLocaleDateString('ru-RU');
      if (!tradesByDay[date]) {
        tradesByDay[date] = [];
      }
      tradesByDay[date].push(trade);
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    console.log('üìÖ –ê–ù–ê–õ–ò–ó –ü–û –î–ù–Ø–ú:');
    console.log('‚ïê'.repeat(80));
    
    let totalPnL = 0;
    let totalTrades = 0;
    let winningTrades = 0;
    let losingTrades = 0;

    Object.keys(tradesByDay).sort().forEach(date => {
      const dayTrades = tradesByDay[date];
      const buyTrades = dayTrades.filter(t => t.side === 'buy');
      const sellTrades = dayTrades.filter(t => t.side === 'sell');
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –∑–∞ –¥–µ–Ω—å
      const dayPnL = dayTrades.reduce((sum, t) => sum + (t.pnl || 0), 0);
      const dayWinning = dayTrades.filter(t => (t.pnl || 0) > 0).length;
      const dayLosing = dayTrades.filter(t => (t.pnl || 0) < 0).length;
      
      console.log(`\nüìÖ ${date}:`);
      console.log(`   –°–¥–µ–ª–æ–∫: ${dayTrades.length} (BUY: ${buyTrades.length}, SELL: ${sellTrades.length})`);
      console.log(`   PnL –∑–∞ –¥–µ–Ω—å: ${dayPnL >= 0 ? 'üü¢' : 'üî¥'} ${dayPnL.toFixed(4)} USDC`);
      console.log(`   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${dayWinning}, –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${dayLosing}`);
      
      totalPnL += dayPnL;
      totalTrades += dayTrades.length;
      winningTrades += dayWinning;
      losingTrades += dayLosing;
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–ï–†–ò–û–î:');
    console.log('‚ïê'.repeat(50));
    console.log(`–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${totalTrades}`);
    console.log(`BUY —Å–¥–µ–ª–æ–∫: ${periodTrades.filter(t => t.side === 'buy').length}`);
    console.log(`SELL —Å–¥–µ–ª–æ–∫: ${periodTrades.filter(t => t.side === 'sell').length}`);
    
    // PnL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(`\nüí∞ PnL –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   –û–±—â–∏–π PnL: ${totalPnL >= 0 ? 'üü¢' : 'üî¥'} ${totalPnL.toFixed(4)} USDC`);
    console.log(`   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${winningTrades}`);
    console.log(`   –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${losingTrades}`);
    console.log(`   –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate.toFixed(2)}%`);
    console.log(`   –°—Ä–µ–¥–Ω–∏–π PnL: ${stats.avgPnl.toFixed(4)} USDC`);
    console.log(`   –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: üü¢ +${stats.bestTrade.toFixed(4)} USDC`);
    console.log(`   –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: üî¥ ${stats.worstTrade.toFixed(4)} USDC`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã
    const prices = periodTrades.map(t => t.price);
    const minPrice = Math.min(...prices);
    const maxPrice = Math.max(...prices);
    const avgPrice = prices.reduce((sum, p) => sum + p, 0) / prices.length;
    
    console.log(`\nüí∞ –ê–ù–ê–õ–ò–ó –¶–ï–ù:`);
    console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: ${minPrice.toFixed(2)} USDC`);
    console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${maxPrice.toFixed(2)} USDC`);
    console.log(`   –°—Ä–µ–¥–Ω—è—è: ${avgPrice.toFixed(2)} USDC`);
    console.log(`   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${(maxPrice - minPrice).toFixed(2)} USDC`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
    const volumes = periodTrades.map(t => t.quantity);
    const totalVolume = volumes.reduce((sum, v) => sum + v, 0);
    const avgVolume = totalVolume / volumes.length;
    
    console.log(`\nüìè –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ú–û–í:`);
    console.log(`   –û–±—â–∏–π –æ–±—ä–µ–º: ${totalVolume.toFixed(6)} ETH`);
    console.log(`   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${avgVolume.toFixed(6)} ETH`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
    console.log(`\n‚è∞ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú:`);
    const hourlyActivity = {};
    periodTrades.forEach(trade => {
      const hour = new Date(trade.timestamp).getHours();
      hourlyActivity[hour] = (hourlyActivity[hour] || 0) + 1;
    });
    
    Object.keys(hourlyActivity).sort((a, b) => parseInt(a) - parseInt(b)).forEach(hour => {
      const count = hourlyActivity[hour];
      const bar = '‚ñà'.repeat(Math.min(count, 10));
      console.log(`   ${hour.toString().padStart(2, '0')}:00 - ${count} —Å–¥–µ–ª–æ–∫ ${bar}`);
    });
    
    // –í—ã–≤–æ–¥—ã
    console.log('\nüéØ –í–´–í–û–î–´:');
    console.log('‚ïê'.repeat(50));
    
    if (totalTrades > 0) {
      const buyRatio = (periodTrades.filter(t => t.side === 'buy').length / totalTrades * 100).toFixed(1);
      const sellRatio = (periodTrades.filter(t => t.side === 'sell').length / totalTrades * 100).toFixed(1);
      
      console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${totalTrades} —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥`);
      console.log(`‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: BUY ${buyRatio}%, SELL ${sellRatio}%`);
      console.log(`‚úÖ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${minPrice.toFixed(2)} - ${maxPrice.toFixed(2)} USDC`);
      console.log(`‚úÖ –û–±—â–∏–π –æ–±—ä–µ–º: ${totalVolume.toFixed(6)} ETH`);
      console.log(`‚úÖ –û–±—â–∏–π PnL: ${totalPnL >= 0 ? 'üü¢' : 'üî¥'} ${totalPnL.toFixed(4)} USDC`);
      console.log(`‚úÖ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate.toFixed(2)}%`);
      
      if (maxPrice - minPrice > 100) {
        console.log(`‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${(maxPrice - minPrice).toFixed(2)} USDC`);
      }
      
      if (totalTrades > 100) {
        console.log(`‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${totalTrades} —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥`);
      }
      
      if (totalPnL > 0) {
        console.log(`üéâ –ü—Ä–∏–±—ã–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: +${totalPnL.toFixed(4)} USDC`);
      } else if (totalPnL < 0) {
        console.log(`üìâ –£–±—ã—Ç–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥: ${totalPnL.toFixed(4)} USDC`);
      } else {
        console.log(`‚ûñ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 0.0000 USDC`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error.message);
  }
}

analyzePeriod();
