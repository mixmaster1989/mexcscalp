"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LLMAnalyzer = void 0;
const axios_1 = __importDefault(require("axios"));
class LLMAnalyzer {
    apiKey;
    baseUrl;
    maxRetries = 3;
    retryDelay = 2000;
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.baseUrl = 'https://foundation-models.api.cloud.ru/v1/chat/completions';
    }
    async analyzeTrade(trade, marketSnapshot, signal) {
        try {
            const prompt = this.buildTradeAnalysisPrompt(trade, marketSnapshot, signal);
            const response = await this.callLLMWithRetry(prompt);
            return this.parseTradeAnalysis(response);
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–∫–∏:', error);
            return this.getDefaultTradeAnalysis();
        }
    }
    async analyzeResults(trades, snapshots, summary) {
        try {
            const prompt = this.buildResultsAnalysisPrompt(trades, snapshots, summary);
            const response = await this.callLLMWithRetry(prompt);
            return this.parseResultsAnalysis(response);
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            return this.getDefaultResultsAnalysis();
        }
    }
    async analyzeMarketSituation(marketSummary) {
        try {
            const prompt = this.buildMarketSituationPrompt(marketSummary);
            const response = await this.callLLMWithRetry(prompt);
            return this.parseMarketSituationAnalysis(response);
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏:', error);
            return this.getDefaultMarketSituationAnalysis();
        }
    }
    async callLLMWithRetry(prompt) {
        let lastError = null;
        for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
            try {
                console.log(`üß† LLM –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.maxRetries}...`);
                const response = await this.callLLM(prompt);
                console.log(`‚úÖ LLM –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}`);
                return response;
            }
            catch (error) {
                lastError = error;
                console.error(`‚ùå LLM –ø–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error);
                if (attempt < this.maxRetries) {
                    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${this.retryDelay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                    await this.sleep(this.retryDelay);
                    this.retryDelay *= 1.5;
                }
            }
        }
        throw lastError || new Error('LLM API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
    }
    buildTradeAnalysisPrompt(trade, marketSnapshot, signal) {
        return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥—É. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–¥–µ–ª–∫—É:

–°–î–ï–õ–ö–ê: ${trade.symbol} ${trade.side} $${trade.entryPrice}
RSI: ${marketSnapshot.indicators.rsi}
–¢—Ä–µ–Ω–¥: ${marketSnapshot.trend.direction}
–õ–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º: ${marketSnapshot.trend.isLocalMinimum}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ JSON:
{"action": "BUY/SELL/HOLD", "confidence": 0-100, "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ", "patterns": [], "marketConditions": [], "recommendation": "—Å–æ–≤–µ—Ç"}`;
    }
    buildResultsAnalysisPrompt(trades, snapshots, summary) {
        return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥—É. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:

–°–¢–ê–¢–ò–°–¢–ò–ö–ê: ${summary.totalTrades} —Å–¥–µ–ª–æ–∫, –≤–∏–Ω—Ä–µ–π—Ç ${summary.winRate}%

–î–∞–π –∞–Ω–∞–ª–∏–∑ –≤ JSON:
{"marketOverview": "–æ–±–∑–æ—Ä", "tradingOpportunities": [], "riskAssessment": "—Ä–∏—Å–∫–∏", "recommendations": []}`;
    }
    buildMarketSituationPrompt(marketSummary) {
        return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥—É. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é:

–ë–ê–õ–ê–ù–°: $${marketSummary.balance}
–°–î–ï–õ–ö–ò: ${marketSummary.totalTrades} (${marketSummary.winRate}% –≤–∏–Ω—Ä–µ–π—Ç)

–î–∞–π –∞–Ω–∞–ª–∏–∑ –≤ JSON:
{"marketOverview": "–æ–±–∑–æ—Ä", "tradingOpportunities": [], "riskAssessment": "—Ä–∏—Å–∫–∏", "recommendations": []}`;
    }
    async callLLM(prompt) {
        const response = await axios_1.default.post(this.baseUrl, {
            model: 'openai/gpt-oss-120b',
            messages: [{ role: 'user', content: prompt }],
            temperature: 0.7,
            max_tokens: 2000
        }, {
            headers: {
                'Authorization': `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json'
            },
            timeout: 30000
        });
        return response.data.choices[0].message.content;
    }
    parseTradeAnalysis(response) {
        try {
            const parsed = this.extractJSON(response);
            if (parsed) {
                return {
                    action: parsed.action || 'HOLD',
                    confidence: parsed.confidence || 50,
                    reasoning: parsed.reasoning || '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    patterns: Array.isArray(parsed.patterns) ? parsed.patterns : [],
                    marketConditions: Array.isArray(parsed.marketConditions) ? parsed.marketConditions : [],
                    recommendation: parsed.recommendation || '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'
                };
            }
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–∫–∏:', error);
        }
        return this.getDefaultTradeAnalysis();
    }
    parseResultsAnalysis(response) {
        try {
            const parsed = this.extractJSON(response);
            if (parsed) {
                return {
                    marketOverview: parsed.marketOverview || '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    tradingOpportunities: Array.isArray(parsed.tradingOpportunities) ? parsed.tradingOpportunities : [],
                    riskAssessment: parsed.riskAssessment || '–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                    recommendations: Array.isArray(parsed.recommendations) ? parsed.recommendations : []
                };
            }
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        }
        return this.getDefaultResultsAnalysis();
    }
    parseMarketSituationAnalysis(response) {
        try {
            const parsed = this.extractJSON(response);
            if (parsed) {
                return {
                    marketOverview: parsed.marketOverview || '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    tradingOpportunities: Array.isArray(parsed.tradingOpportunities) ? parsed.tradingOpportunities : [],
                    riskAssessment: parsed.riskAssessment || '–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                    recommendations: Array.isArray(parsed.recommendations) ? parsed.recommendations : []
                };
            }
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏:', error);
        }
        return this.getDefaultMarketSituationAnalysis();
    }
    extractJSON(text) {
        try {
            // –ò—â–µ–º JSON –±–ª–æ–∫
            const jsonStart = text.indexOf('{');
            if (jsonStart === -1)
                return null;
            let braceCount = 0;
            let jsonEnd = jsonStart;
            for (let i = jsonStart; i < text.length; i++) {
                if (text[i] === '{')
                    braceCount++;
                if (text[i] === '}')
                    braceCount--;
                if (braceCount === 0) {
                    jsonEnd = i;
                    break;
                }
            }
            const jsonStr = text.substring(jsonStart, jsonEnd + 1);
            console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω JSON:', jsonStr.substring(0, 100) + '...');
            // –û—á–∏—â–∞–µ–º –æ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
            const cleanedJson = jsonStr.replace(/\n/g, ' ').replace(/\r/g, ' ');
            return JSON.parse(cleanedJson);
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON:', error);
            return null;
        }
    }
    getDefaultTradeAnalysis() {
        return {
            action: 'HOLD',
            confidence: 50,
            reasoning: 'LLM –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            patterns: [],
            marketConditions: [],
            recommendation: '–û–∂–∏–¥–∞—Ç—å –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π'
        };
    }
    getDefaultResultsAnalysis() {
        return {
            marketOverview: 'LLM –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            tradingOpportunities: [],
            riskAssessment: '–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
            recommendations: []
        };
    }
    getDefaultMarketSituationAnalysis() {
        return {
            marketOverview: 'LLM –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            tradingOpportunities: [],
            riskAssessment: '–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
            recommendations: []
        };
    }
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}
exports.LLMAnalyzer = LLMAnalyzer;
//# sourceMappingURL=llm-analyzer.js.map