"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalpingStrategy = void 0;
const technical_1 = require("../indicators/technical");
/**
 * –°–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
 */
class ScalpingStrategy {
    config;
    mexcRest;
    mexcWs;
    indicators;
    riskManager;
    positionManager;
    logger;
    telegram;
    marketData = new Map();
    lastPrices = new Map();
    isRunning = false;
    constructor(config, mexcRest, mexcWs, riskManager, positionManager, logger, telegram = null) {
        this.config = config;
        this.mexcRest = mexcRest;
        this.mexcWs = mexcWs;
        this.riskManager = riskManager;
        this.positionManager = positionManager;
        this.logger = logger;
        this.telegram = telegram;
        this.indicators = new technical_1.TechnicalIndicators();
        this.setupWebSocketHandlers();
    }
    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
     */
    async start() {
        this.isRunning = true;
        this.logger.info('–ó–∞–ø—É—Å–∫ —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏');
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        this.lastPrices.clear();
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for (const symbol of this.config.targetPairs) {
            this.logger.info({ symbol }, '–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª');
            this.mexcWs.subscribeBookTicker(symbol);
            this.mexcWs.subscribeTrades(symbol);
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            this.marketData.set(symbol, {
                symbol,
                price: 0,
                volume: 0,
                timestamp: Date.now()
            });
        }
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        this.startTradingLoop();
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
     */
    async stop() {
        this.isRunning = false;
        this.logger.info('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏');
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
        await this.positionManager.closeAllPositions('emergency');
    }
    /**
     * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebSocket
     */
    setupWebSocketHandlers() {
        this.mexcWs.on('bookTicker', (ticker) => {
            this.handleBookTicker(ticker);
        });
        this.mexcWs.on('trade', (trade) => {
            this.handleTrade(trade);
        });
        this.mexcWs.on('error', (error) => {
            this.logger.error({ error }, '–û—à–∏–±–∫–∞ WebSocket');
        });
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Ü–µ–Ω
     */
    async handleBookTicker(ticker) {
        this.logger.info({ ticker }, '–ü–æ–ª—É—á–µ–Ω BookTicker');
        const symbol = ticker.symbol;
        const midPrice = (ticker.bidPrice + ticker.askPrice) / 2;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–≤–∞—Ä–∏–π–Ω—ã–π –≥—ç–ø
        const lastPrice = this.lastPrices.get(symbol);
        if (lastPrice && this.riskManager.checkEmergencyGap(lastPrice, midPrice)) {
            this.logger.warn({ symbol, lastPrice, midPrice }, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π –≥—ç–ø');
            await this.positionManager.closeAllPositions('emergency');
            return;
        }
        this.lastPrices.set(symbol, midPrice);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const marketData = this.marketData.get(symbol);
        if (marketData) {
            marketData.price = midPrice;
            marketData.timestamp = Date.now();
            // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            this.indicators.addPrice(symbol, midPrice);
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            const series = this.indicators.priceSeries.get(symbol);
            const seriesLength = series ? series.length : 0;
            this.logger.info({ symbol, price: midPrice, seriesLength }, '–¶–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã');
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–∫–∞–Ω
            marketData.orderbook = this.indicators.analyzeOrderbook({
                bids: [{ price: ticker.bidPrice, quantity: ticker.bidQty }],
                asks: [{ price: ticker.askPrice, quantity: ticker.askQty }],
                timestamp: Date.now()
            }, midPrice);
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–¥–µ–ª–∫—É
     */
    handleTrade(trade) {
        const symbol = trade.symbol;
        this.indicators.addPrice(symbol, trade.price, trade.quantity);
    }
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
     */
    startTradingLoop() {
        this.logger.info('üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞');
        const loop = async () => {
            if (!this.isRunning) {
                this.logger.debug('‚èπÔ∏è –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                return;
            }
            try {
                this.logger.debug('üìä –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª: –Ω–∞—á–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏');
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                this.riskManager.resetDailyStats();
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
                await this.updatePositions();
                // –ò—â–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                const shouldPause = this.riskManager.shouldPause();
                this.logger.debug(`üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞: shouldPause=${shouldPause}`);
                if (!shouldPause) {
                    this.logger.debug('üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤');
                    await this.scanForSignals();
                }
                else {
                    this.logger.info('‚è∏Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º');
                }
            }
            catch (error) {
                this.logger.error({ error }, '–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ');
            }
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
            if (this.isRunning) {
                this.logger.debug(`‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ ${this.config.marketScanIntervalMs}ms`);
                setTimeout(loop, this.config.marketScanIntervalMs);
            }
        };
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª
        this.logger.info(`‚è∞ –ü–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —á–µ—Ä–µ–∑ ${this.config.marketScanIntervalMs}ms`);
        setTimeout(loop, this.config.marketScanIntervalMs);
    }
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
     */
    async updatePositions() {
        try {
            const updates = await this.positionManager.updatePositions();
            for (const update of updates) {
                if (update.shouldClose) {
                    await this.positionManager.closePosition(update.position.id, update.closeReason);
                    this.riskManager.onPositionClosed(update.position, update.currentPrice, update.closeReason);
                }
            }
        }
        catch (error) {
            this.logger.error({ error }, '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π');
        }
    }
    /**
     * –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
     */
    async scanForSignals() {
        this.logger.debug(`üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è ${this.config.targetPairs.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        for (const symbol of this.config.targetPairs) {
            try {
                this.logger.debug(`üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª: ${symbol}`);
                const signal = await this.analyzeSymbol(symbol);
                if (signal && signal.action !== 'hold') {
                    this.logger.info({ signal }, `üéØ –ù–∞–π–¥–µ–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è ${symbol}`);
                    await this.executeSignal(signal);
                }
                else {
                    this.logger.debug(`üìä ${symbol}: ${signal ? 'HOLD —Å–∏–≥–Ω–∞–ª' : '–Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞'}`);
                }
            }
            catch (error) {
                this.logger.error({ error, symbol }, '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞');
            }
        }
        this.logger.debug('‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª
     */
    async analyzeSymbol(symbol) {
        const marketData = this.marketData.get(symbol);
        if (!marketData || marketData.price === 0) {
            this.logger.warn({ symbol, hasData: !!marketData, price: marketData?.price }, '–ù–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            return null;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —ç—Ç–æ–º —Å–∏–º–≤–æ–ª–µ
        if (!this.positionManager.canOpenPositionForSymbol(symbol)) {
            return null;
        }
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        const volatility = this.indicators.calculateVolatility(symbol, this.config.volatilityPeriodMs);
        const ema = this.indicators.calculateEMA(symbol, this.config.emaFastPeriod, this.config.emaSlowPeriod);
        if (!volatility || !ema || !marketData.orderbook) {
            this.logger.warn({
                symbol,
                hasVolatility: !!volatility,
                hasEma: !!ema,
                hasOrderbook: !!marketData.orderbook
            }, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            return null;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
        const entryConditions = this.indicators.checkEntryConditions(symbol, volatility, ema, marketData.orderbook, {
            minVolatility: this.config.minVolatilityThreshold,
            maxSpread: this.config.maxSpreadPercent,
            minDepth: this.config.minOrderbookDepth
        });
        if (!entryConditions.canEnter || !entryConditions.direction) {
            this.logger.info({
                symbol,
                canEnter: entryConditions.canEnter,
                direction: entryConditions.direction,
                confidence: entryConditions.confidence,
                reasons: entryConditions.reasons,
                volatility: volatility.value,
                minVolatility: this.config.minVolatilityThreshold
            }, '–°–∏–≥–Ω–∞–ª HOLD - —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
            return {
                symbol,
                action: 'hold',
                confidence: entryConditions.confidence,
                price: marketData.price,
                quantity: 0,
                reasons: entryConditions.reasons,
                timestamp: Date.now()
            };
        }
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        const positionSize = this.calculatePositionSize(symbol, marketData.price);
        if (positionSize === 0)
            return null;
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP/SL
        const levels = this.indicators.calculateAdaptiveLevels(marketData.price, volatility, entryConditions.direction, this.config.targetProfitPercent, this.config.stopLossPercent, this.config.volatilityMultiplier);
        return {
            symbol,
            action: entryConditions.direction,
            confidence: entryConditions.confidence,
            price: marketData.price,
            quantity: positionSize,
            takeProfit: levels.takeProfit,
            stopLoss: levels.stopLoss,
            reasons: entryConditions.reasons,
            timestamp: Date.now()
        };
    }
    /**
     * –ò—Å–ø–æ–ª–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
     */
    async executeSignal(signal) {
        if (signal.action === 'hold')
            return;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const riskCheck = this.riskManager.canOpenPosition(signal.symbol, signal.action, signal.quantity, signal.price);
        if (!riskCheck.allowed) {
            this.logger.debug({
                signal,
                reason: riskCheck.reason
            }, '–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º');
            return;
        }
        try {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            const position = await this.positionManager.openPosition(signal.symbol, signal.action, signal.quantity, signal.price, signal.takeProfit, signal.stopLoss);
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–µ
            this.riskManager.onPositionOpened(position);
            this.logger.info({
                signal,
                position
            }, `–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è ${signal.action} ${signal.symbol}`);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (this.telegram) {
                await this.telegram.notifyPositionOpened({
                    id: position.id,
                    symbol: position.symbol,
                    side: position.side,
                    entryPrice: position.entryPrice,
                    quantity: position.quantity,
                    takeProfit: position.takeProfit,
                    stopLoss: position.stopLoss
                });
            }
        }
        catch (error) {
            const errorDetails = error instanceof Error ? {
                message: error.message,
                stack: error.stack,
                name: error.name,
                code: error.code,
                response: error.response?.data
            } : { message: String(error) };
            this.logger.error({
                error: errorDetails,
                signal
            }, '–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞');
        }
    }
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
     */
    calculatePositionSize(symbol, price) {
        // –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT
        const positionValueUSDT = (this.config.deposit * this.config.positionSizePercent) / 100;
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
        let quantity = positionValueUSDT / price;
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è MEXC (stepSize = 0.001)
        quantity = Math.floor(quantity * 1000) / 1000;
        return quantity;
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    getStrategyStats() {
        return {
            isRunning: this.isRunning,
            marketData: Object.fromEntries(this.marketData),
            riskMetrics: this.riskManager.getMetrics(),
            positionStats: this.positionManager.getPositionStats(),
            performance: this.riskManager.getPerformanceStats()
        };
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
     */
    async getLastSignals() {
        const signals = [];
        for (const symbol of this.config.targetPairs) {
            const signal = await this.analyzeSymbol(symbol);
            if (signal) {
                signals.push(signal);
            }
        }
        return signals;
    }
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
     */
    async forceCloseAllPositions() {
        this.logger.warn('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π');
        await this.positionManager.closeAllPositions('emergency');
    }
}
exports.ScalpingStrategy = ScalpingStrategy;
//# sourceMappingURL=scalping.js.map