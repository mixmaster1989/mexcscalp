"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RiskManager = void 0;
/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤
 */
class RiskManager {
    config;
    metrics;
    tradeHistory = [];
    dailyStartTime;
    emergencyStop = false;
    lastPauseCheck = 0;
    constructor(config) {
        this.config = config;
        this.dailyStartTime = this.getDayStart();
        this.metrics = {
            dailyPnL: 0,
            dailyTrades: 0,
            currentPositions: 0,
            exposurePercent: 0,
            winRate: 0,
            avgWin: 0,
            avgLoss: 0,
            maxDrawdown: 0,
            consecutiveLosses: 0,
            lastTradeTime: 0
        };
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
     */
    canOpenPosition(symbol, side, quantity, price) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å—Ç–æ–ø–∞
        if (this.emergencyStop) {
            return { allowed: false, reason: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø' };
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —É–±—ã—Ç–∫–æ–≤
        if (this.metrics.dailyPnL <= -this.config.dailyLossLimit) {
            return { allowed: false, reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–æ–≤' };
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏
        if (this.metrics.dailyPnL >= this.config.dailyTargetProfit) {
            return { allowed: false, reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –ø—Ä–∏–±—ã–ª–∏' };
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
        if (this.metrics.currentPositions >= this.config.maxParallelPositions) {
            return { allowed: false, reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π' };
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        const positionValue = quantity * price;
        const positionPercent = (positionValue / this.config.deposit) * 100;
        if (positionPercent > this.config.positionSizePercent) {
            return { allowed: false, reason: '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç' };
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
        const newExposure = this.metrics.exposurePercent + positionPercent;
        if (newExposure > this.config.maxParallelPositions * this.config.positionSizePercent) {
            return { allowed: false, reason: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–±—â–µ–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏' };
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —É–±—ã—Ç–∫–æ–≤
        if (this.metrics.consecutiveLosses >= 5) {
            return { allowed: false, reason: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–¥—Ä—è–¥ —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫' };
        }
        return { allowed: true };
    }
    /**
     * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
     */
    onPositionOpened(position) {
        this.metrics.currentPositions++;
        const positionValue = position.quantity * position.entryPrice;
        const positionPercent = (positionValue / this.config.deposit) * 100;
        this.metrics.exposurePercent += positionPercent;
    }
    /**
     * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
     */
    onPositionClosed(position, exitPrice, reason) {
        this.metrics.currentPositions--;
        // –£–±–∏—Ä–∞–µ–º —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é
        const positionValue = position.quantity * position.entryPrice;
        const positionPercent = (positionValue / this.config.deposit) * 100;
        this.metrics.exposurePercent -= positionPercent;
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
        let pnl;
        if (position.side === 'buy') {
            pnl = (exitPrice - position.entryPrice) * position.quantity;
        }
        else {
            pnl = (position.entryPrice - exitPrice) * position.quantity;
        }
        const pnlPercent = (pnl / (position.quantity * position.entryPrice)) * 100;
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏
        const trade = {
            id: position.id,
            symbol: position.symbol,
            side: position.side,
            entryPrice: position.entryPrice,
            exitPrice,
            quantity: position.quantity,
            pnl,
            pnlPercent,
            timestamp: Date.now(),
            duration: Date.now() - position.entryTime,
            reason
        };
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateMetrics(trade);
        this.tradeHistory.push(trade);
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 —Å–¥–µ–ª–æ–∫
        if (this.tradeHistory.length > 1000) {
            this.tradeHistory.splice(0, this.tradeHistory.length - 1000);
        }
        return trade;
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    shouldCloseByTime(position) {
        const duration = Date.now() - position.entryTime;
        return duration >= this.config.maxTradeTimeMs;
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ –∞–≤–∞—Ä–∏–π–Ω—ã–π –≥—ç–ø
     */
    checkEmergencyGap(oldPrice, newPrice) {
        const gapPercent = Math.abs((newPrice - oldPrice) / oldPrice) * 100;
        if (gapPercent > this.config.maxGapPercent) {
            this.emergencyStop = true;
            return true;
        }
        return false;
    }
    /**
     * –°–±—Ä–æ—Å–∏—Ç—å –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø
     */
    resetEmergencyStop() {
        this.emergencyStop = false;
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
     */
    getMetrics() {
        return { ...this.metrics };
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    getTodayTrades() {
        const todayStart = this.getDayStart();
        return this.tradeHistory.filter(t => t.timestamp >= todayStart);
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    getPerformanceStats() {
        const todayTrades = this.getTodayTrades();
        const winningTrades = todayTrades.filter(t => t.pnl > 0);
        const losingTrades = todayTrades.filter(t => t.pnl < 0);
        const winRate = todayTrades.length > 0 ? (winningTrades.length / todayTrades.length) * 100 : 0;
        const avgProfit = winningTrades.length > 0 ? winningTrades.reduce((sum, t) => sum + t.pnl, 0) / winningTrades.length : 0;
        const avgLoss = losingTrades.length > 0 ? Math.abs(losingTrades.reduce((sum, t) => sum + t.pnl, 0) / losingTrades.length) : 0;
        const totalProfit = winningTrades.reduce((sum, t) => sum + t.pnl, 0);
        const totalLoss = Math.abs(losingTrades.reduce((sum, t) => sum + t.pnl, 0));
        const profitFactor = totalLoss > 0 ? totalProfit / totalLoss : 0;
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç Sharpe Ratio
        const avgReturn = todayTrades.length > 0 ? todayTrades.reduce((sum, t) => sum + t.pnlPercent, 0) / todayTrades.length : 0;
        const returns = todayTrades.map(t => t.pnlPercent);
        const stdDev = this.calculateStdDev(returns);
        const sharpeRatio = stdDev > 0 ? avgReturn / stdDev : 0;
        return {
            totalTrades: todayTrades.length,
            winningTrades: winningTrades.length,
            losingTrades: losingTrades.length,
            winRate,
            avgProfit,
            avgLoss,
            profitFactor,
            sharpeRatio,
            maxDrawdown: this.metrics.maxDrawdown
        };
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ
     */
    shouldPause() {
        // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤
        if (this.metrics.consecutiveLosses >= 3) {
            console.log(`üõë RiskManager: –ü–∞—É–∑–∞ - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥ (${this.metrics.consecutiveLosses})`);
            return true;
        }
        // –ü–∞—É–∑–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        const lossLimitReached = this.metrics.dailyPnL <= -this.config.dailyLossLimit;
        const profitTargetReached = this.metrics.dailyPnL >= this.config.dailyTargetProfit;
        if (lossLimitReached || profitTargetReached) {
            console.log(`üõë RiskManager: –ü–∞—É–∑–∞ - –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. PnL: ${this.metrics.dailyPnL}, –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–æ–≤: -${this.config.dailyLossLimit}, —Ü–µ–ª—å –ø—Ä–∏–±—ã–ª–∏: ${this.config.dailyTargetProfit}`);
            return true;
        }
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É)
        const now = Date.now();
        if (!this.lastPauseCheck || now - this.lastPauseCheck > 60000) {
            this.lastPauseCheck = now;
            console.log(`üìä RiskManager: PnL=${this.metrics.dailyPnL}, —É–±—ã—Ç–∫–∏ –ø–æ–¥—Ä—è–¥=${this.metrics.consecutiveLosses}, —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞`);
        }
        return false;
    }
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–≤—ã–∑—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
     */
    resetDailyStats() {
        const newDayStart = this.getDayStart();
        if (newDayStart > this.dailyStartTime) {
            this.dailyStartTime = newDayStart;
            this.metrics.dailyPnL = 0;
            this.metrics.dailyTrades = 0;
            this.metrics.consecutiveLosses = 0;
            this.emergencyStop = false;
        }
    }
    updateMetrics(trade) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.metrics.dailyPnL += trade.pnl;
        this.metrics.dailyTrades++;
        this.metrics.lastTradeTime = trade.timestamp;
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥
        if (trade.pnl < 0) {
            this.metrics.consecutiveLosses++;
        }
        else {
            this.metrics.consecutiveLosses = 0;
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const allTrades = this.tradeHistory.concat([trade]);
        const winningTrades = allTrades.filter(t => t.pnl > 0);
        this.metrics.winRate = allTrades.length > 0 ? (winningTrades.length / allTrades.length) * 100 : 0;
        this.metrics.avgWin = winningTrades.length > 0 ?
            winningTrades.reduce((sum, t) => sum + t.pnl, 0) / winningTrades.length : 0;
        const losingTrades = allTrades.filter(t => t.pnl < 0);
        this.metrics.avgLoss = losingTrades.length > 0 ?
            losingTrades.reduce((sum, t) => sum + Math.abs(t.pnl), 0) / losingTrades.length : 0;
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
        this.updateDrawdown();
    }
    updateDrawdown() {
        const todayTrades = this.getTodayTrades();
        if (todayTrades.length === 0)
            return;
        let peak = 0;
        let currentPnL = 0;
        let maxDD = 0;
        for (const trade of todayTrades) {
            currentPnL += trade.pnl;
            if (currentPnL > peak) {
                peak = currentPnL;
            }
            const drawdown = peak - currentPnL;
            if (drawdown > maxDD) {
                maxDD = drawdown;
            }
        }
        this.metrics.maxDrawdown = (maxDD / this.config.deposit) * 100;
    }
    getDayStart() {
        const now = new Date();
        return new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime();
    }
    calculateStdDev(values) {
        if (values.length === 0)
            return 0;
        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
        const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;
        return Math.sqrt(variance);
    }
}
exports.RiskManager = RiskManager;
//# sourceMappingURL=manager.js.map