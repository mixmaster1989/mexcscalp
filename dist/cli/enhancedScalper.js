#!/usr/bin/env ts-node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = require("dotenv");
const scalperEnhancer_1 = require("../core/scalperEnhancer");
const mexcRest_1 = require("../infra/mexcRest");
(0, dotenv_1.config)();
async function testEnhancedScalper() {
    try {
        console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –°–ö–ê–õ–¨–ü–ï–†–ê');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        const apiKey = process.env.MEXC_API_KEY;
        const secretKey = process.env.MEXC_SECRET_KEY;
        if (!apiKey || !secretKey) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ MEXC –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        // –°–æ–∑–¥–∞–µ–º REST –∫–ª–∏–µ–Ω—Ç
        const restClient = new mexcRest_1.MexcRestClient(apiKey, secretKey);
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ETHUSDC
        const instrument = {
            symbol: 'ETHUSDC',
            baseAsset: 'ETH',
            quoteAsset: 'USDC',
            tickSize: 0.01,
            stepSize: 0.000001,
            minNotional: 1.0,
            maxNotional: 1000000,
            minQty: 0.000001,
            maxQty: 1000
        };
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const config = (0, scalperEnhancer_1.createDefaultConfig)();
        console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', JSON.stringify(config, null, 2));
        // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫–∞–ª—å–ø–µ—Ä
        const enhancer = new scalperEnhancer_1.ScalperEnhancer(config, restClient, instrument);
        // –ó–∞–ø—É—Å–∫–∞–µ–º
        await enhancer.start();
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ä–¥–µ—Ä–∞
        console.log('\nüìä –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ä–¥–µ—Ä–∞...');
        const openOrders = await restClient.getOpenOrders('ETHUSDC');
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${openOrders.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤`);
        // –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('\nüí∞ –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        const price = await restClient.getPrice('ETHUSDC');
        console.log(`–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: $${price}`);
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏
        console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏...');
        await enhancer.manageOrders(openOrders);
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        const stats = enhancer.getStats();
        console.log(JSON.stringify(stats, null, 2));
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await enhancer.stop();
        console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        console.error('\n‚ùå –û—à–∏–±–∫–∞:', errorMessage);
        process.exit(1);
    }
}
if (require.main === module) {
    testEnhancedScalper();
}
//# sourceMappingURL=enhancedScalper.js.map