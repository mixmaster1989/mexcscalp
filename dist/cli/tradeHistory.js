#!/usr/bin/env ts-node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = require("dotenv");
const tradeHistory_1 = require("../metrics/tradeHistory");
const db_1 = require("../storage/db");
// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
(0, dotenv_1.config)();
async function main() {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –∑–∞ —Å—É—Ç–∫–∏...\n');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        const apiKey = process.env.MEXC_API_KEY;
        const secretKey = process.env.MEXC_SECRET_KEY;
        if (!apiKey || !secretKey) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ MEXC. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env');
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        console.log('üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        await (0, db_1.initDatabase)();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n');
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        const tradeHistoryService = new tradeHistory_1.TradeHistoryService(apiKey, secretKey);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MEXC API
        console.log('üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MEXC API...');
        try {
            const isConnected = await tradeHistoryService['mexcClient'].ping();
            if (isConnected) {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MEXC API —É—Å–ø–µ—à–Ω–æ');
            }
            else {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MEXC API');
            }
        }
        catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MEXC API:', error);
        }
        // –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        console.log('\nüß™ –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ MEXC API...');
        try {
            const testTrades = await tradeHistoryService['mexcClient'].getMyTrades('ETHUSDC', 10);
            console.log(`‚úÖ API –≤–µ—Ä–Ω—É–ª ${testTrades.length} —Å–¥–µ–ª–æ–∫`);
            if (testTrades.length > 0) {
                console.log('üìã –ü—Ä–∏–º–µ—Ä —Å–¥–µ–ª–∫–∏:', {
                    id: testTrades[0].id,
                    symbol: testTrades[0].symbol,
                    side: testTrades[0].side,
                    price: testTrades[0].price,
                    quantity: testTrades[0].quantity,
                    timestamp: new Date(testTrades[0].timestamp).toLocaleString('ru-RU')
                });
            }
        }
        catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ API:', error);
        }
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∑–∞ —Å—É—Ç–∫–∏
        console.log('\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...');
        const trades = await tradeHistoryService.getDailyTradeHistory();
        if (trades.length === 0) {
            console.log('‚ÑπÔ∏è  –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${trades.length} —Å–¥–µ–ª–æ–∫\n`);
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('üìä –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        const stats = await tradeHistoryService.getDailyTradeStats();
        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –°–£–¢–ö–ò:');
        console.log('‚ïê'.repeat(50));
        console.log(`–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}`);
        console.log(`–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades}`);
        console.log(`–£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades}`);
        console.log(`–í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate.toFixed(2)}%`);
        console.log(`–û–±—â–∏–π PnL: ${stats.totalPnl.toFixed(4)} USDC`);
        console.log(`–°—Ä–µ–¥–Ω–∏–π PnL: ${stats.avgPnl.toFixed(4)} USDC`);
        console.log(`–û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${stats.totalFees.toFixed(4)} USDC`);
        console.log(`–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: ${stats.bestTrade.toFixed(4)} USDC`);
        console.log(`–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${stats.worstTrade.toFixed(4)} USDC`);
        // –í—ã–≤–æ–¥–∏–º —Ç–æ–ø —Å–¥–µ–ª–∫–∏
        if (stats.winningTrades > 0) {
            console.log('\nüèÜ –¢–û–ü-5 –õ–£–ß–®–ò–• –°–î–ï–õ–û–ö:');
            console.log('‚ïê'.repeat(50));
            const topTrades = await tradeHistoryService.getTopTrades(5);
            topTrades.forEach((trade, index) => {
                const time = new Date(trade.timestamp).toLocaleTimeString('ru-RU');
                console.log(`${index + 1}. ${trade.symbol} | ${trade.side.toUpperCase()} | PnL: ${trade.pnl.toFixed(4)} | ${time}`);
            });
        }
        // –í—ã–≤–æ–¥–∏–º —Ö—É–¥—à–∏–µ —Å–¥–µ–ª–∫–∏
        if (stats.losingTrades > 0) {
            console.log('\nüí∏ –¢–û–ü-5 –•–£–î–®–ò–• –°–î–ï–õ–û–ö:');
            console.log('‚ïê'.repeat(50));
            const worstTrades = await tradeHistoryService.getWorstTrades(5);
            worstTrades.forEach((trade, index) => {
                const time = new Date(trade.timestamp).toLocaleTimeString('ru-RU');
                console.log(`${index + 1}. ${trade.symbol} | ${trade.side.toUpperCase()} | PnL: ${trade.pnl.toFixed(4)} | ${time}`);
            });
        }
        // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        console.log('\nüìã –ü–û–õ–ù–ê–Ø –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö:');
        console.log('‚ïê'.repeat(120));
        console.log('‚Ññ\tID\t\t–°–∏–º–≤–æ–ª\t–°—Ç–æ—Ä–æ–Ω–∞\t–í—Ö–æ–¥\t–í—ã—Ö–æ–¥\t–ö–æ–ª-–≤–æ\tPnL (USDC)\t–í—Ä–µ–º—è\t\t\t–°—Ç—Ä–∞—Ç–µ–≥–∏—è');
        console.log('‚îÄ'.repeat(120));
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å–¥–µ–ª–∫–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
        trades.forEach((trade, index) => {
            const time = new Date(trade.timestamp).toLocaleString('ru-RU');
            const side = trade.side === 'buy' ? 'BUY ' : 'SELL';
            const strategy = trade.strategy || 'N/A';
            const pnlColor = trade.pnl >= 0 ? 'üü¢' : 'üî¥';
            console.log(`${index + 1}\t` +
                `${trade.tradeId.slice(0, 8)}...\t` +
                `${trade.symbol}\t` +
                `${side}\t` +
                `${trade.entryPrice.toFixed(4)}\t` +
                `${trade.exitPrice.toFixed(4)}\t` +
                `${trade.quantity.toFixed(6)}\t` +
                `${pnlColor} ${trade.pnl.toFixed(4)}\t` +
                `${time}\t` +
                `${strategy}`);
        });
        console.log(`\nüìä –í—Å–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–æ: ${trades.length} —Å–¥–µ–ª–æ–∫`);
        // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        console.log('\nüíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV...');
        const csvContent = await tradeHistoryService.exportToCSV(trades);
        const fs = require('fs');
        const path = require('path');
        const csvPath = path.join(__dirname, '../../data/daily_trades.csv');
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const dir = path.dirname(csvPath);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        fs.writeFileSync(csvPath, csvContent);
        console.log(`‚úÖ CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${csvPath}`);
        console.log('\nüéâ –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        console.error('\n‚ùå –û—à–∏–±–∫–∞:', errorMessage);
        process.exit(1);
    }
}
// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
if (require.main === module) {
    main();
}
//# sourceMappingURL=tradeHistory.js.map