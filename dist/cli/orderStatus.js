#!/usr/bin/env ts-node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mexcRest_1 = require("../infra/mexcRest");
const dotenv_1 = require("dotenv");
(0, dotenv_1.config)();
async function checkOrderStatus() {
    try {
        console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –û–†–î–ï–†–û–í –ò –ë–ê–õ–ê–ù–°–ê');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        const apiKey = process.env.MEXC_API_KEY;
        const secretKey = process.env.MEXC_SECRET_KEY;
        if (!apiKey || !secretKey) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ MEXC –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        const mexcClient = new mexcRest_1.MexcRestClient(apiKey, secretKey);
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH
        console.log('\nüí∞ –¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê ETH:');
        try {
            const currentPrice = await mexcClient.getPrice('ETH/USDC');
            console.log(`ETH/USDC: $${currentPrice.toFixed(4)}`);
        }
        catch (error) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ETH');
        }
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        console.log('\nüí≥ –ë–ê–õ–ê–ù–° –ê–ö–ö–ê–£–ù–¢–ê:');
        try {
            const accountInfo = await mexcClient.getAccountInfo();
            const balances = accountInfo.balances.filter(b => b.free > 0 || b.locked > 0);
            balances.forEach(balance => {
                const total = balance.free + balance.locked;
                console.log(`${balance.asset}: ${total.toFixed(6)} (—Å–≤–æ–±–æ–¥–Ω–æ: ${balance.free.toFixed(6)}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${balance.locked.toFixed(6)})`);
            });
        }
        catch (error) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å');
        }
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        console.log('\nüìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê:');
        try {
            const openOrders = await mexcClient.getOpenOrders('ETH/USDC');
            const ethOrders = openOrders.filter(order => order.symbol === 'ETHUSDC');
            if (ethOrders.length === 0) {
                console.log('–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è ETHUSDC');
            }
            else {
                console.log(`–ù–∞–π–¥–µ–Ω–æ ${ethOrders.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:`);
                ethOrders.forEach((order, index) => {
                    console.log(`${index + 1}. ${order.side.toUpperCase()} ${order.type} ${order.quantity} ETH @ $${order.price} (—Å—Ç–∞—Ç—É—Å: ${order.status})`);
                });
            }
        }
        catch (error) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞');
        }
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        console.log('\nüìä –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í (24 —á–∞—Å–∞):');
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ getMyTrades –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
            const trades = await mexcClient.getMyTrades('ETHUSDC', 1000);
            const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;
            const recentTrades = trades.filter(trade => trade.timestamp >= oneDayAgo);
            if (recentTrades.length === 0) {
                console.log('–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞');
            }
            else {
                console.log(`–ù–∞–π–¥–µ–Ω–æ ${recentTrades.length} —Å–¥–µ–ª–æ–∫ –∑–∞ 24 —á–∞—Å–∞:`);
                const buyTrades = recentTrades.filter(t => t.side === 'buy');
                const sellTrades = recentTrades.filter(t => t.side === 'sell');
                console.log(`–ü–æ–∫—É–ø–∫–∏: ${buyTrades.length}, –ü—Ä–æ–¥–∞–∂–∏: ${sellTrades.length}`);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
                recentTrades.slice(-10).forEach((trade, index) => {
                    const time = new Date(trade.timestamp).toLocaleString();
                    console.log(`${index + 1}. ${trade.side.toUpperCase()} ${trade.quantity} ETH @ $${trade.price} (${time})`);
                });
            }
        }
        catch (error) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫');
        }
        console.log('\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        console.error('\n‚ùå –û—à–∏–±–∫–∞:', errorMessage);
        process.exit(1);
    }
}
if (require.main === module) {
    checkOrderStatus();
}
//# sourceMappingURL=orderStatus.js.map