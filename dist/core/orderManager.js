"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderManager = void 0;
/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ä–¥–µ—Ä–æ–≤ —Å TTL, —Ä–µ–ø—Ä–∞–π—Å–æ–º –∏ –ø–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–æ–≤–∫–æ–π
 */
class OrderManager {
    config;
    restClient;
    instrument;
    quoteLevels = new Map();
    lastCenter = 0;
    lastFillTime = Date.now();
    cancelTokens = 0;
    lastCancelReset = Date.now();
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    offset = 0;
    step = 0;
    maxLevels = 4;
    constructor(config, restClient, instrument) {
        this.config = config;
        this.restClient = restClient;
        this.instrument = instrument;
    }
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    setStrategyParams(offset, step, maxLevels) {
        this.offset = offset;
        this.step = step;
        this.maxLevels = maxLevels;
    }
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—Ç—Ä —Ü–µ–Ω—ã
     */
    updateCenter(midPrice) {
        this.lastCenter = midPrice;
    }
    /**
     * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
     */
    onFill() {
        this.lastFillTime = Date.now();
    }
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞–º–∏
     */
    async manageOrders(currentOrders, midPrice, bestBid, bestAsk, spread) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if (!this.passesFilters(spread)) {
                console.log('‚ö†Ô∏è –§–∏–ª—å—Ç—Ä—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏');
                return;
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä
            this.updateCenter(midPrice);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL –∏ —Ä–µ–ø—Ä–∞–π—Å
            await this.checkTTLAndReprice(currentOrders, bestBid, bestAsk);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–æ–≤–∫—É
            await this.checkRecentering();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º watchdog
            await this.checkNoFillWatchdog();
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
            await this.updateTopLevel(bestBid, bestAsk);
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ manageOrders:', error);
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TTL –∏ —Ä–µ–ø—Ä–∞–π—Å –æ—Ä–¥–µ—Ä–æ–≤
     */
    async checkTTLAndReprice(currentOrders, bestBid, bestAsk) {
        const now = Date.now();
        const ttlMs = this.config.ttl_order_sec * 1000;
        const deltaTicks = this.config.delta_ticks_for_replace * this.instrument.tickSize;
        for (const order of currentOrders) {
            const orderAge = now - order.timestamp;
            const priceDiff = Math.abs(order.side === 'buy' ?
                bestBid - order.price :
                order.price - bestAsk);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL –∏–ª–∏ –±–æ–ª—å—à–æ–π –æ—Ç—Ö–æ–¥ —Ü–µ–Ω—ã
            if (orderAge > ttlMs || priceDiff > deltaTicks) {
                console.log(`üîÑ –†–µ–ø—Ä–∞–π—Å –æ—Ä–¥–µ—Ä–∞ ${order.id}: –≤–æ–∑—Ä–∞—Å—Ç=${Math.round(orderAge / 1000)}—Å, –æ—Ç—Ö–æ–¥=${priceDiff.toFixed(6)}`);
                await this.repriceOrder(order, bestBid, bestAsk);
            }
        }
    }
    /**
     * –ü–µ—Ä–µ–≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –ø–æ –Ω–æ–≤–æ–π —Ü–µ–Ω–µ
     */
    async repriceOrder(order, bestBid, bestAsk) {
        try {
            // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ä–¥–µ—Ä
            await this.cancelOrder(order.symbol, order.id);
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
            const newPrice = this.calculateNewPrice(order.side, bestBid, bestAsk);
            if (newPrice > 0) {
                // –†–∞–∑–º–µ—â–∞–µ–º –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä
                const newOrder = await this.restClient.placeOrder(order.symbol, order.side, 'LIMIT', order.quantity, newPrice, `REPRICE_${Date.now()}`);
                console.log(`‚úÖ –û—Ä–¥–µ—Ä –ø–µ—Ä–µ–≤—ã—Å—Ç–∞–≤–ª–µ–Ω: ${order.side} ${order.quantity} @ $${newPrice}`);
            }
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–ø—Ä–∞–π—Å–∞ –æ—Ä–¥–µ—Ä–∞ ${order.id}:`, error);
        }
    }
    /**
     * –í—ã—á–∏—Å–ª–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –æ—Ä–¥–µ—Ä–∞
     */
    calculateNewPrice(side, bestBid, bestAsk) {
        if (side === 'buy') {
            // BUY –æ—Ä–¥–µ—Ä - –Ω–µ –≤—ã—à–µ best bid
            return Math.max(bestBid - this.instrument.tickSize, bestBid - this.offset);
        }
        else {
            // SELL –æ—Ä–¥–µ—Ä - –Ω–µ –Ω–∏–∂–µ best ask
            return Math.min(bestAsk + this.instrument.tickSize, bestAsk + this.offset);
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–æ–≤–∫–∏
     */
    async checkRecentering() {
        const centerDiff = Math.abs(this.lastCenter - this.lastCenter);
        const threshold = this.config.recentering_trigger * this.step;
        if (centerDiff > threshold) {
            console.log(`üîÑ –ü–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–æ–≤–∫–∞: —Å–¥–≤–∏–≥=${centerDiff.toFixed(6)}, –ø–æ—Ä–æ–≥=${threshold.toFixed(6)}`);
            await this.recenterLevels();
        }
    }
    /**
     * –ü–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω–∏ –≤–æ–∫—Ä—É–≥ –Ω–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
     */
    async recenterLevels() {
        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–æ–≤–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        console.log('üìä –ü–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–æ–≤–∫–∞ —É—Ä–æ–≤–Ω–µ–π (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)');
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å watchdog –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–¥–µ–ª–æ–∫
     */
    async checkNoFillWatchdog() {
        const now = Date.now();
        const timeSinceLastFill = now - this.lastFillTime;
        const watchdogMs = this.config.no_fill_watchdog_min * 60 * 1000;
        if (timeSinceLastFill > watchdogMs) {
            console.log(`‚ö†Ô∏è Watchdog: ${Math.round(timeSinceLastFill / 60000)} –º–∏–Ω –±–µ–∑ —Å–¥–µ–ª–æ–∫`);
            await this.adjustForNoFills();
        }
    }
    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–¥–µ–ª–æ–∫
     */
    async adjustForNoFills() {
        // –£–º–µ–Ω—å—à–∞–µ–º offset –Ω–∞ 10-15%
        this.offset *= 0.85;
        console.log(`üìâ Offset —É–º–µ–Ω—å—à–µ–Ω –¥–æ ${this.offset.toFixed(6)}`);
        // –õ–æ–≥–∏–∫–∞ –ø–∞—É–∑—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    }
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
     */
    async updateTopLevel(bestBid, bestAsk) {
        // –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        console.log('üîù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)');
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
     */
    passesFilters(spread) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
        const minSpread = this.config.min_spread_ticks * this.instrument.tickSize;
        if (spread < minSpread) {
            console.log(`‚ö†Ô∏è –°–ø—Ä–µ–¥ —Å–ª–∏—à–∫–æ–º –º–∞–ª: ${spread.toFixed(6)} < ${minSpread.toFixed(6)}`);
            return false;
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        const now = Date.now();
        if (now - this.lastCenter > this.config.staleness_ms) {
            console.log(`‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏: ${Math.round((now - this.lastCenter) / 1000)}—Å`);
            return false;
        }
        return true;
    }
    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä —Å rate limiting
     */
    async cancelOrder(symbol, orderId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        const now = Date.now();
        if (now - this.lastCancelReset > 60000) {
            this.cancelTokens = this.config.cancel_rate_per_min;
            this.lastCancelReset = now;
        }
        if (this.cancelTokens <= 0) {
            console.log('‚ö†Ô∏è Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤');
            return;
        }
        try {
            await this.restClient.cancelOrder(symbol, orderId);
            this.cancelTokens--;
            console.log(`‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω: ${orderId}`);
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ ${orderId}:`, error);
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    getStats() {
        return {
            lastCenter: this.lastCenter,
            lastFillTime: this.lastFillTime,
            timeSinceLastFill: Date.now() - this.lastFillTime,
            cancelTokens: this.cancelTokens,
            quoteLevels: this.quoteLevels.size
        };
    }
}
exports.OrderManager = OrderManager;
//# sourceMappingURL=orderManager.js.map