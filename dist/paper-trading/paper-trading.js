"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaperTradingSystem = void 0;
const market_snapshot_1 = require("./data/market-snapshot");
class PaperTradingSystem {
    trades = new Map();
    closedTrades = [];
    snapshotLogger;
    balance = 10000; // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å $10,000
    positionSize = 0.1; // 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    maxOpenTrades = 3;
    tradeTimeout = 60; // –¢–∞–π–º–∞—É—Ç —Å–¥–µ–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
    constructor() {
        this.snapshotLogger = new market_snapshot_1.MarketSnapshotLogger();
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª –∏ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É
     */
    processSignal(signal, analysis, currentCandle, historicalCandles) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if (this.trades.size >= this.maxOpenTrades) {
            console.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: ${this.maxOpenTrades}`);
            return null;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        const requiredAmount = this.balance * this.positionSize;
        if (requiredAmount < 100) { // –ú–∏–Ω–∏–º—É–º $100
            console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏');
            return null;
        }
        // –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ —Ä—ã–Ω–∫–∞
        const snapshot = this.snapshotLogger.createSnapshot(signal.symbol, analysis, currentCandle, historicalCandles);
        // –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        const trade = {
            id: this.generateTradeId(),
            symbol: signal.symbol,
            side: signal.signal,
            entryPrice: signal.entryPrice,
            entryTime: Date.now(),
            quantity: requiredAmount / signal.entryPrice,
            stopLoss: signal.stopLoss,
            takeProfit: signal.takeProfit,
            marketSnapshot: snapshot,
            status: 'OPEN'
        };
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
        this.trades.set(trade.id, trade);
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        this.balance -= requiredAmount;
        console.log(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${trade.id}`);
        console.log(`   –°–∏–º–≤–æ–ª: ${trade.symbol}`);
        console.log(`   –°—Ç–æ—Ä–æ–Ω–∞: ${trade.side}`);
        console.log(`   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: $${trade.entryPrice.toFixed(4)}`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${trade.quantity.toFixed(6)}`);
        console.log(`   –°—Ç–æ–ø-–ª–æ—Å—Å: $${trade.stopLoss.toFixed(4)}`);
        console.log(`   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: $${trade.takeProfit.toFixed(4)}`);
        return trade;
    }
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
     */
    updateTrades(currentPrices) {
        const now = Date.now();
        const tradesToClose = [];
        for (const [tradeId, trade] of this.trades) {
            if (trade.status !== 'OPEN')
                continue;
            const currentPrice = currentPrices.get(trade.symbol);
            if (!currentPrice)
                continue;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
            let shouldClose = false;
            let exitReason = 'MANUAL';
            // –°—Ç–æ–ø-–ª–æ—Å—Å
            if (trade.side === 'BUY' && currentPrice <= trade.stopLoss) {
                shouldClose = true;
                exitReason = 'STOP_LOSS';
            }
            else if (trade.side === 'SELL' && currentPrice >= trade.stopLoss) {
                shouldClose = true;
                exitReason = 'STOP_LOSS';
            }
            // –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if (trade.side === 'BUY' && currentPrice >= trade.takeProfit) {
                shouldClose = true;
                exitReason = 'TAKE_PROFIT';
            }
            else if (trade.side === 'SELL' && currentPrice <= trade.takeProfit) {
                shouldClose = true;
                exitReason = 'TAKE_PROFIT';
            }
            // –¢–∞–π–º–∞—É—Ç
            const duration = (now - trade.entryTime) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
            if (duration >= this.tradeTimeout) {
                shouldClose = true;
                exitReason = 'TIMEOUT';
            }
            if (shouldClose) {
                this.closeTrade(tradeId, currentPrice, exitReason);
                tradesToClose.push(tradeId);
            }
        }
        // –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        for (const tradeId of tradesToClose) {
            this.trades.delete(tradeId);
        }
    }
    /**
     * –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É
     */
    closeTrade(tradeId, exitPrice, reason) {
        const trade = this.trades.get(tradeId);
        if (!trade)
            return;
        const now = Date.now();
        const duration = (now - trade.entryTime) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
        let pnl;
        if (trade.side === 'BUY') {
            pnl = (exitPrice - trade.entryPrice) * trade.quantity;
        }
        else {
            pnl = (trade.entryPrice - exitPrice) * trade.quantity;
        }
        const pnlPercent = (pnl / (trade.entryPrice * trade.quantity)) * 100;
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É
        trade.exitPrice = exitPrice;
        trade.exitTime = now;
        trade.exitReason = reason;
        trade.pnl = pnl;
        trade.pnlPercent = pnlPercent;
        trade.duration = duration;
        trade.status = 'CLOSED';
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        this.balance += (trade.entryPrice * trade.quantity) + pnl;
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
        this.closedTrades.push(trade);
        console.log(`\nüîö –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞: ${trade.id}`);
        console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
        console.log(`   –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: $${exitPrice.toFixed(4)}`);
        console.log(`   P&L: $${pnl.toFixed(2)} (${pnlPercent.toFixed(2)}%)`);
        console.log(`   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration.toFixed(1)} –º–∏–Ω`);
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
     */
    getOpenTrades() {
        return Array.from(this.trades.values()).filter(trade => trade.status === 'OPEN');
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
     */
    getClosedTrades() {
        return this.closedTrades;
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–Ω–∏–º–∫–∏ —Ä—ã–Ω–∫–∞
     */
    getAllMarketSnapshots() {
        return this.snapshotLogger.getAllSnapshots();
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    getTradingStats() {
        const totalTrades = this.closedTrades.length;
        const winningTrades = this.closedTrades.filter(trade => (trade.pnl || 0) > 0).length;
        const losingTrades = this.closedTrades.filter(trade => (trade.pnl || 0) < 0).length;
        const winRate = totalTrades > 0 ? (winningTrades / totalTrades) * 100 : 0;
        const totalPnL = this.closedTrades.reduce((sum, trade) => sum + (trade.pnl || 0), 0);
        const averagePnL = totalTrades > 0 ? totalPnL / totalTrades : 0;
        const bestTrade = Math.max(...this.closedTrades.map(trade => trade.pnl || 0), 0);
        const worstTrade = Math.min(...this.closedTrades.map(trade => trade.pnl || 0), 0);
        const averageDuration = totalTrades > 0
            ? this.closedTrades.reduce((sum, trade) => sum + (trade.duration || 0), 0) / totalTrades
            : 0;
        const grossProfit = this.closedTrades
            .filter(trade => (trade.pnl || 0) > 0)
            .reduce((sum, trade) => sum + (trade.pnl || 0), 0);
        const grossLoss = Math.abs(this.closedTrades
            .filter(trade => (trade.pnl || 0) < 0)
            .reduce((sum, trade) => sum + (trade.pnl || 0), 0));
        const profitFactor = grossLoss > 0 ? grossProfit / grossLoss : 0;
        return {
            totalTrades,
            winningTrades,
            losingTrades,
            winRate,
            totalPnL,
            averagePnL,
            bestTrade,
            worstTrade,
            averageDuration,
            profitFactor
        };
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
     */
    getBalance() {
        return this.balance;
    }
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
     */
    async saveData() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ID —Å–¥–µ–ª–∫–∏
     */
    generateTradeId() {
        return `trade_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
}
exports.PaperTradingSystem = PaperTradingSystem;
//# sourceMappingURL=paper-trading.js.map