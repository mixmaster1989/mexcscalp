"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MexcTelegramBot = void 0;
const node_telegram_bot_api_1 = __importDefault(require("node-telegram-bot-api"));
const events_1 = require("events");
/**
 * –ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ—Å—Ç–æ —à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
 * –¢–µ–ø–µ—Ä—å —Å —à—É—Ç–∫–∞–º–∏ –¥–ª—è –í–∞—Å–µ—á–∫–∞ –∏ –∫–æ–º–∞–Ω–¥–Ω—ã–º —Å—Ç–∏–ª–µ–º "–º—ã"
 */
class MexcTelegramBot extends events_1.EventEmitter {
    bot;
    logger;
    groupChatId;
    getTradingStats;
    getSystemStatus;
    onTradingCommand;
    isRunning = false;
    startTime = Date.now();
    messageCount = 0;
    jokeCount = 0;
    constructor(token, groupChatId, getTradingStats, getSystemStatus, onTradingCommand, logger) {
        super();
        this.logger = logger;
        this.bot = new node_telegram_bot_api_1.default(token, { polling: true });
        this.groupChatId = groupChatId;
        this.getTradingStats = getTradingStats;
        this.getSystemStatus = getSystemStatus;
        this.onTradingCommand = onTradingCommand;
        this.setupEventHandlers();
    }
    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
     */
    async start() {
        try {
            this.isRunning = true;
            this.startTime = Date.now();
            this.logger.info('ü§ñ –ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ Telegram –±–æ—Ç–∞');
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ –∑–∞–ø—É—Å–∫–µ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—Å—Ç–∞–≤–æ–∫)
            await this.sendMessage('üöÄ *–ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ MEXC Scalp Bot*\n\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!');
        }
        catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞:', error);
            throw error;
        }
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
     */
    async stop() {
        try {
            this.isRunning = false;
            await this.sendMessage('‚èπÔ∏è *–ú—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ MEXC Scalp Bot*\n\n–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.');
            await this.bot.stopPolling();
            this.logger.info('ü§ñ –ú—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ Telegram –±–æ—Ç–∞');
        }
        catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞:', error);
        }
    }
    /**
     * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        this.bot.on('message', async (msg) => {
            try {
                await this.handleMessage(msg);
            }
            catch (error) {
                this.logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            }
        });
        this.bot.on('error', (error) => {
            this.logger.warn('Telegram error (suppressed):', error.message);
        });
        // Polling –æ—Ç–∫–ª—é—á–µ–Ω, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω—É–∂–µ–Ω
        // this.bot.on('polling_error', (error) => {});
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    async handleMessage(msg) {
        if (!msg.text)
            return;
        const chatId = msg.chat.id;
        const text = msg.text.toLowerCase();
        try {
            if (text === '/start') {
                await this.bot.sendMessage(chatId, 'üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã - –∫–æ–º–∞–Ω–¥–∞ MEXC Scalp Bot!\n\n–ú—ã —Ç–æ—Ä–≥—É–µ–º ETH/USDC –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
            }
            else if (text === '/status') {
                await this.handleStatusCommand(chatId);
            }
            else if (text === '/stats') {
                await this.handleStatsCommand(chatId);
            }
            else if (text.startsWith('/')) {
                const command = text.substring(1);
                const response = await this.onTradingCommand(command, chatId);
                await this.bot.sendMessage(chatId, response);
            }
        }
        catch (error) {
            await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error}`);
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç—É—Å–∞
     */
    async handleStatusCommand(chatId) {
        const status = this.getSystemStatus();
        const message = `
ü§ñ *–°—Ç–∞—Ç—É—Å –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã*

*–°–∏—Å—Ç–µ–º–∞:* ${this.getStatusIcon(status.systemStatus)} \`${status.systemStatus}\`
*–¢–æ—Ä–≥–æ–≤–ª—è:* ${this.getStatusIcon(status.tradingEnabled ? 'active' : 'stopped')} \`${status.tradingEnabled ? '–í–ö–õ–Æ–ß–ï–ù–ê' : '–û–¢–ö–õ–Æ–ß–ï–ù–ê'}\`
*–ë–∞–ª–∞–Ω—Å:* \$${status.totalBalance.toFixed(2)}
*–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* ${this.formatUptime(Date.now() - this.startTime)}

*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;
        await this.bot.sendMessage(chatId, message);
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async handleStatsCommand(chatId) {
        const stats = this.getTradingStats();
        const message = `
üìä *–ù–∞—à–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* \`${stats.totalTrades}\`
*–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö:* \`${stats.profitableTrades}\`
*–£–±—ã—Ç–æ—á–Ω—ã—Ö:* \`${stats.losingTrades}\`
*Win Rate:* \`${stats.winRate.toFixed(1)}%\`
*–û–±—â–∞—è P&L:* \$${stats.totalPnL.toFixed(2)}
*P&L —Å–µ–≥–æ–¥–Ω—è:* \$${stats.dailyPnL.toFixed(2)}
*–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞:* \$${stats.maxDrawdown.toFixed(2)}

*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;
        await this.bot.sendMessage(chatId, message);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
     */
    async sendMessage(message) {
        try {
            this.messageCount++;
            this.logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:', {
                chatId: this.groupChatId,
                messageLength: message.length,
                messageCount: this.messageCount
            });
            await this.bot.sendMessage(this.groupChatId, message, { parse_mode: 'Markdown' });
            this.logger.info('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
        }
        catch (error) {
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            this.logger.error('üî¥ –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø:', {
                message: error.message,
                code: error.code,
                stack: error.stack,
                name: error.name,
                chatId: this.groupChatId,
                fullError: JSON.stringify(error, null, 2)
            });
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if (error.message && error.message.includes('AggregateError')) {
                this.logger.error('üö® –û–ë–ù–ê–†–£–ñ–ï–ù AGGREGATE ERROR –ü–†–ò –û–¢–ü–†–ê–í–ö–ï!');
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
            if (error.code === 'EFATAL') {
                this.logger.error('üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê EFATAL –ü–†–ò –û–¢–ü–†–ê–í–ö–ï!');
            }
            this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
     */
    async notifyTrade(fill) {
        this.jokeCount++;
        const sideIcon = fill.side === 'buy' ? 'üü¢' : 'üî¥';
        const message = `
${sideIcon} *–ú—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ —Å–¥–µ–ª–∫—É ${fill.side.toUpperCase()}*

*–¶–µ–Ω–∞:* \`$${fill.price.toFixed(4)}\`
*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* \`${fill.quantity.toFixed(6)} ETH\`
*–°—É–º–º–∞:* \`$${(fill.price * fill.quantity).toFixed(2)}\`
*–í—Ä–µ–º—è:* ${this.formatTime(fill.timestamp)}
    `;
        await this.sendMessage(message);
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
     */
    async notifyRegimeChange(previous, current, confidence) {
        const regimeIcons = { quiet: 'üåô', normal: '‚òÄÔ∏è', shock: '‚ö°' };
        const message = `
${regimeIcons[current]} *–ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞*

*–ü—Ä–µ–¥—ã–¥—É—â–∏–π:* \`${previous}\` ${regimeIcons[previous]}
*–ù–æ–≤—ã–π:* \`${current}\` ${regimeIcons[current]}
*–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* \`${(confidence * 100).toFixed(1)}%\`
*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;
        await this.sendMessage(message);
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    async notifyError(error, context) {
        const message = `
‚ùå *–£ –Ω–∞—Å —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞*

*–ö–æ–Ω—Ç–µ–∫—Å—Ç:* \`${context}\`
*–û—à–∏–±–∫–∞:* \`${error.message}\`
*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;
        await this.sendMessage(message);
    }
    /**
     * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    async notifyCritical(title, text) {
        const message = `
üö® *${title}*

${text}

*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;
        await this.sendMessage(message);
    }
    /**
     * –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    async notifySystem(title, text) {
        const message = `
ü§ñ *${title}*

${text}

*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;
        await this.sendMessage(message);
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusIcon(status) {
        switch (status) {
            case 'running':
            case 'active':
                return '‚úÖ';
            case 'stopped':
            case 'paused':
                return '‚è∏';
            case 'error':
                return '‚ùå';
            default:
                return '‚ö™';
        }
    }
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
     */
    formatUptime(uptimeMs) {
        const seconds = Math.floor(uptimeMs / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        if (days > 0) {
            return `${days}–¥ ${hours % 24}—á`;
        }
        else if (hours > 0) {
            return `${hours}—á ${minutes % 60}–º`;
        }
        else {
            return `${minutes}–º`;
        }
    }
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
     */
    formatTime(timestamp) {
        return new Date(timestamp).toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç
     */
    isBotRunning() {
        return this.isRunning;
    }
}
exports.MexcTelegramBot = MexcTelegramBot;
//# sourceMappingURL=bot.js.map