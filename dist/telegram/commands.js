"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramCommands = void 0;
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
 */
class TelegramCommands {
    auth;
    getTradingStats;
    getSystemStatus;
    onTradingCommand;
    constructor(auth, getTradingStats, getSystemStatus, onTradingCommand) {
        this.auth = auth;
        this.getTradingStats = getTradingStats;
        this.getSystemStatus = getSystemStatus;
        this.onTradingCommand = onTradingCommand;
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start
     */
    async handleStart(bot, chatId, username, firstName, lastName) {
        const user = this.auth.getUser(chatId);
        if (user && user.isAuthorized) {
            await this.auth.updateLastActive(chatId);
            const welcomeMessage = `
ü§ñ *MEXC Scalp Bot* - –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

üëã –ü—Ä–∏–≤–µ—Ç, ${firstName || username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
üîê –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: *${user.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å'}*

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/stats - –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
/help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

${user.role === 'admin' ? `
üõ† *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*
/start_trading - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/stop_trading - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/pause_trading - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/emergency_stop - –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
` : ''}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ üëá
      `;
            const keyboard = this.getMainKeyboard(user.role === 'admin');
            await bot.sendMessage(chatId, welcomeMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
        else {
            const authMessage = `
üîê *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è*

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
\`/auth –í–ê–®_–°–ï–ö–†–ï–¢–ù–´–ô_–ö–õ–Æ–ß\`

üîí –ö–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã.
      `;
            await bot.sendMessage(chatId, authMessage, { parse_mode: 'Markdown' });
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /auth
     */
    async handleAuth(bot, chatId, key, username, firstName, lastName) {
        const result = await this.auth.authorize(chatId, username, firstName, lastName, key);
        await bot.sendMessage(chatId, result.message, { parse_mode: 'Markdown' });
        if (result.success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            setTimeout(() => {
                this.handleStart(bot, chatId, username, firstName, lastName);
            }, 1000);
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /status
     */
    async handleStatus(bot, chatId) {
        if (!this.auth.isAuthorized(chatId)) {
            await bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
            return;
        }
        await this.auth.updateLastActive(chatId);
        try {
            const status = this.getSystemStatus();
            const statusMessage = `
ü§ñ *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã MEXC Scalp Bot*

*üîß –ë–æ—Ç:*
${this.getStatusIcon(status.bot.status)} –°—Ç–∞—Ç—É—Å: \`${status.bot.status}\`
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${this.formatUptime(status.bot.uptime)}
üì¶ –í–µ—Ä—Å–∏—è: \`${status.bot.version}\`

*üìà –¢–æ—Ä–≥–æ–≤–ª—è:*
${this.getStatusIcon(status.trading.status)} –°—Ç–∞—Ç—É—Å: \`${status.trading.status}\`
üéØ –†–µ–∂–∏–º —Ä—ã–Ω–∫–∞: \`${status.trading.regime}\`
üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${this.formatTime(status.trading.lastUpdate)}

*üîå API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*
${status.api.rest ? '‚úÖ' : '‚ùå'} REST API
${status.api.websocket ? '‚úÖ' : '‚ùå'} WebSocket
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${this.formatTime(status.api.lastCheck)}

*üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:*
${status.database.connected ? '‚úÖ' : '‚ùå'} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
üóÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: ${this.formatTime(status.database.lastBackup)}
      `;
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_status' },
                        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats' }
                    ],
                    [
                        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                    ]
                ]
            };
            await bot.sendMessage(chatId, statusMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
        catch (error) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error}`);
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /stats
     */
    async handleStats(bot, chatId) {
        if (!this.auth.isAuthorized(chatId)) {
            await bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
            return;
        }
        await this.auth.updateLastActive(chatId);
        try {
            const stats = this.getTradingStats();
            const statsMessage = `
üìä *–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*üéØ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:*
${stats.isActive ? '‚úÖ' : '‚ùå'} –¢–æ—Ä–≥–æ–≤–ª—è: \`${stats.isActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\`
üå° –†–µ–∂–∏–º —Ä—ã–Ω–∫–∞: \`${stats.currentRegime}\`
üìà –¶–µ–Ω–∞: \`$${stats.midPrice.toFixed(2)}\`

*üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:*
üé™ –£—Ä–æ–≤–Ω–∏ –Å—Ä—à–∏–∫–æ–≤: \`${stats.activeLevels}\`
üéØ Take Profit –æ—Ä–¥–µ—Ä–∞: \`${stats.activeTPs}\`

*üí∞ –ü–æ–∑–∏—Ü–∏—è:*
üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: \`${stats.inventory.toFixed(6)} ETH\`
üíµ Notional: \`$${stats.inventoryNotional.toFixed(2)}\`

*üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
üíπ P&L —Å–µ–≥–æ–¥–Ω—è: \`$${stats.pnlToday.toFixed(2)}\`
üé≤ –°–¥–µ–ª–æ–∫: \`${stats.tradesCount}\`
üèÜ Win Rate: \`${(stats.winRate * 100).toFixed(1)}%\`
      `;
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' },
                        { text: 'üìã –î–µ—Ç–∞–ª–∏', callback_data: 'detailed_stats' }
                    ],
                    [
                        { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: 'show_status' },
                        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                    ]
                ]
            };
            await bot.sendMessage(chatId, statsMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
        catch (error) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`);
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
     */
    async handleTradingCommand(bot, chatId, command) {
        if (!this.auth.isAdmin(chatId)) {
            await bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
            return;
        }
        await this.auth.updateLastActive(chatId);
        try {
            const result = await this.onTradingCommand(command, chatId);
            await bot.sendMessage(chatId, result, { parse_mode: 'Markdown' });
        }
        catch (error) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error}`);
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help
     */
    async handleHelp(bot, chatId) {
        if (!this.auth.isAuthorized(chatId)) {
            await bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
            return;
        }
        const user = this.auth.getUser(chatId);
        const isAdmin = user?.role === 'admin';
        const helpMessage = `
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*üîê –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã  
/stats - –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

${isAdmin ? `
*üõ† –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*
/start_trading - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/stop_trading - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é  
/pause_trading - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/emergency_stop - –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –æ—Ç–º–µ–Ω–æ–π –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤

*‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*
/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/revoke <chat_id> - –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î
` : ''}

*üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ –°–¥–µ–ª–∫–∏ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è

*üí° –°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    `;
        await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
     */
    getMainKeyboard(isAdmin) {
        const keyboard = [
            [
                { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: 'show_status' },
                { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats' }
            ]
        ];
        if (isAdmin) {
            keyboard.push([
                { text: '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç', callback_data: 'start_trading' },
                { text: '‚è∏ –ü–∞—É–∑–∞', callback_data: 'pause_trading' },
                { text: '‚èπ –°—Ç–æ–ø', callback_data: 'stop_trading' }
            ]);
            keyboard.push([
                { text: 'üö® –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø', callback_data: 'emergency_stop' }
            ]);
        }
        keyboard.push([
            { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'show_help' }
        ]);
        return { inline_keyboard: keyboard };
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusIcon(status) {
        switch (status) {
            case 'running':
            case 'active':
                return '‚úÖ';
            case 'stopped':
            case 'paused':
                return '‚è∏';
            case 'error':
                return '‚ùå';
            default:
                return '‚ö™';
        }
    }
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
     */
    formatUptime(uptimeMs) {
        const seconds = Math.floor(uptimeMs / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        if (days > 0) {
            return `${days}–¥ ${hours % 24}—á ${minutes % 60}–º`;
        }
        else if (hours > 0) {
            return `${hours}—á ${minutes % 60}–º`;
        }
        else {
            return `${minutes}–º ${seconds % 60}—Å`;
        }
    }
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
     */
    formatTime(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
}
exports.TelegramCommands = TelegramCommands;
//# sourceMappingURL=commands.js.map