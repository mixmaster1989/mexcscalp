"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradeHistoryCommands = void 0;
const tradeHistory_1 = require("../metrics/tradeHistory");
/**
 * –ö–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–¥–µ–ª–æ–∫
 */
class TradeHistoryCommands {
    bot;
    tradeHistoryService;
    constructor(bot, apiKey, secretKey) {
        this.bot = bot;
        this.tradeHistoryService = new tradeHistory_1.TradeHistoryService(apiKey, secretKey);
        this.registerCommands();
    }
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
     */
    registerCommands() {
        // –ö–æ–º–∞–Ω–¥–∞ /trades - –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –∑–∞ —Å—É—Ç–∫–∏
        this.bot.onText(/\/trades/, this.handleDailyTrades.bind(this));
        // –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏
        this.bot.onText(/\/stats/, this.handleDailyStats.bind(this));
        // –ö–æ–º–∞–Ω–¥–∞ /top - –ª—É—á—à–∏–µ —Å–¥–µ–ª–∫–∏
        this.bot.onText(/\/top/, this.handleTopTrades.bind(this));
        // –ö–æ–º–∞–Ω–¥–∞ /worst - —Ö—É–¥—à–∏–µ —Å–¥–µ–ª–∫–∏
        this.bot.onText(/\/worst/, this.handleWorstTrades.bind(this));
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /trades
     */
    async handleDailyTrades(msg) {
        const chatId = msg.chat.id;
        try {
            await this.bot.sendMessage(chatId, 'üìä –ü–æ–ª—É—á–∞—é –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∑–∞ —Å—É—Ç–∫–∏...');
            const trades = await this.tradeHistoryService.getDailyTradeHistory();
            if (trades.length === 0) {
                await this.bot.sendMessage(chatId, '‚ÑπÔ∏è –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–¥–µ–ª–æ–∫
            let message = `üìà –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –∑–∞ —Å—É—Ç–∫–∏ (${trades.length} —à—Ç.):\n\n`;
            trades.slice(0, 10).forEach((trade, index) => {
                const time = new Date(trade.timestamp).toLocaleTimeString('ru-RU');
                const side = trade.side === 'buy' ? 'üü¢ BUY' : 'üî¥ SELL';
                const pnl = trade.pnl >= 0 ? `+${trade.pnl.toFixed(4)}` : trade.pnl.toFixed(4);
                message += `${index + 1}. ${trade.symbol} ${side}\n`;
                message += `   PnL: ${pnl} USDT | ${time}\n`;
                message += `   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${trade.strategy || 'N/A'}\n\n`;
            });
            if (trades.length > 10) {
                message += `... –∏ –µ—â–µ ${trades.length - 10} —Å–¥–µ–ª–æ–∫`;
            }
            await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫');
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
     */
    async handleDailyStats(msg) {
        const chatId = msg.chat.id;
        try {
            await this.bot.sendMessage(chatId, 'üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å—É—Ç–∫–∏...');
            const stats = await this.tradeHistoryService.getDailyTradeStats();
            const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏:</b>

üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: <b>${stats.totalTrades}</b>
‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: <b>${stats.winningTrades}</b>
‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: <b>${stats.losingTrades}</b>
üéØ –í–∏–Ω—Ä–µ–π—Ç: <b>${stats.winRate.toFixed(2)}%</b>

üí∞ –û–±—â–∏–π PnL: <b>${stats.totalPnl.toFixed(4)} USDT</b>
üìä –°—Ä–µ–¥–Ω–∏–π PnL: <b>${stats.avgPnl.toFixed(4)} USDT</b>
üí∏ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: <b>${stats.totalFees.toFixed(4)} USDT</b>

üèÜ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: <b>${stats.bestTrade.toFixed(4)} USDT</b>
üí∏ –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: <b>${stats.worstTrade.toFixed(4)} USDT</b>
      `;
            await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top
     */
    async handleTopTrades(msg) {
        const chatId = msg.chat.id;
        try {
            await this.bot.sendMessage(chatId, 'üèÜ –ü–æ–ª—É—á–∞—é –ª—É—á—à–∏–µ —Å–¥–µ–ª–∫–∏...');
            const topTrades = await this.tradeHistoryService.getTopTrades(5);
            if (topTrades.length === 0) {
                await this.bot.sendMessage(chatId, '‚ÑπÔ∏è –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }
            let message = 'üèÜ <b>–¢–û–ü-5 –õ–£–ß–®–ò–• –°–î–ï–õ–û–ö:</b>\n\n';
            topTrades.forEach((trade, index) => {
                const time = new Date(trade.timestamp).toLocaleTimeString('ru-RU');
                const side = trade.side === 'buy' ? 'üü¢ BUY' : 'üî¥ SELL';
                message += `${index + 1}. ${trade.symbol} ${side}\n`;
                message += `   PnL: <b>+${trade.pnl.toFixed(4)} USDT</b>\n`;
                message += `   –í—Ä–µ–º—è: ${time}\n`;
                message += `   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${trade.strategy || 'N/A'}\n\n`;
            });
            await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Å–¥–µ–ª–æ–∫:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Å–¥–µ–ª–æ–∫');
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /worst
     */
    async handleWorstTrades(msg) {
        const chatId = msg.chat.id;
        try {
            await this.bot.sendMessage(chatId, 'üí∏ –ü–æ–ª—É—á–∞—é —Ö—É–¥—à–∏–µ —Å–¥–µ–ª–∫–∏...');
            const worstTrades = await this.tradeHistoryService.getWorstTrades(5);
            if (worstTrades.length === 0) {
                await this.bot.sendMessage(chatId, '‚ÑπÔ∏è –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }
            let message = 'üí∏ <b>–¢–û–ü-5 –•–£–î–®–ò–• –°–î–ï–õ–û–ö:</b>\n\n';
            worstTrades.forEach((trade, index) => {
                const time = new Date(trade.timestamp).toLocaleTimeString('ru-RU');
                const side = trade.side === 'buy' ? 'üü¢ BUY' : 'üî¥ SELL';
                message += `${index + 1}. ${trade.symbol} ${side}\n`;
                message += `   PnL: <b>${trade.pnl.toFixed(4)} USDT</b>\n`;
                message += `   –í—Ä–µ–º—è: ${time}\n`;
                message += `   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${trade.strategy || 'N/A'}\n\n`;
            });
            await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—É–¥—à–∏—Ö —Å–¥–µ–ª–æ–∫:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—É–¥—à–∏—Ö —Å–¥–µ–ª–æ–∫');
        }
    }
}
exports.TradeHistoryCommands = TradeHistoryCommands;
//# sourceMappingURL=tradeHistoryCommands.js.map