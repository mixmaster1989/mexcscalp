"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramNotifications = void 0;
/**
 * –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram –±–æ—Ç–∞
 */
class TelegramNotifications {
    bot;
    auth;
    isEnabled = true;
    messageQueue = [];
    sendingInProgress = false;
    constructor(bot, auth) {
        this.bot = bot;
        this.auth = auth;
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        this.startMessageProcessor();
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    async sendNotification(notification) {
        if (!this.isEnabled) {
            return;
        }
        const chatIds = this.auth.getNotificationChatIds(notification.priority);
        if (chatIds.length === 0) {
            return;
        }
        const message = this.formatNotification(notification);
        const options = this.getMessageOptions(notification);
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
        for (const chatId of chatIds) {
            this.messageQueue.push({ chatId, message, options });
        }
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
     */
    async notifyTrade(fill) {
        const sideIcon = fill.side === 'buy' ? 'üü¢' : 'üî¥';
        const title = `${sideIcon} –°–¥–µ–ª–∫–∞ ${fill.side.toUpperCase()}`;
        const message = `
*–¶–µ–Ω–∞:* \`$${fill.price.toFixed(4)}\`
*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* \`${fill.quantity.toFixed(6)} ETH\`
*–°—É–º–º–∞:* \`$${(fill.price * fill.quantity).toFixed(2)}\`
*–ö–æ–º–∏—Å—Å–∏—è:* \`$${fill.fee.toFixed(4)}\`
*–í—Ä–µ–º—è:* ${this.formatTime(fill.timestamp)}
    `;
        await this.sendNotification({
            type: 'trade',
            title,
            message,
            priority: 'medium',
            timestamp: Date.now(),
            data: fill
        });
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
     */
    async notifyRegimeChange(previous, current, confidence) {
        const regimeIcons = {
            quiet: 'üåô',
            normal: '‚òÄÔ∏è',
            shock: '‚ö°'
        };
        const title = `${regimeIcons[current]} –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞`;
        const message = `
*–ü—Ä–µ–¥—ã–¥—É—â–∏–π:* \`${previous}\` ${regimeIcons[previous]}
*–ù–æ–≤—ã–π:* \`${current}\` ${regimeIcons[current]}
*–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* \`${(confidence * 100).toFixed(1)}%\`
*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}

${this.getRegimeDescription(current)}
    `;
        await this.sendNotification({
            type: 'regime_change',
            title,
            message,
            priority: current === 'shock' ? 'high' : 'medium',
            timestamp: Date.now(),
            data: { previous, current, confidence }
        });
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    async notifyError(error, context) {
        const title = '‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞';
        const message = `
*–ö–æ–Ω—Ç–µ–∫—Å—Ç:* \`${context}\`
*–û—à–∏–±–∫–∞:* \`${error.message}\`
*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}

‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    `;
        await this.sendNotification({
            type: 'error',
            title,
            message,
            priority: 'high',
            timestamp: Date.now(),
            data: { error: error.message, context }
        });
    }
    /**
     * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (kill-switch, emergency stop)
     */
    async notifyCritical(title, message, data) {
        await this.sendNotification({
            type: 'alert',
            title: `üö® ${title}`,
            message: `${message}\n\n*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}`,
            priority: 'critical',
            timestamp: Date.now(),
            data
        });
    }
    /**
     * –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
     */
    async notifySystem(title, message, data) {
        await this.sendNotification({
            type: 'system',
            title: `ü§ñ ${title}`,
            message: `${message}\n\n*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}`,
            priority: 'medium',
            timestamp: Date.now(),
            data
        });
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–µ
     */
    async notifyPnL(pnl, totalTrades, winRate) {
        const pnlIcon = pnl >= 0 ? 'üí∞' : 'üìâ';
        const title = `${pnlIcon} –û—Ç—á–µ—Ç P&L`;
        const message = `
*P&L —Å–µ–≥–æ–¥–Ω—è:* \`$${pnl.toFixed(2)}\`
*–°–¥–µ–ª–æ–∫:* \`${totalTrades}\`
*Win Rate:* \`${(winRate * 100).toFixed(1)}%\`
*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;
        await this.sendNotification({
            type: 'system',
            title,
            message,
            priority: pnl < -50 ? 'high' : 'low', // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö —É–±—ã—Ç–∫–∞—Ö
            timestamp: Date.now(),
            data: { pnl, totalTrades, winRate }
        });
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
     */
    async notifyLimitReached(limitType, currentValue, maxValue) {
        const title = '‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç';
        const message = `
*–¢–∏–ø –ª–∏–º–∏—Ç–∞:* \`${limitType}\`
*–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:* \`${currentValue}\`
*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:* \`${maxValue}\`
*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}

üõë –¢–æ—Ä–≥–æ–≤–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.
    `;
        await this.sendNotification({
            type: 'alert',
            title,
            message,
            priority: 'high',
            timestamp: Date.now(),
            data: { limitType, currentValue, maxValue }
        });
    }
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    formatNotification(notification) {
        const priorityIcons = {
            low: 'üìò',
            medium: 'üìô',
            high: 'üìï',
            critical: 'üö®'
        };
        const icon = priorityIcons[notification.priority];
        return `${icon} *${notification.title}*\n\n${notification.message}`;
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    getMessageOptions(notification) {
        const options = {
            parse_mode: 'Markdown'
        };
        // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if (notification.priority === 'critical') {
            options.reply_markup = {
                inline_keyboard: [
                    [
                        { text: 'üö® –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø', callback_data: 'emergency_stop' },
                        { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: 'show_status' }
                    ]
                ]
            };
        }
        // –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if (notification.priority === 'low') {
            options.disable_notification = true;
        }
        return options;
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
     */
    getRegimeDescription(regime) {
        switch (regime) {
            case 'quiet':
                return 'üåô *–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º:* –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, —É–∑–∫–∏–µ —Å–ø—Ä–µ–¥—ã';
            case 'normal':
                return '‚òÄÔ∏è *–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º:* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏';
            case 'shock':
                return '‚ö° *–®–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º:* –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –æ—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è';
            default:
                return '';
        }
    }
    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    startMessageProcessor() {
        setInterval(async () => {
            if (this.sendingInProgress || this.messageQueue.length === 0) {
                return;
            }
            this.sendingInProgress = true;
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∫–∞–∂–¥—ã–µ 100ms –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
                const message = this.messageQueue.shift();
                if (message) {
                    await this.bot.sendMessage(message.chatId, message.message, message.options);
                }
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            }
            finally {
                this.sendingInProgress = false;
            }
        }, 100); // 100ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    }
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
     */
    formatTime(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }
    /**
     * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    setEnabled(enabled) {
        this.isEnabled = enabled;
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    isNotificationsEnabled() {
        return this.isEnabled;
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    getQueueSize() {
        return this.messageQueue.length;
    }
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    clearQueue() {
        this.messageQueue = [];
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    async sendTestNotification(chatId) {
        const message = `
üß™ *–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*

‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
üïê –í—Ä–µ–º—è: ${this.formatTime(Date.now())}

–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç.
    `;
        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    }
}
exports.TelegramNotifications = TelegramNotifications;
//# sourceMappingURL=notifications.js.map