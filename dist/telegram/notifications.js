"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramNotifications = void 0;
const node_telegram_bot_api_1 = __importDefault(require("node-telegram-bot-api"));
/**
 * Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
 */
class TelegramNotifications {
    bot = null;
    config;
    logger;
    chatId;
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        this.chatId = config.chatId;
        if (config.enabled && config.botToken) {
            try {
                this.bot = new node_telegram_bot_api_1.default(config.botToken, { polling: false });
                this.logger.info('Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            catch (error) {
                this.logger.error({ error }, '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞');
                this.config.enabled = false;
            }
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
     */
    async sendStartupMessage(config) {
        if (!this.isEnabled())
            return;
        const message = `
üöÄ *MEXC ScalperBot –∑–∞–ø—É—â–µ–Ω!*

üìã *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:*
üí∞ –î–µ–ø–æ–∑–∏—Ç: ${config.deposit} USDT
üìä –ü–∞—Ä—ã: ${config.targetPairs.join(', ')}
üíπ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${config.positionSizePercent}%
üéØ –¶–µ–ª—å –ø—Ä–∏–±—ã–ª–∏: ${config.targetProfitPercent}%
üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: ${config.stopLossPercent}%
‚è±Ô∏è –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: ${config.minTradeTimeMs / 1000}-${config.maxTradeTimeMs / 1000}—Å

‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!
    `.trim();
        await this.sendMessage(message);
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
     */
    async notifyPositionOpened(position) {
        if (!this.isEnabled())
            return;
        const sideEmoji = position.side === 'buy' ? 'üü¢' : 'üî¥';
        const positionValue = position.quantity * position.entryPrice;
        const tpDistance = Math.abs((position.takeProfit - position.entryPrice) / position.entryPrice * 100);
        const slDistance = Math.abs((position.stopLoss - position.entryPrice) / position.entryPrice * 100);
        const message = `
${sideEmoji} *–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞*

üìä ${position.symbol}
üìà ${position.side.toUpperCase()} ${position.quantity}
üí∞ –¶–µ–Ω–∞: $${position.entryPrice.toFixed(2)}
üíµ –°—É–º–º–∞: $${positionValue.toFixed(2)}

üéØ TP: $${position.takeProfit.toFixed(2)} (+${tpDistance.toFixed(2)}%)
üõ°Ô∏è SL: $${position.stopLoss.toFixed(2)} (-${slDistance.toFixed(2)}%)
    `.trim();
        await this.sendMessage(message);
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
     */
    async notifyPositionClosed(trade) {
        if (!this.isEnabled())
            return;
        const isProfit = trade.pnl > 0;
        const emoji = isProfit ? '‚úÖ' : '‚ùå';
        const pnlSign = isProfit ? '+' : '';
        const reasonText = this.getReasonText(trade.reason);
        const message = `
${emoji} *–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞*

üìä ${trade.symbol}
üìà ${trade.side.toUpperCase()} ${trade.quantity}
üí∞ –í—Ö–æ–¥: $${trade.entryPrice.toFixed(2)}
üí∞ –í—ã—Ö–æ–¥: $${trade.exitPrice.toFixed(2)}

üíµ PnL: ${pnlSign}$${trade.pnl.toFixed(4)} (${pnlSign}${trade.pnlPercent.toFixed(2)}%)
‚è±Ô∏è –í—Ä–µ–º—è: ${this.formatDuration(trade.duration)}
üìù –ü—Ä–∏—á–∏–Ω–∞: ${reasonText}
    `.trim();
        await this.sendMessage(message);
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    async notifyError(error) {
        if (!this.isEnabled())
            return;
        const emoji = error.critical ? 'üö®' : '‚ö†Ô∏è';
        const priority = error.critical ? '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø' : '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ';
        const message = `
${emoji} *${priority} –æ—à–∏–±–∫–∞*

üîß –¢–∏–ø: ${error.type}
üìä –ü–∞—Ä–∞: ${error.symbol || 'N/A'}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${error.message}
    `.trim();
        await this.sendMessage(message);
    }
    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
     */
    async sendPeriodicReport(stats) {
        if (!this.isEnabled())
            return;
        const uptimeFormatted = this.formatDuration(stats.uptime);
        const pnlEmoji = stats.dailyPnL >= 0 ? 'üìà' : 'üìâ';
        const pnlSign = stats.dailyPnL >= 0 ? '+' : '';
        const message = `
üìä *–û—Ç—á–µ—Ç ScalperBot*

‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptimeFormatted}
üìç –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${stats.positionsCount}
${pnlEmoji} –î–Ω–µ–≤–Ω–æ–π PnL: ${pnlSign}$${stats.dailyPnL.toFixed(2)}
üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}
üéØ –í–∏–Ω—Ä–µ–π—Ç: ${stats.winRate.toFixed(1)}%
üí∞ Profit Factor: ${stats.profitFactor.toFixed(2)}
    `.trim();
        await this.sendMessage(message);
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
     */
    async sendShutdownMessage(reason = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') {
        if (!this.isEnabled())
            return;
        const message = `
üõë *ScalperBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*

üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

üí§ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É
    `.trim();
        await this.sendMessage(message);
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Telegram
     */
    async checkStatus() {
        if (!this.isEnabled())
            return false;
        try {
            await this.bot.getMe();
            return true;
        }
        catch (error) {
            this.logger.warn({ error }, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —Å—Ç–∞—Ç—É—Å–∞');
            return false;
        }
    }
    isEnabled() {
        return this.config.enabled && this.bot !== null;
    }
    async sendMessage(text) {
        if (!this.isEnabled())
            return;
        try {
            await this.bot.sendMessage(this.chatId, text, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        }
        catch (error) {
            this.logger.error({ error, text }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    }
    getReasonText(reason) {
        const reasons = {
            'take_profit': 'üéØ Take Profit',
            'stop_loss': 'üõ°Ô∏è Stop Loss',
            'timeout': '‚è∞ –¢–∞–π–º-–∞—É—Ç',
            'emergency': 'üö® –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ'
        };
        return reasons[reason] || reason;
    }
    formatDuration(ms) {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        if (hours > 0) {
            return `${hours}—á ${minutes % 60}–º`;
        }
        else if (minutes > 0) {
            return `${minutes}–º ${seconds % 60}—Å`;
        }
        else {
            return `${seconds}—Å`;
        }
    }
}
exports.TelegramNotifications = TelegramNotifications;
//# sourceMappingURL=notifications.js.map