"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramNotifier = void 0;
const telegraf_1 = require("telegraf");
const mexc_spot_1 = require("../exchange/mexc-spot");
class TelegramNotifier {
    bot;
    chatIds;
    mexcClient;
    constructor(botToken, chatIds) {
        this.bot = new telegraf_1.Telegraf(botToken);
        this.chatIds = chatIds.split(',').map(id => id.trim());
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MEXC –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        this.mexcClient = new mexc_spot_1.MexcSpotClient();
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ USDT
     */
    async getAccountValue() {
        try {
            const accountInfo = await this.mexcClient.getAccountInfo();
            let totalValueUSDT = 0;
            const balances = [];
            
            if (accountInfo.balances && Array.isArray(accountInfo.balances)) {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ USDT
                const pricesResponse = await this.mexcClient.getAllPrices();
                const prices = {};
                
                if (pricesResponse.data && Array.isArray(pricesResponse.data)) {
                    for (const price of pricesResponse.data) {
                        prices[price.symbol] = parseFloat(price.price);
                    }
                }
                
                for (const balance of accountInfo.balances) {
                    const free = parseFloat(balance.free || '0');
                    const locked = parseFloat(balance.locked || '0');
                    const total = free + locked;
                    
                    if (total > 0) {
                        const asset = balance.asset;
                        let valueUSDT = 0;
                        
                        if (asset === 'USDT') {
                            valueUSDT = total;
                        } else {
                            // –ò—â–µ–º –ø–∞—Ä—É —Å USDT –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                            const symbol = `${asset}USDT`;
                            if (prices[symbol]) {
                                valueUSDT = total * prices[symbol];
                            } else {
                                // –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –ø–∞—Ä—É
                                const reverseSymbol = `USDT${asset}`;
                                if (prices[reverseSymbol]) {
                                    valueUSDT = total / prices[reverseSymbol];
                                } else {
                                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞ —Å USDT, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                    valueUSDT = total;
                                }
                            }
                        }
                        
                        totalValueUSDT += valueUSDT;
                        balances.push({
                            asset,
                            free: free.toFixed(6),
                            locked: locked.toFixed(6),
                            total: total.toFixed(6),
                            valueUSDT: valueUSDT.toFixed(2)
                        });
                    }
                }
            }
            
            return {
                totalValueUSDT: totalValueUSDT.toFixed(2),
                balances: balances.filter(b => parseFloat(b.total) > 0)
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
            return {
                totalValueUSDT: '0.00',
                balances: []
            };
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã
     */
    async sendSystemStarted() {
        const message = `üöÄ *–°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê*

üìä *–°—Ç–∞—Ç—É—Å:* –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∞–∫—Ç–∏–≤–µ–Ω
üéØ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è:* –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤
ü§ñ *LLM:* –í–∫–ª—é—á–µ–Ω
üì± *Telegram:* –í–∫–ª—é—á–µ–Ω

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!`;
        await this.sendToAllChats(message);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–∫–∏
     */
    async sendTradeAnalysis(symbol, action, price, confidence, reasoning, patterns, marketConditions, recommendation) {
        const emoji = action === 'BUY' ? 'üü¢' : action === 'SELL' ? 'üî¥' : 'üü°';
        const patternsText = patterns.length > 0 ? patterns.join(', ') : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã';
        const conditionsText = marketConditions.length > 0 ? marketConditions.join(', ') : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã';
        const message = `${emoji} *${action} –°–ò–ì–ù–ê–õ - ${symbol}*

üí∞ *–¶–µ–Ω–∞:* $${price.toFixed(4)}
üéØ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* ${confidence}%
üìä *–ü–∞—Ç—Ç–µ—Ä–Ω—ã:* ${patternsText}
üåç *–£—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞:* ${conditionsText}

üß† *LLM –ê–ù–ê–õ–ò–ó:*
${reasoning}

üí° *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:*
${recommendation}`;
        await this.sendToAllChats(message);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä—ã–Ω–∫–µ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    async sendMarketReport(totalTrades, winRate, profitFactor, bestPattern, currentTrend, recommendations) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
        const accountValue = await this.getAccountValue();
        
        const recommendationsText = recommendations.length > 0
            ? recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')
            : '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
        const balanceText = accountValue.balances.length > 0
            ? accountValue.balances.map(b => `${b.asset}: ${b.total} ($${b.valueUSDT})`).join('\n')
            : '–ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤';
        
        const message = `üìä *–û–¢–ß–ï–¢ –û –†–´–ù–ö–ï*

üí∞ *–°–û–°–¢–û–Ø–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê:*
‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${accountValue.totalValueUSDT} USDT
‚Ä¢ –ê–∫—Ç–∏–≤—ã:
${balanceText}

üìà *–¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:*
‚Ä¢ –°–¥–µ–ª–æ–∫: ${totalTrades}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ${winRate.toFixed(1)}%
‚Ä¢ Profit Factor: ${profitFactor.toFixed(2)}

üéØ *–ü–ê–¢–¢–ï–†–ù–´:*
‚Ä¢ –õ—É—á—à–∏–π: ${bestPattern}
‚Ä¢ –¢—Ä–µ–Ω–¥: ${currentTrend}

üí° *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:*
${recommendationsText}`;
        await this.sendToAllChats(message);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å LLM –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
     */
    async sendLLMCommentary(title, marketOverview, tradingOpportunities, riskAssessment, recommendations) {
        const opportunitiesText = tradingOpportunities.length > 0
            ? tradingOpportunities.map((opp, i) => `${i + 1}. ${opp}`).join('\n')
            : '–ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π';
        const recommendationsText = recommendations.length > 0
            ? recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')
            : '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π';
        const message = `üß† *${title}*

üåç *–û–ë–ó–û–† –†–´–ù–ö–ê:*
${marketOverview}

üéØ *–¢–û–†–ì–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:*
${opportunitiesText}

‚ö†Ô∏è *–û–¶–ï–ù–ö–ê –†–ò–°–ö–û–í:*
${riskAssessment}

üí° *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:*
${recommendationsText}`;
        await this.sendToAllChats(message);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É
     */
    async sendError(title, message) {
        const errorMessage = `‚ùå *${title}*

${message}

üïê *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}`;
        await this.sendToAllChats(errorMessage);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    async sendTestMessage() {
        const message = `üß™ *–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï*

‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
        await this.sendToAllChats(message);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã
     */
    async sendToAllChats(message) {
        for (const chatId of this.chatIds) {
            try {
                await this.bot.telegram.sendMessage(chatId, message, {
                    parse_mode: 'Markdown',
                });
                console.log(`üì± –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
            }
            catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}:`, error);
            }
        }
    }
}
exports.TelegramNotifier = TelegramNotifier;
//# sourceMappingURL=telegram-notifier.js.map
