"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testAnalyzer = testAnalyzer;
require("dotenv/config");
const market_analyzer_1 = require("./market-analyzer");
/**
 * –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞
 */
async function testAnalyzer() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞...');
    const config = {
        symbols: ['ETH/USDC', 'BTC/USDC'],
        intervals: ['1m', '5m'],
        updateInterval: 10000, // 10 —Å–µ–∫—É–Ω–¥
        enableWebSocket: true,
        enableRest: true
    };
    const analyzer = new market_analyzer_1.MarketAnalyzer(config);
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    analyzer.setOnSignal((signal) => {
        console.log(`\nüéØ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: ${signal.signal} –¥–ª—è ${signal.symbol}`);
        console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${signal.confidence}%`);
        console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${signal.reason}`);
    });
    analyzer.setOnAnalysis((analysis) => {
        const trendEmoji = analysis.trend === 'UP' ? 'üìà' : analysis.trend === 'DOWN' ? 'üìâ' : '‚û°Ô∏è';
        const minEmoji = analysis.isLocalMinimum ? 'üîç' : '';
        console.log(`${trendEmoji} ${analysis.symbol}: ${analysis.trend} (${analysis.trendStrength.toFixed(1)}%) | ` +
            `RSI: ${analysis.rsi.toFixed(1)} | ${minEmoji}–õ–æ–∫.–º–∏–Ω: ${analysis.isLocalMinimum} | ` +
            `BB: ${analysis.bollinger.position.toFixed(1)}%`);
    });
    analyzer.setOnError((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:', error);
    });
    try {
        await analyzer.start();
        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...');
        console.log('üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
        // Graceful shutdown
        process.on('SIGINT', () => {
            console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
            analyzer.stop();
            console.log('‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            process.exit(0);
        });
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
        process.exit(1);
    }
}
// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    testAnalyzer().catch(console.error);
}
//# sourceMappingURL=test-analyzer.js.map