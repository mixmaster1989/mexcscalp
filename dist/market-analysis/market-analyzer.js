"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketAnalyzer = void 0;
const mexc_rest_1 = require("./data/mexc-rest");
const mexc_websocket_1 = require("./data/mexc-websocket");
const local_minimum_strategy_1 = require("./strategies/local-minimum-strategy");
class MarketAnalyzer {
    restClient;
    wsClient = null;
    strategy;
    config;
    isRunning = false;
    updateTimer = null;
    // Callbacks
    onSignal;
    onAnalysis;
    onError;
    constructor(config) {
        this.config = config;
        this.restClient = new mexc_rest_1.MexcRestClient();
        this.strategy = new local_minimum_strategy_1.LocalMinimumStrategy();
    }
    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
     */
    async start() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞...');
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
            if (this.config.enableWebSocket) {
                await this.initializeWebSocket();
            }
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if (this.config.enableRest) {
                await this.loadHistoricalData();
            }
            // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.startPeriodicUpdate();
            this.isRunning = true;
            console.log('‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –∑–∞–ø—É—â–µ–Ω');
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:', error);
            throw error;
        }
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
     */
    stop() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞...');
        this.isRunning = false;
        if (this.updateTimer) {
            clearInterval(this.updateTimer);
            this.updateTimer = null;
        }
        if (this.wsClient) {
            this.wsClient.close();
            this.wsClient = null;
        }
        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
     */
    async initializeWebSocket() {
        this.wsClient = new mexc_websocket_1.MexcWebSocketClient();
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebSocket
        this.wsClient.setOnConnect(() => {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MEXC');
        });
        this.wsClient.setOnDisconnect(() => {
            console.log('‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        });
        this.wsClient.setOnKlineUpdate((update) => {
            this.handleKlineUpdate(update);
        });
        this.wsClient.setOnTradeUpdate((update) => {
            this.handleTradeUpdate(update);
        });
        this.wsClient.setOnError((error) => {
            console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
            if (this.onError) {
                this.onError(error);
            }
        });
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ
        for (const symbol of this.config.symbols) {
            for (const interval of this.config.intervals) {
                this.wsClient.subscribeKlines(symbol, interval);
                console.log(`üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–≤–µ—á–∏ ${symbol} ${interval}`);
            }
            this.wsClient.subscribeTrades(symbol);
            console.log(`üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫–∏ ${symbol}`);
        }
    }
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadHistoricalData() {
        console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
        for (const symbol of this.config.symbols) {
            try {
                const klines = await this.restClient.getKlines(symbol, '1m', 500);
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CandleData
                const candles = klines.map(kline => ({
                    open: parseFloat(kline.open),
                    high: parseFloat(kline.high),
                    low: parseFloat(kline.low),
                    close: parseFloat(kline.close),
                    volume: parseFloat(kline.volume),
                    timestamp: kline.openTime
                }));
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                for (const candle of candles) {
                    this.strategy.updateCandles(symbol, candle);
                }
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${candles.length} —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}`);
            }
            catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}:`, error);
            }
        }
    }
    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startPeriodicUpdate() {
        this.updateTimer = setInterval(() => {
            this.performAnalysis();
        }, this.config.updateInterval);
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π
     */
    handleKlineUpdate(update) {
        const candle = {
            open: parseFloat(update.kline.open),
            high: parseFloat(update.kline.high),
            low: parseFloat(update.kline.low),
            close: parseFloat(update.kline.close),
            volume: parseFloat(update.kline.volume),
            timestamp: update.kline.openTime
        };
        this.strategy.updateCandles(update.symbol, candle);
        this.performAnalysis();
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
     */
    handleTradeUpdate(update) {
        // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö
    }
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑
     */
    performAnalysis() {
        if (!this.isRunning)
            return;
        for (const symbol of this.config.symbols) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
                const analysis = this.strategy.getMarketAnalysis(symbol);
                if (analysis) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
                    if (this.onAnalysis) {
                        this.onAnalysis(analysis);
                    }
                    // –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª
                    const signal = this.strategy.getLocalMinimumSignal(symbol);
                    if (signal && signal.signal === 'BUY') {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
                        if (this.onSignal) {
                            this.onSignal(signal);
                        }
                    }
                    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
                    this.displayStatus(symbol, analysis);
                }
            }
            catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${symbol}:`, error);
                if (this.onError) {
                    this.onError(error);
                }
            }
        }
    }
    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å
     */
    displayStatus(symbol, analysis) {
        const trendEmoji = analysis.trend === 'UP' ? 'üìà' : analysis.trend === 'DOWN' ? 'üìâ' : '‚û°Ô∏è';
        const minEmoji = analysis.isLocalMinimum ? 'üîç' : '';
        console.log(`${trendEmoji} ${symbol}: ${analysis.trend} (${analysis.trendStrength.toFixed(1)}%) | ` +
            `RSI: ${analysis.rsi.toFixed(1)} | ${minEmoji}–õ–æ–∫.–º–∏–Ω: ${analysis.isLocalMinimum} | ` +
            `BB: ${analysis.bollinger.position.toFixed(1)}%`);
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
     */
    getMarketAnalysis(symbol) {
        return this.strategy.getMarketAnalysis(symbol);
    }
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
     */
    setOnSignal(callback) {
        this.onSignal = callback;
    }
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞
     */
    setOnAnalysis(callback) {
        this.onAnalysis = callback;
    }
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
     */
    setOnError(callback) {
        this.onError = callback;
    }
}
exports.MarketAnalyzer = MarketAnalyzer;
//# sourceMappingURL=market-analyzer.js.map