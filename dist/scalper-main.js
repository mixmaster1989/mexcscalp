#!/usr/bin/env ts-node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv/config");
const scalper_bot_1 = require("./bot/scalper-bot");
const trading_1 = require("./config/trading");
const fs_1 = __importDefault(require("fs"));
/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ScalperBot
 */
async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ MEXC ScalperBot...');
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        validateEnvironment();
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config = loadConfiguration();
        // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        const bot = new scalper_bot_1.ScalperBot(config);
        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏...');
        await bot.start();
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        const statusInterval = setInterval(() => {
            console.log(bot.getQuickReport());
        }, 30000);
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        const dailyStatsInterval = setInterval(() => {
            const stats = bot.getStats();
            console.log('\nüìä –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:');
            console.log(`–ü–æ–∑–∏—Ü–∏–π: ${stats.status.positionsCount}`);
            console.log(`–î–Ω–µ–≤–Ω–æ–π PnL: ${stats.status.dailyPnL.toFixed(2)} USDT`);
            console.log(`–í–∏–Ω—Ä–µ–π—Ç: ${stats.performance.winRate.toFixed(1)}%`);
            console.log(`Profit Factor: ${stats.performance.profitFactor.toFixed(2)}`);
        }, 5 * 60 * 1000);
        // Graceful shutdown
        process.on('SIGINT', async () => {
            console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
            clearInterval(statusInterval);
            clearInterval(dailyStatsInterval);
            try {
                await bot.stop();
                console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                process.exit(0);
            }
            catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
                process.exit(1);
            }
        });
    }
    catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}
/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function validateEnvironment() {
    const required = ['MEXC_API_KEY', 'MEXC_SECRET_KEY'];
    const missing = required.filter(key => !process.env[key]);
    if (missing.length > 0) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missing.join(', ')}`);
    }
    console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
}
/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 */
function loadConfiguration() {
    const configPath = process.env.CONFIG_PATH || './config/trading.json';
    let customConfig = {};
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (fs_1.default.existsSync(configPath)) {
        try {
            const configData = fs_1.default.readFileSync(configPath, 'utf-8');
            customConfig = JSON.parse(configData);
            console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ ${configPath}`);
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ ${configPath}, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
        }
    }
    else {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envOverrides = {};
    if (process.env.DEPOSIT) {
        envOverrides.deposit = parseFloat(process.env.DEPOSIT);
    }
    if (process.env.POSITION_SIZE_PERCENT) {
        envOverrides.positionSizePercent = parseFloat(process.env.POSITION_SIZE_PERCENT);
    }
    if (process.env.TARGET_PROFIT_PERCENT) {
        envOverrides.targetProfitPercent = parseFloat(process.env.TARGET_PROFIT_PERCENT);
    }
    if (process.env.STOP_LOSS_PERCENT) {
        envOverrides.stopLossPercent = parseFloat(process.env.STOP_LOSS_PERCENT);
    }
    if (process.env.TRADING_PAIRS) {
        envOverrides.targetPairs = process.env.TRADING_PAIRS.split(',').map(p => p.trim());
    }
    const finalConfig = { ...trading_1.defaultConfig, ...customConfig, ...envOverrides };
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏:');
    console.log(`  üí∞ –î–µ–ø–æ–∑–∏—Ç: ${finalConfig.deposit} USDT`);
    console.log(`  üìä –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: ${finalConfig.targetPairs.join(', ')}`);
    console.log(`  üíπ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${finalConfig.positionSizePercent}% –¥–µ–ø–æ`);
    console.log(`  üéØ –¶–µ–ª—å –ø—Ä–∏–±—ã–ª–∏: ${finalConfig.targetProfitPercent}%`);
    console.log(`  üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: ${finalConfig.stopLossPercent}%`);
    console.log(`  ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫: ${finalConfig.minTradeTimeMs / 1000}-${finalConfig.maxTradeTimeMs / 1000} —Å–µ–∫`);
    return finalConfig;
}
/**
 * –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function createExampleConfig() {
    const exampleConfig = {
        deposit: 100,
        targetPairs: ['ETH/USDC', 'BTC/USDC'],
        positionSizePercent: 8,
        targetProfitPercent: 0.2,
        stopLossPercent: 0.3,
        dailyLossLimit: 5,
        dailyTargetProfit: 2,
        minVolatilityThreshold: 0.05,
        maxSpreadPercent: 0.1
    };
    const configDir = './config';
    if (!fs_1.default.existsSync(configDir)) {
        fs_1.default.mkdirSync(configDir, { recursive: true });
    }
    fs_1.default.writeFileSync('./config/trading.json', JSON.stringify(exampleConfig, null, 2));
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ ./config/trading.json');
}
/**
 * CLI –∫–æ–º–∞–Ω–¥—ã
 */
const args = process.argv.slice(2);
if (args.includes('--help') || args.includes('-h')) {
    console.log(`
ü§ñ MEXC ScalperBot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run start              –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
  npm run start:example      –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  
–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  MEXC_API_KEY              API –∫–ª—é—á MEXC (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  MEXC_SECRET_KEY           –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á MEXC (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  CONFIG_PATH               –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  DEPOSIT                   –†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ USDT
  POSITION_SIZE_PERCENT     –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ % –æ—Ç –¥–µ–ø–æ
  TARGET_PROFIT_PERCENT     –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –≤ %
  STOP_LOSS_PERCENT         –°—Ç–æ–ø-–ª–æ—Å—Å –≤ %
  TRADING_PAIRS             –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

–ü—Ä–∏–º–µ—Ä—ã:
  DEPOSIT=200 npm run start
  TRADING_PAIRS="ETH/USDC,BTC/USDC" npm run start
  
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π:
  1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ MEXC
  2. –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
  3. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env
  `);
    process.exit(0);
}
if (args.includes('--create-config')) {
    createExampleConfig();
    process.exit(0);
}
// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(error => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});
//# sourceMappingURL=scalper-main.js.map