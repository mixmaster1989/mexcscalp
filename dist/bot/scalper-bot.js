"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalperBot = void 0;
require("dotenv/config");
const mexcRest_1 = require("../infra/mexcRest");
const mexcWs_1 = require("../infra/mexcWs");
const scalping_1 = require("../strategies/scalping");
const manager_1 = require("../risk/manager");
const position_manager_1 = require("../trading/position-manager");
const trading_1 = require("../config/trading");
const statistics_1 = require("../utils/statistics");
const pino_1 = __importDefault(require("pino"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const notifications_1 = require("../telegram/notifications");
/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞-—Å–∫–∞–ª—å–ø–µ—Ä–∞
 */
class ScalperBot {
    config;
    mexcRest;
    mexcWs;
    strategy;
    riskManager;
    positionManager;
    statsLogger;
    logger;
    telegram;
    isRunning = false;
    startTime = 0;
    errorCount = 0;
    lastError;
    healthCheckInterval;
    constructor(customConfig) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        this.config = { ...trading_1.defaultConfig, ...customConfig };
        const configErrors = (0, trading_1.validateConfig)(this.config);
        if (configErrors.length > 0) {
            throw new Error(`–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${configErrors.join(', ')}`);
        }
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –ü–ï–†–í–´–ú
        this.setupLogger();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç—ã
        this.mexcRest = new mexcRest_1.MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);
        this.mexcWs = new mexcWs_1.MexcWebSocketClient();
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const telegramConfig = {
            botToken: process.env.TELEGRAM_BOT_TOKEN || '',
            chatId: process.env.TELEGRAM_ADMIN_CHAT_IDS || process.env.TELEGRAM_CHAT_ID || '',
            enabled: !!(process.env.TELEGRAM_BOT_TOKEN && (process.env.TELEGRAM_ADMIN_CHAT_IDS || process.env.TELEGRAM_CHAT_ID))
        };
        this.telegram = new notifications_1.TelegramNotifications(telegramConfig, this.logger);
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.riskManager = new manager_1.RiskManager(this.config);
        this.positionManager = new position_manager_1.PositionManager(this.mexcRest, this.config, this.logger, this.telegram);
        this.statsLogger = new statistics_1.StatisticsLogger(this.logger);
        this.strategy = new scalping_1.ScalpingStrategy(this.config, this.mexcRest, this.mexcWs, this.riskManager, this.positionManager, this.logger, this.telegram);
        this.setupEventHandlers();
    }
    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
     */
    async start() {
        try {
            this.logger.info({ config: this.config }, '–ó–∞–ø—É—Å–∫ ScalperBot');
            this.startTime = Date.now();
            this.isRunning = true;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await this.validateApiConnection();
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket
            await this.mexcWs.connect();
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            await this.strategy.start();
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            this.startHealthCheck();
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await this.telegram.sendStartupMessage(this.config);
            this.logger.info('ScalperBot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
        }
        catch (error) {
            this.logger.error({ error }, '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞');
            this.lastError = error instanceof Error ? error.message : 'Unknown error';
            this.errorCount++;
            throw error;
        }
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
     */
    async stop() {
        try {
            this.logger.info('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ScalperBot');
            this.isRunning = false;
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if (this.healthCheckInterval) {
                clearInterval(this.healthCheckInterval);
            }
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            await this.strategy.stop();
            // –û—Ç–∫–ª—é—á–∞–µ–º WebSocket
            this.mexcWs.disconnect();
            // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const finalStats = this.getStats();
            this.logger.info({ finalStats }, 'ScalperBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        catch (error) {
            this.logger.error({ error }, '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞');
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
     */
    getStats() {
        const uptime = this.isRunning ? Date.now() - this.startTime : 0;
        const riskMetrics = this.riskManager.getMetrics();
        const positionStats = this.positionManager.getPositionStats();
        const performance = this.riskManager.getPerformanceStats();
        return {
            status: {
                isRunning: this.isRunning,
                uptime,
                version: '1.0.0',
                lastUpdate: Date.now(),
                apiConnected: true, // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ healthCheck
                wsConnected: this.mexcWs.isConnected(),
                positionsCount: positionStats.totalPositions,
                dailyPnL: riskMetrics.dailyPnL,
                totalTrades: performance.totalTrades,
                winRate: performance.winRate,
                errorCount: this.errorCount,
                lastError: this.lastError
            },
            strategy: this.strategy.getStrategyStats(),
            risk: riskMetrics,
            positions: positionStats,
            performance
        };
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
     */
    getQuickReport() {
        const stats = this.getStats();
        const status = stats.status;
        const performance = stats.performance;
        const uptimeHours = Math.floor(status.uptime / (1000 * 60 * 60));
        const uptimeMinutes = Math.floor((status.uptime % (1000 * 60 * 60)) / (1000 * 60));
        return `
üìä ScalperBot –û—Ç—á–µ—Ç:
‚îú‚îÄ –°—Ç–∞—Ç—É—Å: ${status.isRunning ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚îú‚îÄ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptimeHours}—á ${uptimeMinutes}–º
‚îú‚îÄ –ü–æ–∑–∏—Ü–∏–∏: ${status.positionsCount}
‚îú‚îÄ –î–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${status.dailyPnL.toFixed(2)} USDT
‚îú‚îÄ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${status.totalTrades}
‚îú‚îÄ –í–∏–Ω—Ä–µ–π—Ç: ${performance.winRate.toFixed(1)}%
‚îú‚îÄ Profit Factor: ${performance.profitFactor.toFixed(2)}
‚îî‚îÄ –û—à–∏–±–∫–∏: ${status.errorCount}
    `.trim();
    }
    /**
     * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
     */
    async emergencyStop(reason) {
        this.logger.warn({ reason }, '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞');
        try {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            await this.strategy.forceCloseAllPositions();
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
            await this.stop();
        }
        catch (error) {
            this.logger.error({ error }, '–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
        }
    }
    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
     */
    async restart() {
        this.logger.info('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞');
        try {
            await this.stop();
            await new Promise(resolve => setTimeout(resolve, 5000)); // –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥
            await this.start();
        }
        catch (error) {
            this.logger.error({ error }, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
            throw error;
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
     */
    async validateApiConnection() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º REST API
            const accountInfo = await this.mexcRest.getAccountInfo();
            this.logger.info({ balanceCount: accountInfo.balances.length }, 'API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            for (const symbol of this.config.targetPairs) {
                const [instrument] = await this.mexcRest.getExchangeInfo(symbol);
                if (!instrument) {
                    throw new Error(`–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ ${symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                }
            }
        }
        catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error}`);
        }
    }
    /**
     * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–≥–µ—Ä
     */
    setupLogger() {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        const logDir = path_1.default.dirname('./logs/scalper.log');
        if (!fs_1.default.existsSync(logDir)) {
            fs_1.default.mkdirSync(logDir, { recursive: true });
        }
        const prettyTransport = pino_1.default.transport({
            target: 'pino-pretty',
            options: {
                colorize: true,
                translateTime: 'SYS:yyyy-mm-dd HH:MM:ss.l o',
                singleLine: false
            }
        });
        this.logger = (0, pino_1.default)({
            level: 'info',
            timestamp: pino_1.default.stdTimeFunctions.isoTime
        }, prettyTransport);
    }
    /**
     * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        process.on('SIGINT', async () => {
            this.logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
            await this.stop();
            process.exit(0);
        });
        process.on('SIGTERM', async () => {
            this.logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
            await this.stop();
            process.exit(0);
        });
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        process.on('uncaughtException', (error) => {
            this.logger.fatal({ error }, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
            this.emergencyStop('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
        });
        process.on('unhandledRejection', (reason) => {
            this.logger.fatal({ reason }, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞');
            this.emergencyStop('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞');
        });
    }
    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
     */
    startHealthCheck() {
        this.healthCheckInterval = setInterval(async () => {
            try {
                await this.performHealthCheck();
            }
            catch (error) {
                this.logger.error({ error }, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è');
                this.errorCount++;
                this.lastError = error instanceof Error ? error.message : 'Health check failed';
            }
        }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è
     */
    async performHealthCheck() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (!this.mexcWs.isConnected()) {
            this.logger.warn('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            try {
                await this.mexcWs.connect();
            }
            catch (error) {
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å WebSocket: ${error}`);
            }
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º REST API
        try {
            await this.mexcRest.getAccountInfo();
        }
        catch (error) {
            throw new Error(`REST API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error}`);
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        const positionCount = this.positionManager.getPositionCount();
        if (positionCount > this.config.maxParallelPositions) {
            this.logger.warn({ positionCount }, '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π');
        }
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        const now = Date.now();
        if (now % (5 * 60 * 1000) < 60000) {
            const stats = this.getStats();
            this.statsLogger.logPeriodic(stats);
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    getConfig() {
        return { ...this.config };
    }
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
     */
    updateConfig(updates) {
        try {
            const newConfig = { ...this.config, ...updates };
            const errors = (0, trading_1.validateConfig)(newConfig);
            if (errors.length > 0) {
                this.logger.warn({ errors }, '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
                return false;
            }
            this.config = newConfig;
            this.logger.info({ updates }, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            return true;
        }
        catch (error) {
            this.logger.error({ error }, '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            return false;
        }
    }
}
exports.ScalperBot = ScalperBot;
//# sourceMappingURL=scalper-bot.js.map