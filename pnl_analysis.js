#!/usr/bin/env node
require('dotenv').config();
const sqlite3 = require('sqlite3').verbose();
const { MexcRestClient } = require('./dist/infra/mexcRest');

console.log('üí∞ –ê–ù–ê–õ–ò–ó PnL –ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –¢–û–†–ì–û–í–õ–ò\n');

class PnLAnalyzer {
  constructor() {
    this.db = null;
    this.client = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);
  }

  async connectDB() {
    return new Promise((resolve, reject) => {
      this.db = new sqlite3.Database('./data/mexc_bot.db', (err) => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }

  async closeDB() {
    if (this.db) {
      return new Promise((resolve) => {
        this.db.close(resolve);
      });
    }
  }

  async query(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.all(sql, params, (err, rows) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows || []);
        }
      });
    });
  }

  async getOne(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.get(sql, params, (err, row) => {
        if (err) {
          reject(err);
        } else {
          resolve(row);
        }
      });
    });
  }

  // –ê–Ω–∞–ª–∏–∑ PnL –ø–æ –¥–Ω—è–º
  async analyzeDailyPnL(days = 30) {
    console.log(`üìÖ –ê–ù–ê–õ–ò–ó PnL –ü–û –î–ù–Ø–ú (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${days} –¥–Ω–µ–π):`);
    console.log('‚ïê'.repeat(70));

    try {
      const dailyStats = await this.query(`
        SELECT 
          DATE(datetime(ts_entry/1000, 'unixepoch')) as date,
          COUNT(*) as trades_count,
          SUM(pnl) as daily_pnl,
          AVG(pnl) as avg_pnl,
          COUNT(CASE WHEN pnl > 0 THEN 1 END) as winning_trades,
          COUNT(CASE WHEN pnl < 0 THEN 1 END) as losing_trades,
          MAX(pnl) as best_trade,
          MIN(pnl) as worst_trade,
          SUM(qty) as total_volume
        FROM trades 
        WHERE ts_entry > strftime('%s', 'now', '-${days} days') * 1000
        GROUP BY date 
        ORDER BY date DESC
      `);

      if (dailyStats.length === 0) {
        console.log('   ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥');
        return;
      }

      let totalPnL = 0;
      let totalTrades = 0;
      let totalWinning = 0;
      let totalLosing = 0;
      let bestDayPnL = 0;
      let worstDayPnL = 0;
      let bestDay = '';
      let worstDay = '';

      console.log('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:');
      console.log('–î–∞—Ç–∞       | –°–¥–µ–ª–æ–∫ | PnL      | –í–∏–Ω—Ä–µ–π—Ç | –õ—É—á—à–∞—è  | –•—É–¥—à–∞—è  | –û–±—ä–µ–º');
      console.log('‚îÄ'.repeat(70));

      dailyStats.forEach(day => {
        const winRate = day.trades_count > 0 ? (day.winning_trades / day.trades_count * 100) : 0;
        const pnlEmoji = day.daily_pnl >= 0 ? 'üü¢' : 'üî¥';
        const pnlFormatted = day.daily_pnl >= 0 ? `+${day.daily_pnl.toFixed(4)}` : day.daily_pnl.toFixed(4);
        
        console.log(`${day.date} | ${day.trades_count.toString().padStart(6)} | ${pnlEmoji} ${pnlFormatted.padStart(8)} | ${winRate.toFixed(1).padStart(6)}% | ${day.best_trade.toFixed(4).padStart(7)} | ${day.worst_trade.toFixed(4).padStart(7)} | ${day.total_volume.toFixed(4)}`);

        totalPnL += day.daily_pnl;
        totalTrades += day.trades_count;
        totalWinning += day.winning_trades;
        totalLosing += day.losing_trades;

        if (day.daily_pnl > bestDayPnL) {
          bestDayPnL = day.daily_pnl;
          bestDay = day.date;
        }
        if (day.daily_pnl < worstDayPnL) {
          worstDayPnL = day.daily_pnl;
          worstDay = day.date;
        }
      });

      const overallWinRate = totalTrades > 0 ? (totalWinning / totalTrades * 100) : 0;
      const avgDailyPnL = totalPnL / dailyStats.length;

      console.log('‚îÄ'.repeat(70));
      console.log(`–ò–¢–û–ì–û      | ${totalTrades.toString().padStart(6)} | ${totalPnL >= 0 ? 'üü¢' : 'üî¥'} ${totalPnL.toFixed(4).padStart(8)} | ${overallWinRate.toFixed(1).padStart(6)}% | ${Math.max(...dailyStats.map(d => d.best_trade)).toFixed(4).padStart(7)} | ${Math.min(...dailyStats.map(d => d.worst_trade)).toFixed(4).padStart(7)} | ${dailyStats.reduce((sum, d) => sum + d.total_volume, 0).toFixed(4)}`);

      console.log('\nüìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`   –û–±—â–∏–π PnL: ${totalPnL >= 0 ? 'üü¢' : 'üî¥'} ${totalPnL.toFixed(4)} USDC`);
      console.log(`   –°—Ä–µ–¥–Ω–∏–π PnL –≤ –¥–µ–Ω—å: ${avgDailyPnL.toFixed(4)} USDC`);
      console.log(`   –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: ${overallWinRate.toFixed(2)}%`);
      console.log(`   –õ—É—á—à–∏–π –¥–µ–Ω—å: ${bestDay} (+${bestDayPnL.toFixed(4)} USDC)`);
      console.log(`   –•—É–¥—à–∏–π –¥–µ–Ω—å: ${worstDay} (${worstDayPnL.toFixed(4)} USDC)`);
      console.log(`   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –¥–Ω–µ–π: ${dailyStats.filter(d => d.daily_pnl > 0).length}/${dailyStats.length}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ PnL:', error.message);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ PnL –ø–æ —á–∞—Å–∞–º
  async analyzeHourlyPnL() {
    console.log('\n‚è∞ –ê–ù–ê–õ–ò–ó PnL –ü–û –ß–ê–°–ê–ú:');
    console.log('‚ïê'.repeat(50));

    try {
      const hourlyStats = await this.query(`
        SELECT 
          strftime('%H', datetime(ts_entry/1000, 'unixepoch')) as hour,
          COUNT(*) as trades_count,
          SUM(pnl) as hourly_pnl,
          AVG(pnl) as avg_pnl,
          COUNT(CASE WHEN pnl > 0 THEN 1 END) as winning_trades
        FROM trades 
        WHERE ts_entry > strftime('%s', 'now', '-30 days') * 1000
        GROUP BY hour 
        ORDER BY hour
      `);

      if (hourlyStats.length === 0) {
        console.log('   ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —á–∞—Å–∞–º');
        return;
      }

      console.log('–ß–∞—Å | –°–¥–µ–ª–æ–∫ | PnL      | –í–∏–Ω—Ä–µ–π—Ç | –°—Ä–µ–¥–Ω–∏–π PnL');
      console.log('‚îÄ'.repeat(50));

      hourlyStats.forEach(hour => {
        const winRate = hour.trades_count > 0 ? (hour.winning_trades / hour.trades_count * 100) : 0;
        const pnlEmoji = hour.hourly_pnl >= 0 ? 'üü¢' : 'üî¥';
        const pnlFormatted = hour.hourly_pnl >= 0 ? `+${hour.hourly_pnl.toFixed(4)}` : hour.hourly_pnl.toFixed(4);
        
        console.log(`${hour.hour.padStart(3)} | ${hour.trades_count.toString().padStart(6)} | ${pnlEmoji} ${pnlFormatted.padStart(8)} | ${winRate.toFixed(1).padStart(6)}% | ${hour.avg_pnl.toFixed(4).padStart(10)}`);
      });

      // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —á–∞—Å—ã
      const bestHour = hourlyStats.reduce((best, hour) => hour.hourly_pnl > best.hourly_pnl ? hour : best);
      const worstHour = hourlyStats.reduce((worst, hour) => hour.hourly_pnl < worst.hourly_pnl ? hour : worst);

      console.log('\nüéØ –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —á–∞—Å—ã:');
      console.log(`   –õ—É—á—à–∏–π —á–∞—Å: ${bestHour.hour}:00 (+${bestHour.hourly_pnl.toFixed(4)} USDC, ${bestHour.trades_count} —Å–¥–µ–ª–æ–∫)`);
      console.log(`   –•—É–¥—à–∏–π —á–∞—Å: ${worstHour.hour}:00 (${worstHour.hourly_pnl.toFixed(4)} USDC, ${worstHour.trades_count} —Å–¥–µ–ª–æ–∫)`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ PnL:', error.message);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
  async analyzeStrategyPerformance() {
    console.log('\nüéØ –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –°–¢–†–ê–¢–ï–ì–ò–ô:');
    console.log('‚ïê'.repeat(60));

    try {
      const strategyStats = await this.query(`
        SELECT 
          strategy,
          COUNT(*) as trades_count,
          SUM(pnl) as total_pnl,
          AVG(pnl) as avg_pnl,
          COUNT(CASE WHEN pnl > 0 THEN 1 END) as winning_trades,
          COUNT(CASE WHEN pnl < 0 THEN 1 END) as losing_trades,
          MAX(pnl) as best_trade,
          MIN(pnl) as worst_trade,
          AVG(duration_ms) as avg_duration_ms,
          SUM(qty) as total_volume
        FROM trades 
        GROUP BY strategy 
        ORDER BY total_pnl DESC
      `);

      if (strategyStats.length === 0) {
        console.log('   ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö');
        return;
      }

      console.log('–°—Ç—Ä–∞—Ç–µ–≥–∏—è | –°–¥–µ–ª–æ–∫ | PnL      | –í–∏–Ω—Ä–µ–π—Ç | –°—Ä–µ–¥–Ω–∏–π PnL | –õ—É—á—à–∞—è  | –•—É–¥—à–∞—è  | –í—Ä–µ–º—è');
      console.log('‚îÄ'.repeat(80));

      strategyStats.forEach(strategy => {
        const winRate = strategy.trades_count > 0 ? (strategy.winning_trades / strategy.trades_count * 100) : 0;
        const pnlEmoji = strategy.total_pnl >= 0 ? 'üü¢' : 'üî¥';
        const pnlFormatted = strategy.total_pnl >= 0 ? `+${strategy.total_pnl.toFixed(4)}` : strategy.total_pnl.toFixed(4);
        const avgDuration = Math.round(strategy.avg_duration_ms / 1000); // —Å–µ–∫—É–Ω–¥—ã
        
        console.log(`${strategy.strategy.padStart(8)} | ${strategy.trades_count.toString().padStart(6)} | ${pnlEmoji} ${pnlFormatted.padStart(8)} | ${winRate.toFixed(1).padStart(6)}% | ${strategy.avg_pnl.toFixed(4).padStart(10)} | ${strategy.best_trade.toFixed(4).padStart(7)} | ${strategy.worst_trade.toFixed(4).padStart(7)} | ${avgDuration}s`);
      });

      // –†–µ–π—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
      console.log('\nüèÜ –†–ï–ô–¢–ò–ù–ì –°–¢–†–ê–¢–ï–ì–ò–ô:');
      strategyStats.forEach((strategy, index) => {
        const rank = index + 1;
        const emoji = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : 'üìä';
        console.log(`   ${emoji} ${rank}. ${strategy.strategy}: ${strategy.total_pnl >= 0 ? '+' : ''}${strategy.total_pnl.toFixed(4)} USDC (${strategy.trades_count} —Å–¥–µ–ª–æ–∫)`);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:', error.message);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
  async analyzeRiskMetrics() {
    console.log('\n‚ö†Ô∏è –ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í:');
    console.log('‚ïê'.repeat(50));

    try {
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
      const trades = await this.query(`
        SELECT pnl, ts_entry 
        FROM trades 
        ORDER BY ts_entry ASC
      `);

      if (trades.length === 0) {
        console.log('   ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤');
        return;
      }

      let runningPnL = 0;
      let peakPnL = 0;
      let maxDrawdown = 0;
      let currentDrawdown = 0;

      trades.forEach(trade => {
        runningPnL += trade.pnl;
        if (runningPnL > peakPnL) {
          peakPnL = runningPnL;
          currentDrawdown = 0;
        } else {
          currentDrawdown = peakPnL - runningPnL;
          if (currentDrawdown > maxDrawdown) {
            maxDrawdown = currentDrawdown;
          }
        }
      });

      // –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
      const pnlValues = trades.map(t => t.pnl);
      const avgPnL = pnlValues.reduce((sum, p) => sum + p, 0) / pnlValues.length;
      const variance = pnlValues.reduce((sum, p) => sum + Math.pow(p - avgPnL, 2), 0) / pnlValues.length;
      const volatility = Math.sqrt(variance);

      // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
      const sharpeRatio = volatility > 0 ? avgPnL / volatility : 0;

      // –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–∏–π —É–±—ã—Ç–∫–æ–≤
      let currentLossStreak = 0;
      let maxLossStreak = 0;
      let currentWinStreak = 0;
      let maxWinStreak = 0;

      trades.forEach(trade => {
        if (trade.pnl < 0) {
          currentLossStreak++;
          currentWinStreak = 0;
          if (currentLossStreak > maxLossStreak) {
            maxLossStreak = currentLossStreak;
          }
        } else if (trade.pnl > 0) {
          currentWinStreak++;
          currentLossStreak = 0;
          if (currentWinStreak > maxWinStreak) {
            maxWinStreak = currentWinStreak;
          }
        }
      });

      console.log('üìä –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞:');
      console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: ${maxDrawdown.toFixed(4)} USDC`);
      console.log(`   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${volatility.toFixed(4)} USDC`);
      console.log(`   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: ${sharpeRatio.toFixed(4)}`);
      console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤: ${maxLossStreak} —Å–¥–µ–ª–æ–∫`);
      console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –ø—Ä–∏–±—ã–ª–∏: ${maxWinStreak} —Å–¥–µ–ª–æ–∫`);

      // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
      console.log('\nüéØ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:');
      if (maxDrawdown > 10) {
        console.log('   ‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: –±–æ–ª—å—à–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞');
      } else if (maxDrawdown > 5) {
        console.log('   ‚ö° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: —É–º–µ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞');
      } else {
        console.log('   ‚úÖ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: –Ω–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞');
      }

      if (volatility > 2) {
        console.log('   ‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      } else if (volatility > 1) {
        console.log('   ‚ö° –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: —É–º–µ—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å');
      } else {
        console.log('   ‚úÖ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      }

      if (maxLossStreak > 10) {
        console.log('   ‚ö†Ô∏è –î–ª–∏–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤: –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏');
      } else {
        console.log('   ‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤: —Ö–æ—Ä–æ—à–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤:', error.message);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π
  async analyzeFees() {
    console.log('\nüí∏ –ê–ù–ê–õ–ò–ó –ö–û–ú–ò–°–°–ò–ô:');
    console.log('‚ïê'.repeat(50));

    try {
      const feeStats = await this.query(`
        SELECT 
          SUM(fee) as total_fees,
          AVG(fee) as avg_fee,
          COUNT(*) as total_fills,
          SUM(qty * price) as total_volume_usd
        FROM fills
      `);

      if (feeStats.length === 0 || !feeStats[0].total_fees) {
        console.log('   ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∏—Å—Å–∏—è—Ö');
        return;
      }

      const stats = feeStats[0];
      const feeRate = stats.total_volume_usd > 0 ? (stats.total_fees / stats.total_volume_usd * 100) : 0;

      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–π:');
      console.log(`   –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${stats.total_fees.toFixed(4)} USDC`);
      console.log(`   –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è: ${stats.avg_fee.toFixed(4)} USDC`);
      console.log(`   –í—Å–µ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π: ${stats.total_fills}`);
      console.log(`   –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ${stats.total_volume_usd.toFixed(2)} USDC`);
      console.log(`   –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏: ${feeRate.toFixed(4)}%`);

      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å PnL
      const pnlStats = await this.getOne(`
        SELECT SUM(pnl) as total_pnl 
        FROM trades
      `);

      if (pnlStats && pnlStats.total_pnl) {
        const netPnL = pnlStats.total_pnl - stats.total_fees;
        const feeImpact = stats.total_fees / Math.abs(pnlStats.total_pnl) * 100;

        console.log('\nüí∞ –í–ª–∏—è–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π –Ω–∞ PnL:');
        console.log(`   –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: ${pnlStats.total_pnl.toFixed(4)} USDC`);
        console.log(`   –ö–æ–º–∏—Å—Å–∏–∏: ${stats.total_fees.toFixed(4)} USDC`);
        console.log(`   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${netPnL.toFixed(4)} USDC`);
        console.log(`   –í–ª–∏—è–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π: ${feeImpact.toFixed(2)}% –æ—Ç –≤–∞–ª–æ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏`);

        if (feeImpact > 50) {
          console.log('   ‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π –Ω–∞ –ø—Ä–∏–±—ã–ª—å');
        } else if (feeImpact > 20) {
          console.log('   ‚ö° –£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π');
        } else {
          console.log('   ‚úÖ –ù–∏–∑–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π');
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∏—Å—Å–∏–π:', error.message);
    }
  }

  async run() {
    try {
      await this.connectDB();
      await this.analyzeDailyPnL();
      await this.analyzeHourlyPnL();
      await this.analyzeStrategyPerformance();
      await this.analyzeRiskMetrics();
      await this.analyzeFees();
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
      await this.closeDB();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
const analyzer = new PnLAnalyzer();
analyzer.run();


