#!/usr/bin/env node
require('dotenv').config();
const { MexcRestClient } = require('./dist/infra/mexcRest');

console.log('üß™ –¢–ï–°–¢ –°–ö–ê–õ–¨–ü–ï–†–ê –ù–ê 1 –¶–ò–ö–õ\n');

class TestScalper {
  constructor() {
    this.restClient = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ real_scalper.js)
    this.config = {
      symbol: 'ETHUSDC',
      deposit_usd: 100,
      mode: 'hedgehog',
      
      hedgehog: {
        levels: 5,
        offset_k: 0.5,
        step_k: 0.6,
        tp_pct: 0.10,
        max_direction_usd: 20,
        order_size_usd: 5
      },
      
      timing: {
        max_distance_atr_multiplier: 1,
        order_ttl_ms: 300000
      }
    };
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    this.indicators = {
      midPrice: 0,
      atr_1m: 0
    };
    
    this.inventory = 0;
    this.inventoryNotional = 0;
  }

  async testOneCycle() {
    try {
      console.log('üìä –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      await this.updateMarketData();
      console.log(`‚úÖ –¶–µ–Ω–∞: ${this.indicators.midPrice.toFixed(2)} USDC`);
      console.log(`‚úÖ ATR: ${this.indicators.atr_1m.toFixed(4)} USDC\n`);
      
      console.log('üìä –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ä–¥–µ—Ä–æ–≤...');
      const center = this.indicators.midPrice;
      const atr = this.indicators.atr_1m;
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      const testQuantity1 = center > 0 ? this.config.hedgehog.order_size_usd / center : 0.001;
      const testQuantity2 = center > 0 ? this.config.hedgehog.order_size_usd / (center * 1.1) : 0.001;
      
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 1: ${testQuantity1.toFixed(6)} ETH (–Ω–µ NaN)`);
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 2: ${testQuantity2.toFixed(6)} ETH (–Ω–µ NaN)\n`);
      
      console.log('üìä –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –æ—Ä–¥–µ—Ä–æ–≤...');
      const offset = Math.ceil(this.config.hedgehog.offset_k * atr * 100) / 100;
      const step = Math.ceil(this.config.hedgehog.step_k * atr * 100) / 100;
      
      console.log(`‚úÖ Offset: ${offset.toFixed(2)} USDC`);
      console.log(`‚úÖ Step: ${step.toFixed(2)} USDC\n`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω –¥–ª—è buy –æ—Ä–¥–µ—Ä–æ–≤
      console.log('üìä –¢–ï–°–¢ 4: –†–∞—Å—á–µ—Ç —Ü–µ–Ω BUY –æ—Ä–¥–µ—Ä–æ–≤...');
      for (let i = 1; i <= 3; i++) {
        const price = center - offset - (i - 1) * step;
        const quantity = center > 0 ? this.config.hedgehog.order_size_usd / center : 0.001;
        const notional = price * quantity;
        
        console.log(`‚úÖ BUY ${i}: ${price.toFixed(2)} x ${quantity.toFixed(6)} = ${notional.toFixed(2)} USDC`);
        
        if (isNaN(price) || isNaN(quantity) || isNaN(notional)) {
          console.log(`‚ùå –û–®–ò–ë–ö–ê: NaN –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö!`);
          return false;
        }
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω –¥–ª—è sell –æ—Ä–¥–µ—Ä–æ–≤
      console.log('\nüìä –¢–ï–°–¢ 5: –†–∞—Å—á–µ—Ç —Ü–µ–Ω SELL –æ—Ä–¥–µ—Ä–æ–≤...');
      for (let i = 1; i <= 3; i++) {
        const price = center + offset + (i - 1) * step;
        const quantity = center > 0 ? this.config.hedgehog.order_size_usd / center : 0.001;
        const notional = price * quantity;
        
        console.log(`‚úÖ SELL ${i}: ${price.toFixed(2)} x ${quantity.toFixed(6)} = ${notional.toFixed(2)} USDC`);
        
        if (isNaN(price) || isNaN(quantity) || isNaN(notional)) {
          console.log(`‚ùå –û–®–ò–ë–ö–ê: NaN –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö!`);
          return false;
        }
      }
      
      console.log('\nüìä –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ TP —Ä–∞—Å—á–µ—Ç–æ–≤...');
      const testTrade = { side: 'buy', price: center.toString(), quantity: '0.001' };
      const tpPct = this.config.hedgehog.tp_pct;
      const tpPrice = parseFloat(testTrade.price) * (1 + tpPct / 100);
      const tpQuantity = tpPrice > 0 ? this.config.hedgehog.order_size_usd / tpPrice : 0.001;
      
      console.log(`‚úÖ TP —Ü–µ–Ω–∞: ${tpPrice.toFixed(2)} USDC`);
      console.log(`‚úÖ TP –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${tpQuantity.toFixed(6)} ETH`);
      
      if (isNaN(tpPrice) || isNaN(tpQuantity)) {
        console.log(`‚ùå –û–®–ò–ë–ö–ê: NaN –≤ TP —Ä–∞—Å—á–µ—Ç–∞—Ö!`);
        return false;
      }
      
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ NaN –±–∞–≥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
      console.log('‚úÖ –†–∞—Å—á–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
      console.log('‚úÖ –°–∫–∞–ª—å–ø–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É');
      
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
      return false;
    }
  }

  async updateMarketData() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
      const ticker = await this.restClient.getBookTicker(this.config.symbol);
      this.indicators.midPrice = (parseFloat(ticker.bidPrice) + parseFloat(ticker.askPrice)) / 2;
      
      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π ATR
      this.indicators.atr_1m = this.indicators.midPrice * 0.001; // 0.1% –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function runTest() {
  const testScalper = new TestScalper();
  const success = await testScalper.testOneCycle();
  
  if (success) {
    console.log('\nüöÄ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù - –ú–û–ñ–ù–û –ó–ê–ü–£–°–ö–ê–¢–¨ –°–ö–ê–õ–¨–ü–ï–†!');
    process.exit(0);
  } else {
    console.log('\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù - –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –ë–ê–ì–ò!');
    process.exit(1);
  }
}

runTest();