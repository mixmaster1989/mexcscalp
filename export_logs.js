#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üìã –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ mexcscalp...\n');

try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 300 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 300 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤...');
    const logs = execSync('pm2 logs mexcscalp --lines 300 --nostream', { 
        encoding: 'utf8',
        cwd: process.cwd()
    });
    
    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    const now = new Date();
    const timestamp = now.toISOString().replace(/[:.]/g, '-').slice(0, 19);
    const filename = `mexcscalp_logs_${timestamp}.txt`;
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const logsDir = path.join(__dirname, 'logs');
    if (!fs.existsSync(logsDir)) {
        fs.mkdirSync(logsDir, { recursive: true });
        console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ logs/');
    }
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const filepath = path.join(logsDir, filename);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
    fs.writeFileSync(filepath, logs);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const stats = fs.statSync(filepath);
    const fileSizeInKB = (stats.size / 1024).toFixed(2);
    
    console.log('‚úÖ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
    console.log(`üìÅ –§–∞–π–ª: ${filepath}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä: ${fileSizeInKB} KB`);
    console.log(`üìä –°—Ç—Ä–æ–∫: ${logs.split('\n').length}`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${now.toLocaleString('ru-RU')}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\nüìã –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:');
    console.log('‚îÄ'.repeat(80));
    const lines = logs.split('\n').slice(0, 5);
    lines.forEach((line, index) => {
        if (line.trim()) {
            console.log(`${index + 1}: ${line}`);
        }
    });
    
    if (logs.split('\n').length > 5) {
        console.log('...');
        console.log(`... –∏ –µ—â–µ ${logs.split('\n').length - 5} —Å—Ç—Ä–æ–∫`);
    }
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤:', error.message);
    
    if (error.message.includes('pm2')) {
        console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
        console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PM2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: npm install -g pm2');
        console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å mexcscalp –∑–∞–ø—É—â–µ–Ω: pm2 status');
        console.log('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ root –∏–ª–∏ —Å sudo');
    }
    
    process.exit(1);
}

console.log('\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!'); 