require('dotenv').config();
const { MexcRestClient } = require('./dist/infra/mexcRest');

console.log('üîç –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–´ –°–ö–ê–õ–¨–ü–ï–†–ê...\n');

const client = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);

async function analyzeScalper() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    console.log('1Ô∏è‚É£ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°:');
    const account = await client.getAccountInfo();
    const eth = account.balances.find(b => b.asset === 'ETH');
    const usdc = account.balances.find(b => b.asset === 'USDC');
    
    console.log('   ü™ô ETH —Å–≤–æ–±–æ–¥–Ω–æ:', eth?.free || 0);
    console.log('   üîí ETH –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', eth?.locked || 0);
    console.log('   üíµ USDC —Å–≤–æ–±–æ–¥–Ω–æ:', usdc?.free || 0);
    console.log('   üîí USDC –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', usdc?.locked || 0);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
    console.log('\n2Ô∏è‚É£ –ê–ö–¢–ò–í–ù–´–ï –û–†–î–ï–†–ê:');
    const orders = await client.getOpenOrders('ETH/USDC');
    console.log('   üìä –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤:', orders.length);
    
    if (orders.length > 0) {
      orders.forEach((order, i) => {
        const side = order.side === 'buy' ? 'üü¢ BUY' : 'üî¥ SELL';
        const age = Math.floor((Date.now() - order.timestamp) / 1000 / 60); // –º–∏–Ω—É—Ç—ã
        console.log('   ' + (i+1) + '. ' + side + ' ' + order.price + ' x ' + order.quantity + ' (' + age + ' –º–∏–Ω)');
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    console.log('\n3Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:');
    const trades = await client.getMyTrades('ETH/USDC', 5);
    console.log('   üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:', trades.length);
    
    if (trades.length > 0) {
      trades.forEach((trade, i) => {
        const side = trade.side === 'buy' ? 'üü¢ BUY' : 'üî¥ SELL';
        const time = new Date(trade.timestamp).toLocaleTimeString('ru-RU');
        console.log('   ' + (i+1) + '. ' + side + ' ' + trade.price + ' x ' + trade.quantity + ' (' + time + ')');
      });
    }
    
    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–´:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ETH –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    const hasETH = parseFloat(eth?.free || '0') > 0.0001;
    const hasUSDC = parseFloat(usdc?.free || '0') > 10;
    
    console.log('   ‚úÖ ETH –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:', hasETH ? '–ï–°–¢–¨' : '–ù–ï–¢');
    console.log('   ‚úÖ USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', hasUSDC ? '–ï–°–¢–¨' : '–ù–ï–¢');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞
    const buyOrders = orders.filter(o => o.side === 'buy').length;
    const sellOrders = orders.filter(o => o.side === 'sell').length;
    
    console.log('   üìà Buy –æ—Ä–¥–µ—Ä–æ–≤:', buyOrders);
    console.log('   üìâ Sell –æ—Ä–¥–µ—Ä–æ–≤:', sellOrders);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é
    console.log('\n5Ô∏è‚É£ –†–´–ù–û–ß–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:');
    const price = await client.getPrice('ETH/USDC');
    const bookTicker = await client.getBookTicker('ETH/USDC');
    
    console.log('   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:', price.toFixed(2));
    console.log('   üìè –°–ø—Ä–µ–¥:', (bookTicker.askPrice - bookTicker.bidPrice).toFixed(2));
    
    // –ê–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Ä—ã–Ω–∫—É
    console.log('\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –û–†–î–ï–†–û–í:');
    
    orders.forEach((order, i) => {
      const distance = order.side === 'buy' ? 
        price - order.price : 
        order.price - price;
      
      const distancePercent = (distance / price * 100).toFixed(2);
      const status = distance > 0 ? '–í–´–ì–û–î–ù–´–ô' : '–ù–ï–í–´–ì–û–î–ù–´–ô';
      
      console.log('   –û—Ä–¥–µ—Ä ' + (i+1) + ': ' + status + ' (' + distancePercent + '% –æ—Ç —Ä—ã–Ω–∫–∞)');
    });
    
    // –í—ã–≤–æ–¥—ã
    console.log('\nüéØ –í–´–í–û–î–´:');
    
    let issues = [];
    
    if (!hasETH && !hasUSDC) {
      issues.push('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏');
    }
    
    if (orders.length === 0) {
      issues.push('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤');
    }
    
    if (buyOrders === 0) {
      issues.push('‚ö†Ô∏è –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É');
    }
    
    if (sellOrders === 0 && hasETH) {
      issues.push('‚ö†Ô∏è –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ ETH');
    }
    
    const spread = bookTicker.askPrice - bookTicker.bidPrice;
    if (spread > 5) {
      issues.push('‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Å–ø—Ä–µ–¥ (>5 USDC)');
    }
    
    if (issues.length === 0) {
      console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log('   ‚úÖ –ï—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏');
      console.log('   ‚úÖ –û—Ä–¥–µ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('   ‚úÖ –†—ã–Ω–æ—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è');
    } else {
      console.log('   ‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
      issues.forEach(issue => console.log('     ' + issue));
    }
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error.message);
  }
}

analyzeScalper();
