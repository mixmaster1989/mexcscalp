"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MexcScalpBot = void 0;
const dotenv_1 = __importDefault(require("dotenv"));
const fs_1 = require("fs");
const pino_1 = __importDefault(require("pino"));
// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv_1.default.config();
const types_1 = require("./core/types");
const mexcRest_1 = require("./infra/mexcRest");
const mexcWs_1 = require("./infra/mexcWs");
const regime_1 = require("./core/regime");
const hedgehog_1 = require("./strategies/hedgehog");
const db_1 = require("./storage/db");
const bot_1 = require("./telegram/bot");
/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã MEXC Scalp Bot
 */
class MexcScalpBot {
    logger;
    config;
    restClient;
    wsClient;
    regimeDetector;
    hedgehogStrategy;
    telegramBot;
    instrument = null;
    isRunning = false;
    shutdownInProgress = false;
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
        this.logger = (0, pino_1.default)({
            level: process.env.LOG_LEVEL || 'info',
            transport: {
                target: 'pino-pretty',
                options: {
                    colorize: true,
                    translateTime: 'SYS:standard'
                }
            }
        });
        this.logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MEXC Scalp Bot...');
    }
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    loadConfig() {
        try {
            const configPath = process.env.CONFIG_FILE || './config/defaults.ethusdc.json';
            const configData = JSON.parse((0, fs_1.readFileSync)(configPath, 'utf-8'));
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ zod
            this.config = types_1.ConfigSchema.parse(configData);
            this.logger.info('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞', {
                symbol: this.config.symbol,
                deposit: this.config.deposit_usd,
                regime: this.config.regime,
                hedgehog: this.config.hedgehog
            });
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            throw error;
        }
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API –∫–ª–∏–µ–Ω—Ç—ã
     */
    initClients() {
        const apiKey = process.env.MEXC_API_KEY;
        const secretKey = process.env.MEXC_SECRET_KEY;
        const baseUrl = process.env.MEXC_BASE_URL || 'https://api.mexc.com';
        const wsUrl = process.env.MEXC_WS_URL || 'wss://wbs.mexc.com/ws';
        if (!apiKey || !secretKey) {
            throw new Error('MEXC API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º REST –∫–ª–∏–µ–Ω—Ç
        this.restClient = new mexcRest_1.MexcRestClient(apiKey, secretKey, baseUrl);
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
        this.wsClient = new mexcWs_1.MexcWebSocketClient(wsUrl, this.config.ws.max_reconnect_attempts, this.config.ws.reconnect_delay_ms, this.config.ws.heartbeat_interval_ms);
        this.logger.info('‚úÖ API –∫–ª–∏–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    async loadInstrumentInfo() {
        try {
            const instruments = await this.restClient.getExchangeInfo(this.config.symbol);
            if (instruments.length === 0) {
                throw new Error(`–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${this.config.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            this.instrument = instruments[0];
            this.logger.info('‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', {
                symbol: this.instrument.symbol,
                tickSize: this.instrument.tickSize,
                stepSize: this.instrument.stepSize,
                minNotional: this.instrument.minNotional
            });
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', error);
            throw error;
        }
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
     */
    initTradingComponents() {
        if (!this.instrument) {
            throw new Error('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤
        this.regimeDetector = new regime_1.RegimeDetector(this.config);
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Å—Ä—à–∏–∫–∏
        this.hedgehogStrategy = new hedgehog_1.HedgehogStrategy(this.config, this.instrument, this.restClient);
        this.setupEventHandlers();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
        this.initTelegramBot();
        this.logger.info('‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞
     */
    initTelegramBot() {
        const telegramToken = process.env.TELEGRAM_BOT_TOKEN;
        const groupChatId = parseInt(process.env.TELEGRAM_ADMIN_CHAT_IDS || '0');
        if (!telegramToken || !groupChatId) {
            this.logger.warn('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã)');
            return;
        }
        this.telegramBot = new bot_1.MexcTelegramBot(telegramToken, groupChatId, () => this.getTradingStats(), () => this.getSystemStatus(), (command, chatId) => this.handleTradingCommand(command, chatId), this.logger);
        this.logger.info('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è Telegram –±–æ—Ç–∞
     */
    getTradingStats() {
        const stats = this.hedgehogStrategy?.getStats() || {
            isActive: false,
            activeLevels: 0,
            activeTakeProfits: 0,
            currentInventory: 0,
            inventoryNotional: 0,
            currentRegime: 'normal',
            midPrice: 0,
            atr1m: 0
        };
        return {
            isActive: stats.isActive,
            currentRegime: stats.currentRegime,
            activeLevels: stats.activeLevels,
            activeTPs: stats.activeTakeProfits,
            inventory: stats.currentInventory,
            inventoryNotional: stats.inventoryNotional,
            midPrice: stats.midPrice,
            pnlToday: 0,
            tradesCount: 0,
            winRate: 0,
            // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            totalTrades: 0,
            profitableTrades: 0,
            losingTrades: 0,
            totalPnL: 0,
            dailyPnL: 0,
            maxDrawdown: 0
        };
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –¥–ª—è Telegram –±–æ—Ç–∞
     */
    getSystemStatus() {
        const baseStatus = {
            bot: {
                status: this.isRunning ? 'running' : 'stopped',
                uptime: Date.now() - this.startTime,
                version: '1.0.0'
            },
            trading: {
                status: this.hedgehogStrategy?.getStats().isActive ? 'active' : 'stopped',
                regime: this.regimeDetector?.getCurrentRegime() || 'normal',
                lastUpdate: Date.now()
            },
            api: {
                rest: true,
                websocket: this.wsClient?.isConnected() || false,
                lastCheck: Date.now()
            },
            database: {
                connected: true,
                lastBackup: Date.now() - 24 * 60 * 60 * 1000
            }
        };
        return {
            ...baseStatus,
            // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            systemStatus: baseStatus.bot.status,
            tradingEnabled: baseStatus.trading.status === 'active',
            totalBalance: 100 // TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        };
    }
    *–û–±—Ä–∞–±–æ—Ç–∞—Ç—å() { }
    —Ç–æ—Ä–≥–æ–≤—É—é;
    –∫–æ–º–∞–Ω–¥—É;
    –∏–∑;
    Telegram;
    *() { }
}
exports.MexcScalpBot = MexcScalpBot;
/;
async;
handleTradingCommand(command, string, chatId, number);
Promise < string > {
    try: {
        switch(command) {
        },
        case: 'start_trading',
        : .hedgehogStrategy
    }
};
{
    await this.hedgehogStrategy.start();
    return '‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞';
}
return '‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞';
'stop_trading';
if (this.hedgehogStrategy) {
    await this.hedgehogStrategy.stop();
    return '‚èπÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
}
return '‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞';
'pause_trading';
if (this.hedgehogStrategy) {
    await this.hedgehogStrategy.stop();
    return '‚è∏Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
}
return '‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞';
'emergency_stop';
if (this.hedgehogStrategy) {
    await this.hedgehogStrategy.stop();
    return 'üö® –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞';
}
return '‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞';
return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞';
try { }
catch (error) {
    this.logger.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã:', error);
    return `‚ùå –û—à–∏–±–∫–∞: ${error}`;
}
setupEventHandlers();
void {
    // –°–æ–±—ã—Ç–∏—è WebSocket
    this: .wsClient.on('connected', () => {
        this.logger.info('üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }),
    this: .wsClient.on('disconnected', () => {
        this.logger.warn('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    }),
    this: .wsClient.on('error', (error) => {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
    }),
    this: .wsClient.on('bookTicker', (data) => {
        const midPrice = (data.bidPrice + data.askPrice) / 2;
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å ATR
        const mockATR = midPrice * 0.001; // –ú–æ–∫ ATR –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        this.hedgehogStrategy.updateMarketData(midPrice, mockATR);
    }),
    this: .wsClient.on('trade', (trade) => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤
        this.regimeDetector.updateTrade(trade.price, trade.quantity, !trade.buyer);
    }),
    // –°–æ–±—ã—Ç–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤
    this: .regimeDetector.on('regimeChange', (data) => {
        this.logger.info('üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞', {
            previous: data.previous,
            current: data.current,
            confidence: data.data.confidence
        });
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        const regimeParams = this.regimeDetector.getRegimeParameters();
        this.hedgehogStrategy.updateRegimeParameters(data.current, regimeParams);
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram
        if (this.telegramBot) {
            this.telegramBot.notifyRegimeChange(data.previous, data.current, data.data.confidence);
        }
    }),
    // –°–æ–±—ã—Ç–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    this: .hedgehogStrategy.on('started', () => {
        this.logger.info('üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Å—Ä—à–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞');
    }),
    this: .hedgehogStrategy.on('stopped', () => {
        this.logger.info('‚èπÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Å—Ä—à–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }),
    this: .hedgehogStrategy.on('fill', (fill) => {
        this.logger.info('üí∞ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞', {
            side: fill.side,
            price: fill.price,
            quantity: fill.quantity,
            symbol: fill.symbol
        });
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram
        if (this.telegramBot) {
            this.telegramBot.notifyTrade(fill);
        }
    }),
    this: .hedgehogStrategy.on('error', (error) => {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error);
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram
        if (this.telegramBot) {
            this.telegramBot.notifyError(error, 'Hedgehog Strategy');
        }
    })
};
async;
connectWebSocket();
Promise < void  > {
    try: {
        await, this: .wsClient.connect(),
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        this: .wsClient.subscribeBookTicker(this.config.symbol),
        this: .wsClient.subscribeTrades(this.config.symbol),
        this: .logger.info('‚úÖ WebSocket –ø–æ—Ç–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã')
    }, catch(error) {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
        throw error;
    }
};
async;
healthCheck();
Promise < void  > {
    try: {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º REST API
        const: pingResult = await this.restClient.ping(),
        if(, pingResult) {
            throw new Error('REST API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        ,
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        const: accountInfo = await this.restClient.getAccountInfo(),
        if(, accountInfo) { }, : .canTrade
    }
};
{
    throw new Error('–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é');
}
this.logger.info('‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω', {
    canTrade: accountInfo.canTrade,
    balancesCount: accountInfo.balances.length
});
try { }
catch (error) {
    this.logger.error('‚ùå Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error);
    throw error;
}
setupShutdownHandlers();
void {
    const: shutdown = async (signal) => {
        if (this.shutdownInProgress) {
            return;
        }
        this.shutdownInProgress = true;
        this.logger.info(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –Ω–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`);
        try {
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            if (this.telegramBot) {
                await this.telegramBot.notifySystem('–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', '‚èπÔ∏è MEXC Scalp Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if (this.hedgehogStrategy) {
                await this.hedgehogStrategy.stop();
            }
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
            if (this.telegramBot) {
                await this.telegramBot.stop();
            }
            // –û—Ç–∫–ª—é—á–∞–µ–º WebSocket
            if (this.wsClient) {
                this.wsClient.disconnect();
            }
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const db = (0, db_1.getDatabase)();
            await db.disconnect();
            this.logger.info('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            process.exit(0);
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error);
            process.exit(1);
        }
    },
    process, : .on('SIGINT', () => shutdown('SIGINT')),
    process, : .on('SIGTERM', () => shutdown('SIGTERM')),
    process, : .on('uncaughtException', (error) => {
        this.logger.fatal('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
        shutdown('uncaughtException');
    }),
    process, : .on('unhandledRejection', (reason) => {
        this.logger.fatal('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π rejection:', reason);
        shutdown('unhandledRejection');
    })
};
/**
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
 */
async;
start();
Promise < void  > {
    try: {
        this: .logger.info('üöÄ –ó–∞–ø—É—Å–∫ MEXC Scalp Bot...'),
        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        this: .loadConfig(),
        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await, initDatabase(process) { }, : .env.DATABASE_PATH,
        this: .logger.info('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'),
        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç—ã
        this: .initClients(),
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        await, this: .healthCheck(),
        // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        await, this: .loadInstrumentInfo(),
        // 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this: .initTradingComponents(),
        // 7. –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket
        await, this: .connectWebSocket(),
        // 8. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this: .setupShutdownHandlers(),
        : .telegramBot
    }
};
{
    await this.telegramBot.start();
}
// 10. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
await this.hedgehogStrategy.start();
this.isRunning = true;
this.logger.info('üéâ MEXC Scalp Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram –æ –∑–∞–ø—É—Å–∫–µ
if (this.telegramBot) {
    await this.telegramBot.notifySystem('–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞', 'üöÄ MEXC Scalp Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!');
}
// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
this.startStatsLogger();
try { }
catch (error) {
    this.logger.fatal('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
    process.exit(1);
}
startStatsLogger();
void {
    setInterval() { }
}();
{
    if (this.isRunning && this.hedgehogStrategy) {
        const stats = this.hedgehogStrategy.getStats();
        const regimeData = this.regimeDetector.getLastRegimeData();
        this.logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã', {
            regime: regimeData?.regime || 'unknown',
            confidence: regimeData?.confidence || 0,
            activeLevels: stats.activeLevels,
            activeTPs: stats.activeTakeProfits,
            inventory: stats.currentInventory,
            inventoryNotional: stats.inventoryNotional,
            midPrice: stats.midPrice
        });
    }
}
30000;
; // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
if (require.main === module) {
    const bot = new MexcScalpBot();
    bot.start().catch((error) => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}
//# sourceMappingURL=index.js.map