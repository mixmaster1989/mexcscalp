require('dotenv').config();
const { MexcRestClient } = require('./dist/infra/mexcRest');

console.log('üí∞ –ü–û–ö–£–ü–ö–ê ETH –ù–ê 50 USDC...\n');

const client = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);

async function buyETH() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
    console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê:');
    const account = await client.getAccountInfo();
    const usdc = account.balances.find(b => b.asset === 'USDC');
    const eth = account.balances.find(b => b.asset === 'ETH');
    
    console.log('   üíµ USDC —Å–≤–æ–±–æ–¥–Ω–æ:', usdc?.free || 0);
    console.log('   ü™ô ETH —Å–≤–æ–±–æ–¥–Ω–æ:', eth?.free || 0);
    
    if (parseFloat(usdc?.free || '0') < 50) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH
    console.log('\n2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –¶–ï–ù–´:');
    const price = await client.getPrice('ETH/USDC');
    console.log('   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH:', price.toFixed(2), 'USDC');
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ step size 0.0001
    const usdcAmount = 50;
    const stepSize = 0.0001; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π step size –¥–ª—è ETH –Ω–∞ MEXC
    const ethQuantity = Math.floor((usdcAmount / price) / stepSize) * stepSize;
    console.log('   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', ethQuantity.toFixed(6));
    console.log('   üìè Step size:', stepSize);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    const buyPrice = Math.ceil(price * 1.001 * 100) / 100; // +0.1% –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
    console.log('   üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:', buyPrice.toFixed(2), 'USDC (+0.1%)');
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
    console.log('\n3Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –û–†–î–ï–†–ê:');
    console.log('   üü¢ BUY ETH/USDC');
    console.log('   üí∞ –°—É–º–º–∞:', usdcAmount, 'USDC');
    console.log('   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', ethQuantity.toFixed(6), 'ETH');
    console.log('   üéØ –¢–∏–ø: LIMIT (–ª–∏–º–∏—Ç–Ω—ã–π)');
    console.log('   üí∞ –¶–µ–Ω–∞:', buyPrice.toFixed(2), 'USDC');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Ä–µ–∂–∏–º–µ DRY_RUN –ª–∏ –º—ã
    if (process.env.DRY_RUN === 'true') {
      console.log('\n‚ö†Ô∏è DRY_RUN —Ä–µ–∂–∏–º - –æ—Ä–¥–µ—Ä –ù–ï —Å–æ–∑–¥–∞–µ—Ç—Å—è!');
      console.log('   –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DRY_RUN=false');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    const order = await client.placeOrder(
      'ETH/USDC',           // symbol
      'buy',                // side
      'LIMIT',              // type
      ethQuantity,          // quantity
      buyPrice,             // price
      `BUY_ETH_${Date.now()}` // clientOrderId
    );
    
    console.log('\n‚úÖ –û–†–î–ï–† –°–û–ó–î–ê–ù!');
    console.log('   üÜî ID –æ—Ä–¥–µ—Ä–∞:', order.id);
    console.log('   üìä –°—Ç–∞—Ç—É—Å:', order.status);
    console.log('   üí∞ –¶–µ–Ω–∞:', order.price);
    console.log('   üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', order.quantity);
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê:');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const orderStatus = await client.getOrder('ETH/USDC', order.id);
    console.log('   üìä –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞:', orderStatus.status);
    console.log('   üí∞ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ:', orderStatus.filled);
    console.log('   üìà –û—Å—Ç–∞–ª–æ—Å—å:', orderStatus.remaining);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    console.log('\n5Ô∏è‚É£ –ù–û–í–´–ô –ë–ê–õ–ê–ù–°:');
    const newAccount = await client.getAccountInfo();
    const newEth = newAccount.balances.find(b => b.asset === 'ETH');
    const newUsdc = newAccount.balances.find(b => b.asset === 'USDC');
    
    console.log('   ü™ô ETH —Å–≤–æ–±–æ–¥–Ω–æ:', newEth?.free || 0);
    console.log('   üíµ USDC —Å–≤–æ–±–æ–¥–Ω–æ:', newUsdc?.free || 0);
    
    const ethGained = parseFloat(newEth?.free || '0') - parseFloat(eth?.free || '0');
    const usdcSpent = parseFloat(usdc?.free || '0') - parseFloat(newUsdc?.free || '0');
    
    console.log('\nüéØ –ò–¢–û–ì–ò –ü–û–ö–£–ü–ö–ò:');
    console.log('   üü¢ –ü–æ–ª—É—á–µ–Ω–æ ETH:', ethGained.toFixed(6));
    console.log('   üî¥ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ USDC:', usdcSpent.toFixed(2));
    
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å —É —Å–∫–∞–ª—å–ø–µ—Ä–∞ –µ—Å—Ç—å —á–µ–º —Ç–æ—Ä–≥–æ–≤–∞—Ç—å!');
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–ö–£–ü–ö–ò:', error.message);
    
    if (error.message.includes('insufficient')) {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å USDC');
      console.log('2. –£–º–µ–Ω—å—à–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏');
      console.log('3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
    }
  }
}

buyETH(); 