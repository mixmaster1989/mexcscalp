import TelegramBot from 'node-telegram-bot-api';
import { EventEmitter } from 'events';
import pino from 'pino';
import { TradingStats, SystemStatus } from './types';
import { Fill, MarketRegime } from '../core/types';
const { getRandomJoke } = require('../../jokes');

/**
 * –ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ—Å—Ç–æ —à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
 * –¢–µ–ø–µ—Ä—å —Å —à—É—Ç–∫–∞–º–∏ –¥–ª—è –í–∞—Å–µ—á–∫–∞ –∏ –∫–æ–º–∞–Ω–¥–Ω—ã–º —Å—Ç–∏–ª–µ–º "–º—ã"
 */
export class MexcTelegramBot extends EventEmitter {
  private bot: TelegramBot;
  private logger: pino.Logger;
  private groupChatId: number;
  private getTradingStats: () => TradingStats;
  private getSystemStatus: () => SystemStatus;
  private onTradingCommand: (command: string, chatId: number) => Promise<string>;
  
  private isRunning: boolean = false;
  private startTime: number = Date.now();
  private messageCount: number = 0;
  private jokeCount: number = 0;

  constructor(
    token: string,
    groupChatId: number,
    getTradingStats: () => TradingStats,
    getSystemStatus: () => SystemStatus,
    onTradingCommand: (command: string, chatId: number) => Promise<string>,
    logger: pino.Logger
  ) {
    super();
    
    this.logger = logger;
    this.bot = new TelegramBot(token, { polling: true });
    this.groupChatId = groupChatId;
    this.getTradingStats = getTradingStats;
    this.getSystemStatus = getSystemStatus;
    this.onTradingCommand = onTradingCommand;
    
    this.setupEventHandlers();
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
   */
  async start(): Promise<void> {
    try {
      this.isRunning = true;
      this.startTime = Date.now();
      
      this.logger.info('ü§ñ –ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ Telegram –±–æ—Ç–∞');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ –∑–∞–ø—É—Å–∫–µ
      await this.sendMessage('üöÄ *–ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ MEXC Scalp Bot*\n\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!\n\n' + getRandomJoke());
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
   */
  async stop(): Promise<void> {
    try {
      this.isRunning = false;
      
      await this.sendMessage('‚èπÔ∏è *–ú—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ MEXC Scalp Bot*\n\n–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.\n\n' + getRandomJoke());
      await this.bot.stopPolling();
      
      this.logger.info('ü§ñ –ú—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ Telegram –±–æ—Ç–∞');
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞:', error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventHandlers(): void {
    this.bot.on('message', async (msg) => {
      try {
        await this.handleMessage(msg);
      } catch (error) {
        this.logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });

    this.bot.on('error', (error) => {
      this.logger.error('–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
    });

    this.bot.on('polling_error', (error) => {
      this.logger.error('–û—à–∏–±–∫–∞ polling:', error);
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private async handleMessage(msg: TelegramBot.Message): Promise<void> {
    if (!msg.text) return;
    
    const chatId = msg.chat.id;
    const text = msg.text.toLowerCase();
    
    try {
      if (text === '/start') {
        await this.bot.sendMessage(chatId, 'üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã - –∫–æ–º–∞–Ω–¥–∞ MEXC Scalp Bot!\n\n–ú—ã —Ç–æ—Ä–≥—É–µ–º ETH/USDC –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n' + getRandomJoke());
      } else if (text === '/status') {
        await this.handleStatusCommand(chatId);
      } else if (text === '/stats') {
        await this.handleStatsCommand(chatId);
      } else if (text.startsWith('/')) {
        const command = text.substring(1);
        const response = await this.onTradingCommand(command, chatId);
        await this.bot.sendMessage(chatId, response + '\n\n' + getRandomJoke());
      }
    } catch (error) {
      await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç—É—Å–∞
   */
  private async handleStatusCommand(chatId: number): Promise<void> {
    const status = this.getSystemStatus();
    
    const message = `
ü§ñ *–°—Ç–∞—Ç—É—Å –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã*

*–°–∏—Å—Ç–µ–º–∞:* ${this.getStatusIcon(status.systemStatus)} \`${status.systemStatus}\`
*–¢–æ—Ä–≥–æ–≤–ª—è:* ${this.getStatusIcon(status.tradingEnabled ? 'active' : 'stopped')} \`${status.tradingEnabled ? '–í–ö–õ–Æ–ß–ï–ù–ê' : '–û–¢–ö–õ–Æ–ß–ï–ù–ê'}\`
*–ë–∞–ª–∞–Ω—Å:* \$${status.totalBalance.toFixed(2)}
*–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* ${this.formatUptime(Date.now() - this.startTime)}

*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;

    await this.bot.sendMessage(chatId, message + '\n\n' + getRandomJoke());
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private async handleStatsCommand(chatId: number): Promise<void> {
    const stats = this.getTradingStats();
    
    const message = `
üìä *–ù–∞—à–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* \`${stats.totalTrades}\`
*–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö:* \`${stats.profitableTrades}\`
*–£–±—ã—Ç–æ—á–Ω—ã—Ö:* \`${stats.losingTrades}\`
*Win Rate:* \`${stats.winRate.toFixed(1)}%\`
*–û–±—â–∞—è P&L:* \$${stats.totalPnL.toFixed(2)}
*P&L —Å–µ–≥–æ–¥–Ω—è:* \$${stats.dailyPnL.toFixed(2)}
*–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞:* \$${stats.maxDrawdown.toFixed(2)}

*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;

    await this.bot.sendMessage(chatId, message + '\n\n' + getRandomJoke());
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
   */
  async sendMessage(message: string): Promise<void> {
    try {
      this.messageCount++;
      await this.bot.sendMessage(this.groupChatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
   */
  async notifyTrade(fill: Fill): Promise<void> {
    this.jokeCount++;
    const sideIcon = fill.side === 'buy' ? 'üü¢' : 'üî¥';
    const message = `
${sideIcon} *–ú—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ —Å–¥–µ–ª–∫—É ${fill.side.toUpperCase()}*

*–¶–µ–Ω–∞:* \`$${fill.price.toFixed(4)}\`
*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* \`${fill.quantity.toFixed(6)} ETH\`
*–°—É–º–º–∞:* \`$${(fill.price * fill.quantity).toFixed(2)}\`
*–í—Ä–µ–º—è:* ${this.formatTime(fill.timestamp)}
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —à—É—Ç–∫—É –∫–∞–∂–¥—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –í–∞—Å–µ—á–∫–∞
    const joke = this.jokeCount % 3 === 0 ? '\n\n' + getRandomJoke() : '';
    
    await this.sendMessage(message + joke);
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
   */
  async notifyRegimeChange(previous: MarketRegime, current: MarketRegime, confidence: number): Promise<void> {
    const regimeIcons = { quiet: 'üåô', normal: '‚òÄÔ∏è', shock: '‚ö°' };
    
    const message = `
${regimeIcons[current]} *–ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞*

*–ü—Ä–µ–¥—ã–¥—É—â–∏–π:* \`${previous}\` ${regimeIcons[previous]}
*–ù–æ–≤—ã–π:* \`${current}\` ${regimeIcons[current]}
*–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* \`${(confidence * 100).toFixed(1)}%\`
*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;

    await this.sendMessage(message + '\n\n' + getRandomJoke());
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async notifyError(error: Error, context: string): Promise<void> {
    const message = `
‚ùå *–£ –Ω–∞—Å —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞*

*–ö–æ–Ω—Ç–µ–∫—Å—Ç:* \`${context}\`
*–û—à–∏–±–∫–∞:* \`${error.message}\`
*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;

    await this.sendMessage(message + '\n\n' + getRandomJoke());
  }

  /**
   * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async notifyCritical(title: string, text: string): Promise<void> {
    const message = `
üö® *${title}*

${text}

*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;

    await this.sendMessage(message + '\n\n' + getRandomJoke());
  }

  /**
   * –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async notifySystem(title: string, text: string): Promise<void> {
    const message = `
ü§ñ *${title}*

${text}

*–í—Ä–µ–º—è:* ${this.formatTime(Date.now())}
    `;

    await this.sendMessage(message + '\n\n' + getRandomJoke());
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
   */
  private getStatusIcon(status: string): string {
    switch (status) {
      case 'running':
      case 'active':
        return '‚úÖ';
      case 'stopped':
      case 'paused':
        return '‚è∏';
      case 'error':
        return '‚ùå';
      default:
        return '‚ö™';
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
   */
  private formatUptime(uptimeMs: number): string {
    const seconds = Math.floor(uptimeMs / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) {
      return `${days}–¥ ${hours % 24}—á`;
    } else if (hours > 0) {
      return `${hours}—á ${minutes % 60}–º`;
    } else {
      return `${minutes}–º`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
   */
  private formatTime(timestamp: number): string {
    return new Date(timestamp).toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç
   */
  isBotRunning(): boolean {
    return this.isRunning;
  }
}
