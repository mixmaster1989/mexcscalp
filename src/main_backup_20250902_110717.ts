import 'dotenv/config';
import * as Mexc from 'mexc-api-sdk';
import TelegramBot from 'node-telegram-bot-api';
import pino from 'pino';
const { getRandomJoke } = require('../jokes');

class MexcScalper {
  private restClient: any;
  private telegramBot: TelegramBot;
  private logger: pino.Logger;
  private isRunning = false;
  
  // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
  private lastOrders: any[] = [];
  private totalTrades = 0;
  private sessionPnL = 0;
  private lastStatusUpdate = 0;

  constructor() {
    this.restClient = new Mexc.Spot(
      process.env.MEXC_API_KEY!,
      process.env.MEXC_SECRET_KEY!
    );

    this.telegramBot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: true });
    this.logger = pino({ level: 'info' });

    this.setupTelegramHandlers();
  }

  async start(): Promise<void> {
    try {
      this.isRunning = true;
      this.logger.info('üöÄ –ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ MEXC –°–∫–∞–ª—å–ø–µ—Ä');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ä–¥–µ—Ä–∞
      await this.initializeOrders();

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.sendTelegramMessage(
        'üöÄ *–ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ MEXC –°–∫–∞–ª—å–ø–µ—Ä*\n\n' +
        'üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–∞–ª—å–ø–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n' +
        'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥\n' +
        'üîÑ –ê–≤—Ç–æ-—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤\n' +
        '‚ö° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö\n\n' +
        getRandomJoke()
      );

      // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      setInterval(async () => {
        try {
          await this.maintainOrders();
        } catch (error) {
          this.logger.error('–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:', error);
        }
      }, 30000);

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
      throw error;
    }
  }

  async stop(): Promise<void> {
    this.isRunning = false;
    
    const finalReport = 'üõë *–ú—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ MEXC –°–∫–∞–ª—å–ø–µ—Ä*\n\n' +
      'üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n' +
      `‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${this.totalTrades}\n` +
      `‚Ä¢ P&L —Å–µ—Å—Å–∏–∏: $${this.sessionPnL.toFixed(2)}\n` +
      this.getBalanceMessage() + '\n\n' +
      getRandomJoke();
    
    await this.sendTelegramMessage(finalReport);
    this.logger.info('üõë –ú—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ MEXC –°–∫–∞–ª—å–ø–µ—Ä');
  }

  private async initializeOrders(): Promise<void> {
    try {
      const orders = await this.restClient.openOrders('ETHUSDC');
      this.lastOrders = orders;
      this.logger.info(`üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${orders.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤:', error);
    }
  }

  private async maintainOrders(): Promise<void> {
    try {
      const currentOrders = await this.restClient.openOrders('ETHUSDC');
      const currentPrice = await this.restClient.tickerPrice('ETHUSDC');
      const price = parseFloat(currentPrice.price);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const buyOrders = currentOrders.filter((o: any) => o.side === 'BUY').length;
      const sellOrders = currentOrders.filter((o: any) => o.side === 'SELL').length;

      this.logger.info(`üìä –°—Ç–∞—Ç—É—Å: ${buyOrders} buy, ${sellOrders} sell –æ—Ä–¥–µ—Ä–æ–≤`);

      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å: –º–∏–Ω–∏–º—É–º 4 buy –∏ 4 sell –æ—Ä–¥–µ—Ä–∞
      if (buyOrders < 4) {
        await this.placeMissingBuyOrders(currentOrders, price);
      }

      if (sellOrders < 4) {
        await this.placeMissingSellOrders(currentOrders, price);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
      const now = Date.now();
      if (now - this.lastStatusUpdate > 15 * 60 * 1000) {
        await this.sendStatusUpdate(currentOrders);
        this.lastStatusUpdate = now;
      }

      this.lastOrders = currentOrders;

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤:', error);
    }
  }

  private async placeMissingBuyOrders(currentOrders: any[], price: number): Promise<void> {
    const existingBuyOrders = currentOrders.filter((o: any) => o.side === 'BUY');
    const neededBuyOrders = 4 - existingBuyOrders.length;

    if (neededBuyOrders <= 0) return;

    this.logger.info(`üìà –†–∞–∑–º–µ—â–∞—é ${neededBuyOrders} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö buy –æ—Ä–¥–µ—Ä–æ–≤`);

    const offset = 5.70;
    const step = 4.275;

    for (let i = 0; i < neededBuyOrders; i++) {
      const level = existingBuyOrders.length + i;
      const orderPrice = price - offset - (step * level);
      const roundedPrice = Math.round(orderPrice * 100) / 100;
      const qty = 0.000345;

      try {
        const timestamp = Date.now();
        const clientOrderId = `AUTO_BUY_${level}_${timestamp}`;

        await this.restClient.newOrder(
          'ETHUSDC',
          'BUY',
          'LIMIT',
          {
            timeInForce: 'GTC',
            price: roundedPrice.toString(),
            quantity: qty.toString(),
            newClientOrderId: clientOrderId,
          }
        );

        this.logger.info(`‚úÖ Buy –æ—Ä–¥–µ—Ä ${level} —Ä–∞–∑–º–µ—â–µ–Ω: $${roundedPrice}`);

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è buy –æ—Ä–¥–µ—Ä–∞ ${level}:`, error);
      }
    }
  }

  private async placeMissingSellOrders(currentOrders: any[], price: number): Promise<void> {
    const existingSellOrders = currentOrders.filter((o: any) => o.side === 'SELL');
    const neededSellOrders = 4 - existingSellOrders.length;

    if (neededSellOrders <= 0) return;

    this.logger.info(`üìâ –†–∞–∑–º–µ—â–∞—é ${neededSellOrders} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö sell –æ—Ä–¥–µ—Ä–æ–≤`);

    const offset = 5.70;
    const step = 4.275;

    for (let i = 0; i < neededSellOrders; i++) {
      const level = existingSellOrders.length + i;
      const orderPrice = price + offset + (step * level);
      const roundedPrice = Math.round(orderPrice * 100) / 100;
      const qty = 0.000344;

      try {
        const timestamp = Date.now();
        const clientOrderId = `AUTO_SELL_${level}_${timestamp}`;

        await this.restClient.newOrder(
          'ETHUSDC',
          'SELL',
          'LIMIT',
          {
            timeInForce: 'GTC',
            price: roundedPrice.toString(),
            quantity: qty.toString(),
            newClientOrderId: clientOrderId,
          }
        );

        this.logger.info(`‚úÖ Sell –æ—Ä–¥–µ—Ä ${level} —Ä–∞–∑–º–µ—â–µ–Ω: $${roundedPrice}`);

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è sell –æ—Ä–¥–µ—Ä–∞ ${level}:`, error);
      }
    }
  }

  private async sendStatusUpdate(orders: any[]): Promise<void> {
    try {
      const buyOrders = orders.filter((o: any) => o.side === 'BUY').length;
      const sellOrders = orders.filter((o: any) => o.side === 'SELL').length;

      let message = 'üìä *–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–¢–ê–¢–£–°*\n\n';
      message += this.getBalanceMessage() + '\n\n';
      
      message += 'üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:*\n';
      message += `‚Ä¢ üü¢ Buy: ${buyOrders}\n`;
      message += `‚Ä¢ üî¥ Sell: ${sellOrders}\n`;
      message += `‚Ä¢ üìà –í—Å–µ–≥–æ: ${orders.length}\n\n`;
      
      message += 'üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n';
      message += `‚Ä¢ –°–¥–µ–ª–æ–∫: ${this.totalTrades}\n`;
      message += `‚Ä¢ P&L: $${this.sessionPnL.toFixed(2)}\n`;
      
      message += '\nüéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–∞–ª—å–ø–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!\n';
      message += '‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å: —á–µ—Ä–µ–∑ 15 –º–∏–Ω\n\n';
      
      message += getRandomJoke();
      
      await this.sendTelegramMessage(message);
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
  }

  private getBalanceMessage(): string {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–∞–Ω—Å
    return 'üí∞ –ë–∞–ª–∞–Ω—Å: ~90 USDC, ~0.001 ETH';
  }

  private setupTelegramHandlers(): void {
    this.telegramBot.on('message', async (msg) => {
      if (!msg.text) return;

      try {
        if (msg.text === '/start') {
          await this.telegramBot.sendMessage(msg.chat.id, 
            'üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã - –∫–æ–º–∞–Ω–¥–∞ MEXC –°–∫–∞–ª—å–ø–µ—Ä!\n\n' + getRandomJoke());
        } else if (msg.text === '/status') {
          const status = this.isRunning ? '‚úÖ –ó–∞–ø—É—â–µ–Ω (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º)' : '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
          await this.telegramBot.sendMessage(msg.chat.id, 
            `ü§ñ –°—Ç–∞—Ç—É—Å: ${status}\n\n` + getRandomJoke());
        }
      } catch (error) {
        this.logger.error('–û—à–∏–±–∫–∞ Telegram:', error);
      }
    });
  }

  private async sendTelegramMessage(text: string): Promise<void> {
    try {
      await this.telegramBot.sendMessage(
        process.env.TELEGRAM_ADMIN_CHAT_IDS!, 
        text, 
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫
async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ MEXC –°–∫–∞–ª—å–ø–µ—Ä...');
    
    const scalper = new MexcScalper();
    await scalper.start();
    
    console.log('‚úÖ MEXC –°–∫–∞–ª—å–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ú –†–ï–ñ–ò–ú–ï!');
    
    // Graceful shutdown
    process.on('SIGINT', async () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º...');
      await scalper.stop();
      process.exit(0);
    });
    
    process.on('SIGTERM', async () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º...');
      await scalper.stop();
      process.exit(0);
    });
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();
