const WebSocket = require('ws');

console.log('üîç –¢–ï–°–¢ –û–ñ–ò–î–ê–ù–ò–Ø –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•');

const wsUrl = 'wss://wbs-api.mexc.com/ws';
const ws = new WebSocket(wsUrl);

let ackReceived = false;
let dataCount = 0;

ws.on('open', () => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ WebSocket');
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ bookTicker –¥–ª—è ETHUSDT
    const sub = {
        method: 'SUBSCRIPTION',
        params: ['spot@public.aggre.bookTicker.v3.api.pb@100ms@ETHUSDT']
    };
    ws.send(JSON.stringify(sub));
    console.log('üì° –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ bookTicker ETHUSDT');
});

ws.on('message', (data) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, JSON –ª–∏ —ç—Ç–æ (ACK —Å–æ–æ–±—â–µ–Ω–∏—è)
        if (typeof data === 'string' || data instanceof String) {
            const ack = JSON.parse(String(data));
            console.log('üì® ACK —Å–æ–æ–±—â–µ–Ω–∏–µ:', ack);
            if (!ackReceived && ack.code === 0) {
                ackReceived = true;
                console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            }
            return;
        }

        // –≠—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Ä–µ–∞–ª—å–Ω—ã–µ market data
        const buffer = data;
        dataCount++;
        console.log(`üìä –ü–û–õ–£–ß–ï–ù–´ –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï #${dataCount}:`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${buffer.length} –±–∞–π—Ç`);
        console.log(`   Hex: ${buffer.toString('hex').substring(0, 60)}...`);
        console.log(`   UTF8: ${buffer.toString('utf8', 0, Math.min(60, buffer.length))}...`);
        
        // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç MEXC
        if (buffer.length >= 4) {
            const channelLength = buffer.readUInt32LE(0);
            if (buffer.length >= 4 + channelLength) {
                const channel = buffer.toString('utf8', 4, 4 + channelLength);
                const protobufData = buffer.slice(4 + channelLength);
                
                console.log(`   –ö–∞–Ω–∞–ª: ${channel}`);
                console.log(`   –î–∞–Ω–Ω—ã–µ: ${protobufData.length} –±–∞–π—Ç`);
                
                // –ò—â–µ–º —Ü–µ–Ω—ã –≤ protobuf –¥–∞–Ω–Ω—ã—Ö
                const dataStr = protobufData.toString('utf8');
                const prices = dataStr.match(/\d+\.\d+/g);
                if (prices) {
                    console.log(`   –¶–µ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã: ${prices.slice(0, 4).join(', ')}`);
                }
            }
        }
        
        if (dataCount >= 3) {
            console.log('üéâ –ü–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç');
            ws.close();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
});

ws.on('error', (error) => {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error.message);
});

ws.on('close', () => {
    console.log('üîå WebSocket –∑–∞–∫—Ä—ã—Ç');
    process.exit(0);
});

// –¢–∞–π–º–∞—É—Ç –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
    console.log('‚è∞ –¢–∞–π–º–∞—É—Ç! –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
    if (dataCount === 0) {
        console.log('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã');
    }
    ws.close();
}, 30000);
