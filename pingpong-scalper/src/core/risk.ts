import { SessionStats, Config, AccountInfo } from './types';

export class RiskManager {
  private dailyStartBalance = 0;
  private maxDailyDrawdown = 0;
  private apiErrorCount = 0;
  private lastApiErrorTime = 0;
  private killSwitchTriggered = false;

  constructor(private config: Config) {}

  canTrade(sessionStats: SessionStats | null): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!sessionStats) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º kill-switch
    if (this.killSwitchTriggered) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É - —Ç–æ–ª—å–∫–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (this.isDailyDrawdownExceeded(sessionStats)) {
      console.log('üõë –î–Ω–µ–≤–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é');
      this.triggerKillSwitch();
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é —É–±—ã—Ç–∫–æ–≤
    if (sessionStats.consecutiveLosses >= this.config.maxConsecutiveLosses) {
      console.log('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –æ—à–∏–±–∫–∏
    if (this.isApiErrorRateTooHigh()) {
      console.log('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ API –æ—à–∏–±–æ–∫, –ø–∞—É–∑–∞');
      return false;
    }

    return true;
  }

  private isDailyDrawdownExceeded(sessionStats: SessionStats): boolean {
    if (typeof sessionStats.dailyDrawdown !== 'number' || !isFinite(sessionStats.dailyDrawdown)) {
      return false;
    }

    // –¢–æ–ª—å–∫–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–æ—Å–∞–¥–∫–æ–π
    if (sessionStats.dailyDrawdown >= 0) {
      return false;
    }

    const currentDrawdown = Math.abs(sessionStats.dailyDrawdown);
    return currentDrawdown >= this.config.stopDayPercent;
  }

  private isApiErrorRateTooHigh(): boolean {
    const now = Date.now();
    const timeWindow = 60000; // 1 –º–∏–Ω—É—Ç–∞
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
    if (now - this.lastApiErrorTime > timeWindow) {
      this.apiErrorCount = 0;
    }
    
    return this.apiErrorCount > 10; // –ë–æ–ª–µ–µ 10 –æ—à–∏–±–æ–∫ –≤ –º–∏–Ω—É—Ç—É
  }

  recordApiError(): void {
    this.apiErrorCount++;
    this.lastApiErrorTime = Date.now();
    
    if (this.apiErrorCount > 20) {
      console.log('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ API –æ—à–∏–±–æ–∫, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º kill-switch');
      this.triggerKillSwitch();
    }
  }

  triggerKillSwitch(): void {
    this.killSwitchTriggered = true;
    console.log('üö® KILL-SWITCH –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!');
  }

  resetKillSwitch(): void {
    this.killSwitchTriggered = false;
    this.apiErrorCount = 0;
    console.log('‚úÖ Kill-switch —Å–±—Ä–æ—à–µ–Ω');
  }

  updateDailyStats(accountInfo: AccountInfo, initialBalance: number): void {
    if (!accountInfo || !accountInfo.balances) {
      return;
    }

    const currentBalance = this.calculateTotalBalance(accountInfo);
    if (initialBalance > 0 && isFinite(currentBalance) && isFinite(initialBalance)) {
      const drawdown = (initialBalance - currentBalance) / initialBalance * 100;
      this.maxDailyDrawdown = Math.max(this.maxDailyDrawdown, drawdown);
    }
  }

  private calculateTotalBalance(accountInfo: AccountInfo): number {
    if (!accountInfo || !accountInfo.balances) {
      return 0;
    }

    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç - —Ç–æ–ª—å–∫–æ USDC –±–∞–ª–∞–Ω—Å
    const usdcBalance = accountInfo.balances.find(b => b.asset === 'USDC');
    if (!usdcBalance || !usdcBalance.free) {
      return 0;
    }

    const balance = parseFloat(usdcBalance.free);
    return isFinite(balance) ? balance : 0;
  }

  getMaxDailyDrawdown(): number {
    return this.maxDailyDrawdown;
  }

  isKillSwitchActive(): boolean {
    return this.killSwitchTriggered;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  canOpenNewPosition(
    accountInfo: AccountInfo,
    currentEthBalance: number,
    ethPrice: number
  ): boolean {
    if (!accountInfo || !isFinite(currentEthBalance) || !isFinite(ethPrice)) {
      return false;
    }

    const totalValue = this.calculateTotalBalance(accountInfo);
    const maxLongValue = totalValue * (this.config.maxLongQtyPercent / 100);
    const currentLongValue = currentEthBalance * ethPrice;
    
    return currentLongValue < maxLongValue;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
  calculateMaxOrderSize(
    accountInfo: AccountInfo,
    ethPrice: number
  ): number {
    if (!accountInfo || !isFinite(ethPrice) || ethPrice <= 0) {
      return 0;
    }

    const totalValue = this.calculateTotalBalance(accountInfo);
    const maxOrderValue = totalValue * 0.1; // –ú–∞–∫—Å–∏–º—É–º 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ–¥–∏–Ω –æ—Ä–¥–µ—Ä
    
    return maxOrderValue / ethPrice;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
  isSpreadAcceptable(spread: number, mid: number): boolean {
    if (!isFinite(spread) || !isFinite(mid) || mid <= 0) {
      return false;
    }

    const spreadPercent = (spread / mid) * 100;
    return spreadPercent >= 0.01; // –ú–∏–Ω–∏–º—É–º 0.01% —Å–ø—Ä–µ–¥
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
  isVolatilityAcceptable(sigma1s: number): boolean {
    if (!isFinite(sigma1s)) {
      return false;
    }

    return sigma1s >= 0.0001 && sigma1s <= 0.01; // –û—Ç 0.01% –¥–æ 1%
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
  isLiquiditySufficient(bidQty: number, askQty: number, orderSize: number): boolean {
    if (!isFinite(bidQty) || !isFinite(askQty) || !isFinite(orderSize)) {
      return false;
    }

    const minLiquidity = orderSize * 2; // –ú–∏–Ω–∏–º—É–º –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –Ω–∞—à–µ–≥–æ –æ—Ä–¥–µ—Ä–∞
    return bidQty >= minLiquidity && askQty >= minLiquidity;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
  calculatePositionLimit(accountInfo: AccountInfo): number {
    if (!accountInfo) {
      return 0;
    }

    const totalValue = this.calculateTotalBalance(accountInfo);
    return totalValue * (this.config.maxLongQtyPercent / 100);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  isTradingTimeAllowed(): boolean {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏–ª–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—ã
    return true;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞
  isMarketConditionSuitable(
    spread: number,
    mid: number,
    sigma1s: number,
    bidQty: number,
    askQty: number,
    orderSize: number
  ): boolean {
    return (
      this.isSpreadAcceptable(spread, mid) &&
      this.isVolatilityAcceptable(sigma1s) &&
      this.isLiquiditySufficient(bidQty, askQty, orderSize) &&
      this.isTradingTimeAllowed()
    );
  }
}
