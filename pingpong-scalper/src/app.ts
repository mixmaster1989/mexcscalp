import 'dotenv/config';
import TelegramBot from "node-telegram-bot-api";
import { MexcRestClient } from './exchanges/mexcRest';
import { MexcWebSocketClient } from './exchanges/mexcWebSocket';
import { PingPongEngine } from './core/engine';
import { MicroStatsCalculator } from './core/alpha';
import { RiskManager } from './core/risk';
import { Config } from './core/types';
import * as fs from 'fs';
import * as path from 'path';

export class PingPongScalper {
  private restClient: MexcRestClient;
  private wsClient: MexcWebSocketClient;
  private engine: PingPongEngine;
  private statsCalculator: MicroStatsCalculator;
  private riskManager: RiskManager;
  private config: Config;
  private isRunning = false;

  constructor() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    this.config = this.loadConfig();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.restClient = new MexcRestClient(
      process.env.MEXC_API_KEY!,
      process.env.MEXC_SECRET_KEY!
    );
    
    this.wsClient = new MexcWebSocketClient(this.config.symbol);
    this.statsCalculator = new MicroStatsCalculator();
    this.riskManager = new RiskManager(this.config);
    
    this.engine = new PingPongEngine(
      this.config,
      this.wsClient,
      this.restClient,
      this.statsCalculator,
      this.riskManager
    );
    
    this.setupEventHandlers();
  }

  private loadConfig(): Config {
    try {
      const configPath = path.join(__dirname, '../config/default.json');
      const configData = fs.readFileSync(configPath, 'utf8');
      const config = JSON.parse(configData);
      
      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      if (process.env.SYMBOL) config.symbol = process.env.SYMBOL;
      if (process.env.ORDER_NOTIONAL) config.orderNotional = parseFloat(process.env.ORDER_NOTIONAL);
      if (process.env.MAX_LAYERS) config.maxLayers = parseInt(process.env.MAX_LAYERS, 10);
      if (process.env.DRY_RUN) config.dryRun = process.env.DRY_RUN === 'true';
      
      return config;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error}`);
    }
  }

  private setupEventHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–≤–∏–∂–∫–∞
    this.engine.on('started', () => {
      console.log('üöÄ Ping-Pong —Å–∫–∞–ª—å–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    });

    this.engine.on('stopped', () => {
      console.log('üõë Ping-Pong —Å–∫–∞–ª—å–ø–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    });

    this.engine.on('microStats', (stats) => {
      console.log('üìä –ú–∏–∫—Ä–æ-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
        mid: stats.mid.toFixed(2),
        spread: stats.spread.toFixed(4),
        s: stats.s.toFixed(4),
        tp: stats.tp.toFixed(4),
        sl: stats.sl.toFixed(4)
      });
    });

    this.engine.on('trade', (trade) => {
      console.log('üí∞ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞:', {
        symbol: trade.symbol,
        side: trade.side,
        price: trade.price.toFixed(2),
        qty: trade.qty.toFixed(6)
      });
    });

    this.engine.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–≤–∏–∂–∫–∞:', error.message);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    process.on('SIGINT', () => {
      console.log('üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
      this.stop();
    });

    process.on('SIGTERM', () => {
      console.log('üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
      this.stop();
    });

    process.on('uncaughtException', (error) => {
      console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
      this.stop();
      process.exit(1);
    });

    process.on('unhandledRejection', (reason) => {
      console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
      this.stop();
      process.exit(1);
    });
  }

  async start(): Promise<void> {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –°–∫–∞–ª—å–ø–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    try {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ping-Pong —Å–∫–∞–ª—å–ø–µ—Ä–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
      const accountInfo = await this.restClient.getAccountInfo();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MEXC API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      console.log('üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞:', accountInfo.balances);
      
      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–û–î–ö–õ–Æ–ß–ê–ï–ú WEBSOCKET!
      console.log('üîå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket...');
      this.wsClient.connect();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫
      await this.engine.start();
      
      this.isRunning = true;
      console.log('üéØ Ping-Pong —Å–∫–∞–ª—å–ø–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
      this.startPeriodicReporting();
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–ª—å–ø–µ—Ä–∞:', error.message);
      throw error;
    }
  }

  async stop(): Promise<void> {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è –°–∫–∞–ª—å–ø–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    try {
      console.log('üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Ping-Pong —Å–∫–∞–ª—å–ø–µ—Ä–∞...');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
      await this.engine.stop();
      
      // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç WebSocket
      this.wsClient.disconnect();
      
      this.isRunning = false;
      console.log('‚úÖ Ping-Pong —Å–∫–∞–ª—å–ø–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      
      // –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.printFinalStats();
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–ª—å–ø–µ—Ä–∞:', error.message);
      throw error;
    }
  }

  private startPeriodicReporting(): void {
    setInterval(() => {
      if (this.isRunning) {
        this.printSessionStats();
      }
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  private printSessionStats(): void {
    const stats = this.engine.getSessionStats();
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:', {
      '–û–±—â–∏–π PnL': `${stats.totalPnL.toFixed(4)} USDC`,
      '–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫': stats.totalTrades,
      '–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö': stats.winningTrades,
      '–£–±—ã—Ç–æ—á–Ω—ã—Ö': stats.losingTrades,
      '–°–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤': stats.consecutiveLosses,
      '–°–¥–µ–ª–æ–∫/–º–∏–Ω': stats.fillsPerMinute.toFixed(1),
      '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': `${stats.avgTradeDuration.toFixed(1)}—Å`,
      '–î–Ω–µ–≤–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞': `${stats.dailyDrawdown.toFixed(2)}%`
    });
  }

  private printFinalStats(): void {
    const stats = this.engine.getSessionStats();
    const runtime = (Date.now() - stats.startTime) / 1000 / 60; // –º–∏–Ω—É—Ç—ã
    
    console.log('üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${runtime.toFixed(1)} –º–∏–Ω—É—Ç`);
    console.log(`üí∞ –û–±—â–∏–π PnL: ${stats.totalPnL.toFixed(4)} USDC`);
    console.log(`ÔøΩÔøΩ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${stats.totalTrades}`);
    console.log(`‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.winningTrades}`);
    console.log(`‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades}`);
    console.log(`üìà Win Rate: ${stats.totalTrades > 0 ? (stats.winningTrades / stats.totalTrades * 100).toFixed(1) : 0}%`);
    console.log(`üî• –°–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤: ${stats.consecutiveLosses}`);
    console.log(`‚ö° –°–¥–µ–ª–æ–∫/–º–∏–Ω: ${stats.fillsPerMinute.toFixed(1)}`);
    console.log(`‚è∞ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${stats.avgTradeDuration.toFixed(1)}—Å`);
    console.log(`üìâ –î–Ω–µ–≤–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: ${stats.dailyDrawdown.toFixed(2)}%`);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function main() {
  const scalper = new PingPongScalper();
  
  try {
    await scalper.start();
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}
