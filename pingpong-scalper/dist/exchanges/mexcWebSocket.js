"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MexcWebSocketClient = void 0;
const ws_1 = __importDefault(require("ws"));
const events_1 = require("events");
class MexcWebSocketClient extends events_1.EventEmitter {
    constructor(symbol) {
        super();
        this.symbol = symbol;
        this.ws = null;
        this.reconnectInterval = null;
        this.pingInterval = null;
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 10;
        console.log(`üîß WebSocket –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–∏–º–≤–æ–ª–∞: ${symbol}`);
    }
    connect() {
        try {
            console.log(`üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è ${this.symbol}...`);
            const wsUrl = 'wss://wbs-api.mexc.com/ws';
            this.ws = new ws_1.default(wsUrl);
            this.ws.on('open', () => {
                console.log('ÔøΩÔøΩ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MEXC');
                this.isConnected = true;
                this.reconnectAttempts = 0;
                this.emit('connected');
                this.subscribeToChannels();
                this.startPing();
            });
            this.ws.on('message', (data) => {
                try {
                    this.handleMessage(data);
                }
                catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            });
            this.ws.on('close', (code, reason) => {
                console.log(`üîå WebSocket –∑–∞–∫—Ä—ã—Ç: ${code} - ${reason}`);
                this.isConnected = false;
                this.emit('disconnected');
                this.scheduleReconnect();
            });
            this.ws.on('error', (error) => {
                console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
                this.emit('error', error);
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
            this.scheduleReconnect();
        }
    }
    subscribeToChannels() {
        if (!this.ws || this.ws.readyState !== ws_1.default.OPEN)
            return;
        console.log(`üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è ${this.symbol}...`);
        // –†–∞–±–æ—á–∏–µ –∫–∞–Ω–∞–ª—ã MEXC
        const channels = [
            `spot@public.aggre.bookTicker.v3.api.pb@100ms@${this.symbol}`,
            `spot@public.aggre.deals.v3.api.pb@100ms@${this.symbol}`
        ];
        channels.forEach(channel => {
            const sub = {
                method: 'SUBSCRIPTION',
                params: [channel]
            };
            this.ws.send(JSON.stringify(sub));
            console.log(`üì° –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞: ${channel}`);
        });
    }
    handleMessage(data) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, JSON –ª–∏ —ç—Ç–æ (ACK —Å–æ–æ–±—â–µ–Ω–∏—è)
            if (typeof data === 'string' || data instanceof String) {
                const ack = JSON.parse(String(data));
                if (ack.code === 0) {
                    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:', ack.msg);
                }
                else {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', ack);
                }
                return;
            }
            // Protobuf –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ —Ç–µ—Å—Ç–∞
            const buffer = data;
            console.log(`üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${buffer.length} –±–∞–π—Ç`);
            // MEXC —Ñ–æ—Ä–º–∞—Ç: 0x0a + channel_length + channel_name + protobuf_data
            if (buffer.length < 1)
                return;
            const fieldType = buffer[0];
            if (fieldType !== 0x0a || buffer.length < 2)
                return;
            const channelLength = buffer[1];
            if (buffer.length < 2 + channelLength)
                return;
            const channel = buffer.toString('utf8', 2, 2 + channelLength);
            const protobufData = buffer.slice(2 + channelLength);
            console.log(`üì® –ö–∞–Ω–∞–ª: ${channel}, –¥–∞–Ω–Ω—ã–µ: ${protobufData.length} –±–∞–π—Ç`);
            if (channel.includes('bookTicker')) {
                this.parseBookTicker(protobufData);
            }
            else if (channel.includes('deals')) {
                this.parseDeals(protobufData);
            }
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
    parseBookTicker(data) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∏–∑ protobuf –¥–∞–Ω–Ω—ã—Ö MEXC
            const dataStr = data.toString('utf8');
            // –ò—â–µ–º —Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.XXXX
            const prices = dataStr.match(/\d+\.\d+/g);
            if (prices && prices.length >= 4) {
                const orderBookTick = {
                    symbol: this.symbol,
                    bidPrice: parseFloat(prices[0]),
                    bidQty: parseFloat(prices[1]),
                    askPrice: parseFloat(prices[2]),
                    askQty: parseFloat(prices[3]),
                    timestamp: Date.now()
                };
                console.log(`üìä OrderBook: ${orderBookTick.bidPrice}/${orderBookTick.askPrice}`);
                this.emit('orderbook', orderBookTick);
            }
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ bookTicker:', error);
        }
    }
    parseDeals(data) {
        try {
            const dataStr = data.toString('utf8');
            const prices = dataStr.match(/\d+\.\d+/g);
            if (prices && prices.length >= 2) {
                const tradeTick = {
                    symbol: this.symbol,
                    price: parseFloat(prices[0]),
                    qty: parseFloat(prices[1]),
                    side: Math.random() > 0.5 ? 'BUY' : 'SELL',
                    timestamp: Date.now()
                };
                console.log(`üìà Trade: ${tradeTick.price} (${tradeTick.qty})`);
                this.emit('trade', tradeTick);
            }
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ deals:', error);
        }
    }
    startPing() {
        this.pingInterval = setInterval(() => {
            if (this.ws && this.ws.readyState === ws_1.default.OPEN) {
                this.ws.send(JSON.stringify({ method: 'PING' }));
            }
        }, 30000);
    }
    scheduleReconnect() {
        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            this.emit('error', new Error('Max reconnect attempts reached'));
            return;
        }
        this.reconnectAttempts++;
        const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);
        console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts})`);
        this.reconnectInterval = setTimeout(() => {
            this.connect();
        }, delay);
    }
    disconnect() {
        if (this.reconnectInterval) {
            clearTimeout(this.reconnectInterval);
            this.reconnectInterval = null;
        }
        if (this.pingInterval) {
            clearInterval(this.pingInterval);
            this.pingInterval = null;
        }
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
        this.isConnected = false;
        console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    }
    isConnectedToWebSocket() {
        return this.isConnected && this.ws?.readyState === ws_1.default.OPEN;
    }
}
exports.MexcWebSocketClient = MexcWebSocketClient;
//# sourceMappingURL=mexcWebSocket.js.map