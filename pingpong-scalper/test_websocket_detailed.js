const WebSocket = require('ws');

console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ WEBSOCKET –ü–ê–†–°–ò–ù–ì–ê');

const wsUrl = 'wss://wbs-api.mexc.com/ws';
const ws = new WebSocket(wsUrl);

ws.on('open', () => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ WebSocket');
    
    const sub = {
        method: 'SUBSCRIPTION',
        params: ['spot@public.aggre.bookTicker.v3.api.pb@100ms@ETHUSDT']
    };
    ws.send(JSON.stringify(sub));
    console.log('üì° –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ bookTicker ETHUSDT');
});

ws.on('message', (data) => {
    try {
        // JSON ACK —Å–æ–æ–±—â–µ–Ω–∏—è
        if (typeof data === 'string' || data instanceof String) {
            const ack = JSON.parse(String(data));
            console.log('üì® ACK:', ack);
            return;
        }

        // Protobuf –¥–∞–Ω–Ω—ã–µ
        const buffer = data;
        console.log(`\nüìä –ê–ù–ê–õ–ò–ó PROTOBUF –î–ê–ù–ù–´–• (${buffer.length} –±–∞–π—Ç):`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        console.log(`   –ü–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç (hex): ${buffer.toString('hex', 0, 20)}`);
        console.log(`   –ü–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç (dec): ${Array.from(buffer.slice(0, 20)).join(' ')}`);
        
        // –ü–∞—Ä—Å–∏–º –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É MEXC
        if (buffer.length >= 1) {
            // –ü–µ—Ä–≤—ã–π –±–∞–π—Ç - —Ç–∏–ø –ø–æ–ª—è protobuf (–æ–±—ã—á–Ω–æ 0x0a –¥–ª—è —Å—Ç—Ä–æ–∫–∏)
            const fieldType = buffer[0];
            console.log(`   Field type: 0x${fieldType.toString(16)}`);
            
            if (fieldType === 0x0a && buffer.length >= 2) {
                // –í—Ç–æ—Ä–æ–π –±–∞–π—Ç - –¥–ª–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞
                const channelLength = buffer[1];
                console.log(`   Channel length: ${channelLength}`);
                
                if (buffer.length >= 2 + channelLength) {
                    const channel = buffer.toString('utf8', 2, 2 + channelLength);
                    console.log(`   Channel: ${channel}`);
                    
                    const protobufData = buffer.slice(2 + channelLength);
                    console.log(`   Market data: ${protobufData.length} –±–∞–π—Ç`);
                    
                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º market data
                    if (protobufData.length > 0) {
                        console.log(`   Market data hex: ${protobufData.toString('hex', 0, Math.min(40, protobufData.length))}`);
                        
                        // –ò—â–µ–º —Å–∏–º–≤–æ–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                        const symbolMatch = protobufData.toString('utf8').match(/ETH\w+/);
                        if (symbolMatch) {
                            console.log(`   Symbol found: ${symbolMatch[0]}`);
                        }
                        
                        // –ò—â–µ–º —Ü–µ–Ω—ã (—á–∏—Å–ª–∞ —Å —Ç–æ—á–∫–æ–π)
                        const dataStr = protobufData.toString('utf8');
                        const prices = dataStr.match(/\d+\.\d+/g);
                        if (prices) {
                            console.log(`   Prices found: ${prices.slice(0, 6).join(', ')}`);
                            
                            if (prices.length >= 4) {
                                console.log(`   üìä PARSED TICKER:`);
                                console.log(`      BID: ${prices[0]} (${prices[1]})`);
                                console.log(`      ASK: ${prices[2]} (${prices[3]})`);
                                console.log(`      SPREAD: ${(parseFloat(prices[2]) - parseFloat(prices[0])).toFixed(2)}`);
                            }
                        }
                    }
                }
            }
        }
        
        // –û—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ø–æ—Å–ª–µ 2 market data –ø–∞–∫–µ—Ç–æ–≤
        if (buffer.length > 80) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ ACK –ø–∞–∫–µ—Ç—ã
            setTimeout(() => {
                console.log('üõë –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑');
                ws.close();
            }, 2000);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
});

ws.on('close', () => {
    console.log('üîå WebSocket –∑–∞–∫—Ä—ã—Ç');
    process.exit(0);
});

setTimeout(() => {
    console.log('‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞');
    ws.close();
}, 15000);
