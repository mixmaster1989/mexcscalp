#!/usr/bin/env node
require('dotenv').config();
const { MexcRestClient } = require('./dist/infra/mexcRest');
const TelegramBot = require('node-telegram-bot-api');
const pino = require('pino');

console.log('üöÄ –†–ï–ê–õ–¨–ù–´–ô –°–ö–ê–õ–¨–ü–ï–† - –õ–µ—Å–µ–Ω–∫–∞ + –Å—Ä—à–∏–∫–∏\n');

class RealScalper {
  constructor() {
    this.restClient = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);
    this.telegramBot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.logger = pino({ level: 'info' });
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    this.orderLogger = pino({
      level: 'info',
      transport: {
        target: 'pino/file',
        options: { destination: './logs/orders.log' }
      }
    });
    
    this.errorLogger = pino({
      level: 'error',
      transport: {
        target: 'pino/file',
        options: { destination: './logs/errors.log' }
      }
    });
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    this.config = {
      symbol: 'ETHUSDC',
      deposit_usd: 100,
      mode: 'hedgehog', // 'ladder' –∏–ª–∏ 'hedgehog'
      
      // –õ–µ—Å–µ–Ω–∫–∞
      ladder: {
        levels: 7,
        k_step: 0.8,
        tp_pct: 0.12,
        geometry_r: 1.2,
        z_max: 3
      },
      
      // –Å—Ä—à–∏–∫–∏
      hedgehog: {
        levels: 5,
        offset_k: 0.5,
        step_k: 0.6,
        tp_pct: 0.10,
        max_direction_usd: 20,
        order_size_usd: 5
      },
      
      // –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
      risk: {
        max_notional_per_symbol: 50, // 50% –æ—Ç –¥–µ–ø–æ
        max_drawdown_pct: 5,
        max_consecutive_losses: 3,
        emergency_stop_atr_multiplier: 2
      },
      
      // –¢–∞–π–º–∏–Ω–≥–∏
      timing: {
        main_loop_interval_ms: 5000,
        reprice_interval_ms: 30000,
        status_update_interval_ms: 900000,
        order_ttl_ms: 300000, // 5 –º–∏–Ω—É—Ç
        max_distance_atr_multiplier: 1
      }
    };
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    this.state = 'QUOTING';
    this.isRunning = false;
    this.activeOrders = new Map();
    this.takeProfitOrders = new Map();
    this.inventory = 0;
    this.inventoryNotional = 0;
    this.consecutiveLosses = 0;
    this.totalPnL = 0;
    this.lastStatusUpdate = 0;
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    this.indicators = {
      vwap_1h: 0,
      atr_1m: 0,
      atr_5m: 0,
      ema_20: 0,
      ema_50: 0,
      midPrice: 0
    };
    
    // –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    this.priceHistory = [];
    this.tradeHistory = [];
  }

  async start() {
    try {
      this.isRunning = true;
      this.logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–ª—å–ø–µ—Ä–∞');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      await this.initializeIndicators();
      await this.cancelAllOrders();
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await this.sendTelegramMessage(
        `üöÄ *–†–ï–ê–õ–¨–ù–´–ô –°–ö–ê–õ–¨–ü–ï–† –ó–ê–ü–£–©–ï–ù*\n\n` +
        `üìä –†–µ–∂–∏–º: ${this.config.mode === 'ladder' ? '–õ–µ—Å–µ–Ω–∫–∞' : '–Å—Ä—à–∏–∫–∏'}\n` +
        `üí∞ –î–µ–ø–æ–∑–∏—Ç: ${this.config.deposit_usd} USDC\n` +
        `üéØ –ü–∞—Ä–∞: ${this.config.symbol}\n\n` +
        `‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–∞–ª—å–ø–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!`
      );
      
      // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
      setInterval(async () => {
        try {
          await this.mainLoop();
        } catch (error) {
          this.errorLogger.error('–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:', error);
        }
      }, 5000); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
      throw error;
    }
  }

  async mainLoop() {
    if (!this.isRunning) return;
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await this.updateMarketData();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
      if (!this.passRiskChecks()) {
        await this.emergencyStop();
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
      await this.processFills();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
      if (this.config.mode === 'ladder') {
        this.logger.info('üîÑ –†–µ–∂–∏–º: –õ–µ—Å–µ–Ω–∫–∞');
        await this.updateLadderOrders();
      } else {
        this.logger.info('üîÑ –†–µ–∂–∏–º: –Å—Ä—à–∏–∫–∏');
        await this.updateHedgehogOrders();
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
      this.logStatus();
      
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
      const now = Date.now();
      if (now - this.lastStatusUpdate > 15 * 60 * 1000) {
        await this.sendPeriodicStatus();
        this.lastStatusUpdate = now;
      }
      
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:', error);
    }
  }

  async updateMarketData() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
      const ticker = await this.restClient.getBookTicker(this.config.symbol);
      this.indicators.midPrice = (parseFloat(ticker.bidPrice) + parseFloat(ticker.askPrice)) / 2;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
      const trades = await this.restClient.getMyTrades(this.config.symbol, 100);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
      this.updatePriceHistory();
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      await this.calculateIndicators();
      
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  updatePriceHistory() {
    const now = Date.now();
    this.priceHistory.push({
      price: this.indicators.midPrice,
      timestamp: now,
      volume: 0.001 // –ó–∞–≥–ª—É—à–∫–∞
    });
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const oneHourAgo = now - 60 * 60 * 1000;
    this.priceHistory = this.priceHistory.filter(p => p.timestamp > oneHourAgo);
  }

  async calculateIndicators() {
    if (this.priceHistory.length < 20) return;
    
    // VWAP –∑–∞ 1 —á–∞—Å
    let totalVolume = 0;
    let totalVolumePrice = 0;
    
    this.priceHistory.forEach(p => {
      totalVolume += p.volume;
      totalVolumePrice += p.price * p.volume;
    });
    
    this.indicators.vwap_1h = totalVolume > 0 ? totalVolumePrice / totalVolume : this.indicators.midPrice;
    
    // ATR (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    if (this.priceHistory.length >= 2) {
      const recent = this.priceHistory.slice(-20);
      let atrSum = 0;
      
      for (let i = 1; i < recent.length; i++) {
        atrSum += Math.abs(recent[i].price - recent[i-1].price);
      }
      
      this.indicators.atr_1m = atrSum / (recent.length - 1);
      this.indicators.atr_5m = this.indicators.atr_1m * 2; // –£–ø—Ä–æ—â–µ–Ω–∏–µ
    }
    
    // EMA (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    if (this.priceHistory.length >= 50) {
      const recent = this.priceHistory.slice(-50);
      this.indicators.ema_20 = this.calculateEMA(recent.slice(-20), 20);
      this.indicators.ema_50 = this.calculateEMA(recent, 50);
    }
  }

  calculateEMA(prices, period) {
    if (prices.length === 0) return 0;
    
    const multiplier = 2 / (period + 1);
    let ema = prices[0].price;
    
    for (let i = 1; i < prices.length; i++) {
      ema = (prices[i].price * multiplier) + (ema * (1 - multiplier));
    }
    
    return ema;
  }

  async updateLadderOrders() {
    try {
      const center = this.indicators.vwap_1h;
      const atr = this.indicators.atr_1m;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä
      const priceDeviation = Math.abs(this.indicators.midPrice - center);
      if (priceDeviation > this.config.ladder.z_max * this.indicators.atr_5m) {
        this.logger.info('‚è∏Ô∏è –ê–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä: –ø–∞—É–∑–∞ –ø–æ–∫—É–ø–æ–∫');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ä–¥–µ—Ä–∞
      const currentOrders = await this.restClient.getOpenOrders(this.config.symbol);
      
      // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ —É—à–ª–∏ –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—ã
      await this.cancelStaleOrders(center, atr, currentOrders);
      
      const buyOrders = currentOrders.filter(o => o.side === 'buy');
      
      // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ buy –æ—Ä–¥–µ—Ä–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º
      if (buyOrders.length < this.config.ladder.levels) {
        await this.placeLadderBuyOrders(center, atr, buyOrders.length);
      }
      
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ—Å–µ–Ω–∫–∏:', error);
    }
  }

  async placeLadderBuyOrders(center, atr, existingCount) {
    const step = Math.ceil(this.config.ladder.k_step * atr * 100) / 100; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ç–∏–∫–∞
    const needed = this.config.ladder.levels - existingCount;
    
    // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
    const baseSize = (this.config.deposit_usd * 0.1) / center; // 10% –æ—Ç –¥–µ–ø–æ
    const r = this.config.ladder.geometry_r;
    
    for (let i = 0; i < needed; i++) {
      const level = existingCount + i;
      const price = center - (level + 1) * step;
      const size = baseSize * Math.pow(r, level);
      
      if (size < 0.0001) continue; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      
      try {
        const clientOrderId = `LADDER_BUY_${level}_${Date.now()}`;
        
        const order = await this.restClient.placeOrder(
          this.config.symbol,
          'buy',
          'limit',
          size,
          price,
          clientOrderId
        );
        
        this.orderLogger.info(`‚úÖ BUY –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: ${price} x ${size} (ID: ${order.id})`);
        
        this.activeOrders.set(clientOrderId, {
          id: order.id,
          side: 'buy',
          price: price,
          quantity: size,
          level: level,
          type: 'ladder'
        });
        
        this.logger.info(`üìà –õ–µ—Å–µ–Ω–∫–∞ BUY ${level}: ${price} x ${size}`);
        
      } catch (error) {
        this.errorLogger.error(`–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ª–µ—Å–µ–Ω–∫–∏ ${level}:`, error);
      }
    }
  }

  async updateHedgehogOrders() {
    try {
      this.logger.info(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ë—Ä—à–∏–∫–æ–≤... (—Ä–µ–∂–∏–º: ${this.state})`);
      const center = this.indicators.midPrice;
      const atr = this.indicators.atr_1m;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
      if (this.state === 'SELL_ONLY') {
        this.logger.info('üì§ –†–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏" - —Ä–∞–∑–º–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ SELL –æ—Ä–¥–µ—Ä–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (20 USDC –≤ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É)
      const maxDirectionUsd = this.config.hedgehog.max_direction_usd || 20;
      if (this.inventoryNotional > maxDirectionUsd) {
        this.logger.info('‚ö†Ô∏è –õ–∏–º–∏—Ç LONG –ø—Ä–µ–≤—ã—à–µ–Ω, –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BUY –æ—Ä–¥–µ—Ä–∞');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ä–¥–µ—Ä–∞
      const currentOrders = await this.restClient.getOpenOrders(this.config.symbol);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —ë—Ä—à–∏–∫–∏ (–≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤)
      await this.updateHedgehogLevels(center, atr, currentOrders);
      
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ë—Ä—à–∏–∫–æ–≤:', error);
    }
  }

  async cancelStaleOrders(center, atr, currentOrders) {
    try {
      const maxDistance = this.config.timing.max_distance_atr_multiplier * atr;
      const maxAge = this.config.timing.order_ttl_ms;
      const now = Date.now();
      
      for (const order of currentOrders) {
        const orderPrice = parseFloat(order.price);
        const distance = Math.abs(orderPrice - center);
        const age = now - (order.time || order.timestamp || 0);
        
        // –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ:
        // 1. –£—à–ª–∏ –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (> 3 ATR)
        // 2. –ò–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ (> 5 –º–∏–Ω—É—Ç)
        if (distance > maxDistance || age > maxAge) {
          try {
            await this.restClient.cancelOrder(this.config.symbol, order.id);
            this.orderLogger.info(`üóëÔ∏è –û—Ç–º–µ–Ω–µ–Ω —Å—Ç–∞—Ä—ã–π –æ—Ä–¥–µ—Ä: ${order.side} ${orderPrice} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(2)}, –≤–æ–∑—Ä–∞—Å—Ç: ${Math.round(age/1000)}—Å)`);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            for (const [key, activeOrder] of this.activeOrders.entries()) {
              if (activeOrder.id === order.id) {
                this.activeOrders.delete(key);
                break;
              }
            }
          } catch (error) {
            this.errorLogger.error(`–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ç–∞—Ä–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ ${order.id}:`, error);
          }
        }
      }
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ç–∞—Ä—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:', error);
    }
  }

  async updateHedgehogLevels(center, atr, currentOrders) {
    const offset = Math.ceil(this.config.hedgehog.offset_k * atr * 100) / 100;
    const step = Math.ceil(this.config.hedgehog.step_k * atr * 100) / 100;
    
    // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ —É—à–ª–∏ –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—ã
    await this.cancelStaleOrders(center, atr, currentOrders);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º skew
    const shouldSkewBuy = this.inventoryNotional < -this.config.deposit_usd * 0.01;
    const shouldSkewSell = this.inventoryNotional > this.config.deposit_usd * 0.01;
    
    // –†–∞–∑–º–µ—â–∞–µ–º buy —É—Ä–æ–≤–Ω–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ "—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏")
    if (!shouldSkewSell && this.state !== 'SELL_ONLY') {
      for (let i = 1; i <= this.config.hedgehog.levels; i++) {
        const price = center - offset - (i - 1) * step;
        const quantity = center > 0 ? this.config.hedgehog.order_size_usd / center : 0.001; // –†–∞–∑–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        
        const clientOrderId = `HEDGEHOG_BUY_${i}_${Date.now()}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –æ—Ä–¥–µ—Ä
        const exists = currentOrders.find(o => 
          o.side === 'buy' && 
          Math.abs(parseFloat(o.price) - price) < 0.01
        );
        
        if (!exists) {
          try {
            const order = await this.restClient.placeOrder(
              this.config.symbol,
              'buy',
              'limit',
              quantity,
              price,
              clientOrderId
            );
            
            this.orderLogger.info(`‚úÖ BUY —ë—Ä—à–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω: ${price} x ${quantity} (ID: ${order.id})`);
            
            this.activeOrders.set(clientOrderId, {
              id: order.id,
              side: 'buy',
              price: price,
              quantity: quantity,
              level: i,
              type: 'hedgehog'
            });
            
            this.logger.info(`üü¢ –Å—Ä—à–∏–∫ BUY ${i}: ${price} x ${quantity}`);
            
          } catch (error) {
            this.errorLogger.error(`–û—à–∏–±–∫–∞ —ë—Ä—à–∏–∫–∞ BUY ${i}:`, error);
          }
        }
      }
    }
    
    // –†–∞–∑–º–µ—â–∞–µ–º sell —É—Ä–æ–≤–Ω–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å ETH –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏)
    if (!shouldSkewBuy && this.inventory > 0) {
      for (let i = 1; i <= this.config.hedgehog.levels; i++) {
        const price = center + offset + (i - 1) * step;
        const quantity = center > 0 ? this.config.hedgehog.order_size_usd / center : 0.001; // –†–∞–∑–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        
        const clientOrderId = `HEDGEHOG_SELL_${i}_${Date.now()}`;
        
        const exists = currentOrders.find(o => 
          o.side === 'sell' && 
          Math.abs(parseFloat(o.price) - price) < 0.01
        );
        
        if (!exists) {
          try {
            const order = await this.restClient.placeOrder(
              this.config.symbol,
              'sell',
              'limit',
              quantity,
              price,
              clientOrderId
            );
            
            this.orderLogger.info(`‚úÖ SELL —ë—Ä—à–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω: ${price} x ${quantity} (ID: ${order.id})`);
            
            this.activeOrders.set(clientOrderId, {
              id: order.id,
              side: 'sell',
              price: price,
              quantity: quantity,
              level: i,
              type: 'hedgehog'
            });
            
            this.logger.info(`üî¥ –Å—Ä—à–∏–∫ SELL ${i}: ${price} x ${quantity}`);
            
          } catch (error) {
            // –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ - –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç ETH –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            this.logger.warn(`‚ö†Ô∏è –ù–µ—Ç ETH –¥–ª—è SELL ${i}: ${error.message}`);
          }
        }
      }
    } else if (!shouldSkewBuy && this.inventory <= 0) {
      this.orderLogger.info('‚ÑπÔ∏è –ù–µ—Ç ETH –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è SELL –æ—Ä–¥–µ—Ä–æ–≤, –∂–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è BUY –æ—Ä–¥–µ—Ä–æ–≤');
    }
  }

  async processFills() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
      const trades = await this.restClient.getMyTrades(this.config.symbol, 10);
      
      for (const trade of trades) {
        const tradeKey = `${trade.id}_${trade.timestamp}`;
        
        if (!this.tradeHistory.includes(tradeKey)) {
          this.tradeHistory.push(tradeKey);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É
          await this.handleFill(trade);
        }
      }
      
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π:', error);
    }
  }

  async handleFill(trade) {
    try {
      this.logger.info(`üí∞ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: ${trade.side} ${trade.price} x ${trade.quantity}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      const inventoryChange = trade.side === 'buy' ? parseFloat(trade.quantity) : -parseFloat(trade.quantity);
      this.inventory += inventoryChange;
      this.inventoryNotional += trade.side === 'buy' ? 
        parseFloat(trade.price) * parseFloat(trade.quantity) : 
        -parseFloat(trade.price) * parseFloat(trade.quantity);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
      await this.sendTradeNotification(trade);
      
      // –°—Ç–∞–≤–∏–º Take Profit
      await this.placeTakeProfit(trade);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å (–¥–ª—è —ë—Ä—à–∏–∫–æ–≤)
      if (this.config.mode === 'hedgehog') {
        await this.replenishLevel(trade);
      }
      
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    }
  }

  async placeTakeProfit(trade) {
    try {
      const tpSide = trade.side === 'buy' ? 'sell' : 'buy';
      const tpPct = this.config.mode === 'ladder' ? 
        this.config.ladder.tp_pct : 
        this.config.hedgehog.tp_pct;
      
      const tpPrice = trade.side === 'buy' ? 
        parseFloat(trade.price) * (1 + tpPct / 100) :
        parseFloat(trade.price) * (1 - tpPct / 100);
      
      const clientOrderId = `TP_${trade.side}_${Date.now()}`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è TP
      const minQuantity = tpPrice > 0 ? this.config.hedgehog.order_size_usd / tpPrice : 0.001;
      
      const tpOrder = await this.restClient.placeOrder(
        this.config.symbol,
        tpSide,
        'limit',
        minQuantity,
        tpPrice,
        clientOrderId
      );
      
      this.orderLogger.info(`üéØ TP –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: ${tpSide} ${tpPrice} x ${minQuantity} (ID: ${tpOrder.id})`);
      
      this.takeProfitOrders.set(clientOrderId, {
        id: tpOrder.id,
        side: tpSide,
        price: tpPrice,
        quantity: minQuantity,
        entryPrice: parseFloat(trade.price),
        originalTrade: trade
      });
      
      this.logger.info(`üéØ TP ${tpSide}: ${tpPrice} x ${minQuantity}`);
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ TP
      await this.sendTPNotification(trade, tpPrice, tpSide);
      
    } catch (error) {
      this.errorLogger.error(`–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è TP: ${error.message || error}`, { error: error.toString() });
    }
  }

  async replenishLevel(trade) {
    try {
      // –î–ª—è —ë—Ä—à–∏–∫–æ–≤ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–∏—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∂–µ
      const center = this.indicators.midPrice;
      const atr = this.indicators.atr_1m;
      const step = Math.ceil(this.config.hedgehog.step_k * atr * 100) / 100;
      
      // –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, —á—Ç–æ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
      const newPrice = trade.side === 'buy' ? 
        parseFloat(trade.price) - step :
        parseFloat(trade.price) + step;
      
      const clientOrderId = `REPLENISH_${trade.side}_${Date.now()}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
      const maxDirectionUsd = this.config.hedgehog.max_direction_usd || 20;
      if (trade.side === 'buy' && this.inventoryNotional > maxDirectionUsd) {
        this.logger.info('‚ö†Ô∏è –õ–∏–º–∏—Ç LONG –ø—Ä–µ–≤—ã—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ BUY');
        return;
      }
      if (trade.side === 'sell' && this.inventoryNotional < -maxDirectionUsd) {
        this.logger.info('‚ö†Ô∏è –õ–∏–º–∏—Ç SHORT –ø—Ä–µ–≤—ã—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ SELL');
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      const minQuantity = newPrice > 0 ? this.config.hedgehog.order_size_usd / newPrice : 0.001;
      
      const order = await this.restClient.placeOrder(
        this.config.symbol,
        trade.side,
        'limit',
        minQuantity,
        newPrice,
        clientOrderId
      );
      
      this.orderLogger.info(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ${trade.side}: ${newPrice} x ${minQuantity} (ID: ${order.id})`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
      this.activeOrders.set(clientOrderId, {
        id: order.id,
        side: trade.side,
        price: newPrice,
        quantity: minQuantity,
        type: 'replenish'
      });
      
      this.logger.info(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ${trade.side}: ${newPrice} x ${minQuantity}`);
      
    } catch (error) {
      this.errorLogger.error(`–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è: ${error.message || error}`, { error: error.toString() });
    }
  }

  passRiskChecks() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏
    if (this.totalPnL < -this.config.deposit_usd * this.config.risk.max_drawdown_pct / 100) {
      this.errorLogger.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É–±—ã—Ç–∫–æ–≤
    if (this.consecutiveLosses >= this.config.risk.max_consecutive_losses) {
      this.errorLogger.error('‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É - –ù–ï –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú, –ê –ü–ï–†–ï–ö–õ–Æ–ß–ê–ï–ú –†–ï–ñ–ò–ú
    const currentNotional = Math.abs(this.inventoryNotional);
    if (currentNotional > this.config.deposit_usd * this.config.risk.max_notional_per_symbol / 100) {
      this.logger.info('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏"');
      this.state = 'SELL_ONLY'; // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂
      return true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ –≤ –¥—Ä—É–≥–æ–º —Ä–µ–∂–∏–º–µ
    }
    
    // –ï—Å–ª–∏ –ª–∏–º–∏—Ç –≤ –Ω–æ—Ä–º–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    if (this.state === 'SELL_ONLY' && currentNotional <= this.config.deposit_usd * this.config.risk.max_notional_per_symbol / 100 * 0.8) {
      this.logger.info('‚úÖ –õ–∏–º–∏—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º');
      this.state = 'QUOTING';
    }
    
    return true;
  }

  async emergencyStop() {
    this.errorLogger.error('üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê');
    
    await this.cancelAllOrders();
    this.isRunning = false;
    
    await this.sendTelegramMessage(
      'üö® *–ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê*\n\n' +
      `üí∞ PnL: ${this.totalPnL.toFixed(2)} USDC\n` +
      `üìä –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${this.inventory.toFixed(6)} ETH\n` +
      `üí∏ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ $: ${this.inventoryNotional.toFixed(2)} USDC\n` +
      `‚ùå –£–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥: ${this.consecutiveLosses}\n\n` +
      '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–µ–ø–æ–∑–∏—Ç–∞!'
    );
  }

  async cancelAllOrders() {
    try {
      const orders = await this.restClient.getOpenOrders(this.config.symbol);
      
      for (const order of orders) {
        try {
          await this.restClient.cancelOrder(this.config.symbol, order.id);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—ã
        }
      }
      
      this.activeOrders.clear();
      this.takeProfitOrders.clear();
      
      this.orderLogger.info('üóëÔ∏è –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã');
      
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤:', error);
    }
  }

  async initializeIndicators() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const ticker = await this.restClient.getBookTicker(this.config.symbol);
    this.indicators.midPrice = (parseFloat(ticker.bidPrice) + parseFloat(ticker.askPrice)) / 2;
    this.indicators.vwap_1h = this.indicators.midPrice;
    this.indicators.atr_1m = this.indicators.midPrice * 0.001; // 0.1% –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    this.indicators.atr_5m = this.indicators.atr_1m * 2;
    
    this.logger.info('üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  }

  logStatus() {
    const status = {
      mode: this.config.mode,
      midPrice: this.indicators.midPrice.toFixed(2),
      vwap: this.indicators.vwap_1h.toFixed(2),
      atr: this.indicators.atr_1m.toFixed(4),
      inventory: this.inventory.toFixed(6),
      inventoryNotional: this.inventoryNotional.toFixed(2),
      activeOrders: this.activeOrders.size,
      takeProfitOrders: this.takeProfitOrders.size,
      totalPnL: this.totalPnL.toFixed(2)
    };
    
    this.logger.info('üìä –°—Ç–∞—Ç—É—Å:', status);
  }

  async sendTelegramMessage(text) {
    try {
      await this.telegramBot.sendMessage(
        process.env.TELEGRAM_ADMIN_CHAT_IDS,
        text,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    }
  }

  async sendTradeNotification(trade) {
    try {
      const side = trade.side === 'buy' ? 'üü¢ –ü–û–ö–£–ü–ö–ê' : 'üî¥ –ü–†–û–î–ê–ñ–ê';
      const notional = (parseFloat(trade.price) * parseFloat(trade.quantity)).toFixed(2);
      const time = new Date().toLocaleTimeString('ru-RU');
      
      const message = 
        `üí∞ *–°–î–ï–õ–ö–ê –ò–°–ü–û–õ–ù–ï–ù–ê*\n\n` +
        `${side}\n` +
        `üíµ –¶–µ–Ω–∞: ${trade.price} USDC\n` +
        `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${trade.quantity} ETH\n` +
        `üí∏ –°—É–º–º–∞: ${notional} USDC\n` +
        `‚è∞ –í—Ä–µ–º—è: ${time}\n\n` +
        `üìà *–°—Ç–∞—Ç—É—Å:*\n` +
        `‚Ä¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${this.inventory.toFixed(6)} ETH\n` +
        `‚Ä¢ –í $: ${this.inventoryNotional.toFixed(2)} USDC\n` +
        `‚Ä¢ –†–µ–∂–∏–º: ${this.config.mode === 'ladder' ? '–õ–µ—Å–µ–Ω–∫–∞' : '–Å—Ä—à–∏–∫–∏'}\n\n` +
        `üéØ TP —Ä–∞–∑–º–µ—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`;

      await this.sendTelegramMessage(message);
      
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ:', error);
    }
  }

  async sendTPNotification(trade, tpPrice, tpSide) {
    try {
      const tpPct = this.config.mode === 'ladder' ? 
        this.config.ladder.tp_pct : 
        this.config.hedgehog.tp_pct;
      
      const expectedProfit = Math.abs(tpPrice - parseFloat(trade.price)) * parseFloat(trade.quantity);
      
      const message = 
        `üéØ *TAKE PROFIT –†–ê–ó–ú–ï–©–ï–ù*\n\n` +
        `üìä ${tpSide.toUpperCase()}: ${tpPrice} USDC\n` +
        `üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: ${expectedProfit.toFixed(4)} USDC\n` +
        `üìä TP: ${tpPct}%\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}`;

      await this.sendTelegramMessage(message);
      
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ TP:', error);
    }
  }

  async sendPeriodicStatus() {
    try {
      const currentOrders = await this.restClient.getOpenOrders(this.config.symbol);
      const buyOrders = currentOrders.filter(o => o.side === 'buy').length;
      const sellOrders = currentOrders.filter(o => o.side === 'sell').length;
      
      const message = 
        `üìä *–ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –°–¢–ê–¢–£–°*\n\n` +
        `üéØ –†–µ–∂–∏–º: ${this.config.mode === 'ladder' ? '–õ–µ—Å–µ–Ω–∫–∞' : '–Å—Ä—à–∏–∫–∏'}\n` +
        `üí∞ –¶–µ–Ω–∞: ${this.indicators.midPrice.toFixed(2)} USDC\n` +
        `üìà VWAP: ${this.indicators.vwap_1h.toFixed(2)} USDC\n` +
        `üìä ATR: ${this.indicators.atr_1m.toFixed(4)} USDC\n\n` +
        `üü¢ Buy –æ—Ä–¥–µ—Ä–æ–≤: ${buyOrders}\n` +
        `üî¥ Sell –æ—Ä–¥–µ—Ä–æ–≤: ${sellOrders}\n` +
        `üìä –í—Å–µ–≥–æ: ${currentOrders.length}\n\n` +
        `üìà *–ü–æ–∑–∏—Ü–∏—è:*\n` +
        `‚Ä¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${this.inventory.toFixed(6)} ETH\n` +
        `‚Ä¢ –í $: ${this.inventoryNotional.toFixed(2)} USDC\n` +
        `‚Ä¢ PnL: ${this.totalPnL.toFixed(2)} USDC\n\n` +
        `‚è∞ ${new Date().toLocaleTimeString('ru-RU')}`;

      await this.sendTelegramMessage(message);
      
    } catch (error) {
      this.errorLogger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
  }

  async stop() {
    this.isRunning = false;
    await this.cancelAllOrders();
    
    await this.sendTelegramMessage(
      'üõë *–°–ö–ê–õ–¨–ü–ï–† –û–°–¢–ê–ù–û–í–õ–ï–ù*\n\n' +
      `üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π PnL: ${this.totalPnL.toFixed(2)} USDC\n` +
      `üìä –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${this.inventory.toFixed(6)} ETH\n` +
      `üí∏ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ $: ${this.inventoryNotional.toFixed(2)} USDC`
    );
    
    this.logger.info('üõë –°–∫–∞–ª—å–ø–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ó–∞–ø—É—Å–∫
async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–ª—å–ø–µ—Ä–∞...');
    
    const scalper = new RealScalper();
    await scalper.start();
    
    console.log('‚úÖ –†–µ–∞–ª—å–Ω—ã–π —Å–∫–∞–ª—å–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω!');
    
    // Graceful shutdown
    process.on('SIGINT', async () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º...');
      await scalper.stop();
      process.exit(0);
    });
    
    process.on('SIGTERM', async () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º...');
      await scalper.stop();
      process.exit(0);
    });
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();
