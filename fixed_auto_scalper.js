require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const pino = require('pino');
const { MexcRestClient } = require('./dist/infra/mexcRest');

class MexcAutoScalper {
  constructor() {
    this.restClient = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);
    this.telegramBot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
    this.logger = pino({ level: 'info' });
    this.isRunning = false;
    this.lastOrders = [];
    this.totalTrades = 0;
    this.sessionPnL = 0;
    this.lastStatusUpdate = 0;
  }

  async start() {
    try {
      this.isRunning = true;
      this.logger.info('üöÄ –ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ MEXC –°–∫–∞–ª—å–ø–µ—Ä');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      await this.initializeOrders();

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await this.sendTelegramMessage(
        'üöÄ *–ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ MEXC –°–∫–∞–ª—å–ø–µ—Ä*\n\n' +
        'üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–∞–ª—å–ø–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n' +
        'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥\n' +
        'üîÑ –ê–≤—Ç–æ-—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤\n' +
        '‚ö° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö\n\n' +
        this.getRandomJoke()
      );

      // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
      setInterval(async () => {
        try {
          await this.maintainOrders();
        } catch (error) {
          this.logger.error('–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:', error);
        }
      }, 30000);

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
      throw error;
    }
  }

  async initializeOrders() {
    try {
      const orders = await this.restClient.getOpenOrders('ETH/USDC');
      this.lastOrders = orders;
      this.logger.info(`üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${orders.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤:', error);
    }
  }

  async maintainOrders() {
    try {
      const currentOrders = await this.restClient.getOpenOrders('ETH/USDC');
      const currentPrice = await this.restClient.getPrice('ETH/USDC');
      const price = parseFloat(currentPrice);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const buyOrders = currentOrders.filter(o => o.side === 'buy').length;
      const sellOrders = currentOrders.filter(o => o.side === 'sell').length;

      this.logger.info(`üìä –°—Ç–∞—Ç—É—Å: ${buyOrders} buy, ${sellOrders} sell –æ—Ä–¥–µ—Ä–æ–≤`);

      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å: –º–∏–Ω–∏–º—É–º 4 buy –∏ 4 sell –æ—Ä–¥–µ—Ä–∞
      if (buyOrders < 4) {
        await this.placeMissingBuyOrders(currentOrders, price);
      }

      if (sellOrders < 4) {
        await this.placeMissingSellOrders(currentOrders, price);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
      const now = Date.now();
      if (now - this.lastStatusUpdate > 15 * 60 * 1000) {
        await this.sendStatusUpdate(currentOrders);
        this.lastStatusUpdate = now;
      }

      this.lastOrders = currentOrders;

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤:', error);
    }
  }

  async placeMissingBuyOrders(currentOrders, price) {
    const existingBuyOrders = currentOrders.filter(o => o.side === 'buy');
    const neededBuyOrders = 4 - existingBuyOrders.length;

    if (neededBuyOrders <= 0) return;

    this.logger.info(`üìà –†–∞–∑–º–µ—â–∞—é ${neededBuyOrders} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö buy –æ—Ä–¥–µ—Ä–æ–≤`);

    const offset = 5.70;
    const step = 4.275;

    for (let i = 0; i < neededBuyOrders; i++) {
      const level = existingBuyOrders.length + i;
      const orderPrice = price - offset - (step * level);
      const roundedPrice = Math.round(orderPrice * 100) / 100;
      const qty = 0.000345;

      try {
        const timestamp = Date.now();
        const clientOrderId = `AUTO_BUY_${level}_${timestamp}`;

        this.logger.info(`üîÑ –†–∞–∑–º–µ—â–∞—é buy –æ—Ä–¥–µ—Ä ${level}: $${roundedPrice} x ${qty}`);

        const result = await this.restClient.placeOrder(
          'ETH/USDC',
          'buy',
          'limit',
          qty,
          roundedPrice,
          clientOrderId
        );

        this.logger.info(`‚úÖ Buy –æ—Ä–¥–µ—Ä ${level} —Ä–∞–∑–º–µ—â–µ–Ω: ${result.id}`);

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è buy –æ—Ä–¥–µ—Ä–∞ ${level}:`, error.message);
        this.logger.error('   –î–µ—Ç–∞–ª–∏:', error.response?.data);
      }
    }
  }

  async placeMissingSellOrders(currentOrders, price) {
    const existingSellOrders = currentOrders.filter(o => o.side === 'sell');
    const neededSellOrders = 4 - existingSellOrders.length;

    if (neededSellOrders <= 0) return;

    this.logger.info(`üìâ –†–∞–∑–º–µ—â–∞—é ${neededSellOrders} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö sell –æ—Ä–¥–µ—Ä–æ–≤`);

    const offset = 5.70;
    const step = 4.275;

    for (let i = 0; i < neededSellOrders; i++) {
      const level = existingSellOrders.length + i;
      const orderPrice = price + offset + (step * level);
      const roundedPrice = Math.round(orderPrice * 100) / 100;
      const qty = 0.000344;

      try {
        const timestamp = Date.now();
        const clientOrderId = `AUTO_SELL_${level}_${timestamp}`;

        this.logger.info(`üîÑ –†–∞–∑–º–µ—â–∞—é sell –æ—Ä–¥–µ—Ä ${level}: $${roundedPrice} x ${qty}`);

        const result = await this.restClient.placeOrder(
          'ETH/USDC',
          'sell',
          'limit',
          qty,
          roundedPrice,
          clientOrderId
        );

        this.logger.info(`‚úÖ Sell –æ—Ä–¥–µ—Ä ${level} —Ä–∞–∑–º–µ—â–µ–Ω: ${result.id}`);

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è sell –æ—Ä–¥–µ—Ä–∞ ${level}:`, error.message);
        this.logger.error('   –î–µ—Ç–∞–ª–∏:', error.response?.data);
      }
    }
  }

  async sendStatusUpdate(orders) {
    try {
      const buyOrders = orders.filter(o => o.side === 'buy').length;
      const sellOrders = orders.filter(o => o.side === 'sell').length;

      let message = 'üìä *–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–¢–ê–¢–£–°*\n\n';
      message += this.getBalanceMessage() + '\n\n';

      message += 'üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:*\n';
      message += `‚Ä¢ üü¢ Buy: ${buyOrders}\n`;
      message += `‚Ä¢ üî¥ Sell: ${sellOrders}\n`;
      message += `‚Ä¢ üìà –í—Å–µ–≥–æ: ${orders.length}\n\n`;

      message += 'üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n';
      message += `‚Ä¢ –°–¥–µ–ª–æ–∫: ${this.totalTrades}\n`;
      message += `‚Ä¢ P&L: $${this.sessionPnL.toFixed(2)}\n`;

      message += '\nüéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–∞–ª—å–ø–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!\n';
      message += '‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å: —á–µ—Ä–µ–∑ 15 –º–∏–Ω\n\n';

      message += this.getRandomJoke();

      await this.sendTelegramMessage(message);

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
  }

  getBalanceMessage() {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–∞–Ω—Å
    return 'üí∞ –ë–∞–ª–∞–Ω—Å: ~90 USDC, ~0.001 ETH';
  }

  getRandomJoke() {
    const jokes = [
      "–í–∞—Å–µ—á–µ–∫, –ø–æ–º–Ω–∏: –Ω–∞ —Ä—ã–Ω–∫–µ –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –±—ã—Ç—å, –∞ –∫–∞–∑–∞—Ç—å—Å—è! –û—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ P&L –∫—Ä–∞—Å–Ω–æ–µ. üòâ",
      "–ü–æ—á–µ–º—É –í–∞—Å–µ—á–µ–∫ –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ –ø–æ–∫–µ—Ä? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –≤—Å–µ–≥–¥–∞ 'all-in' –Ω–∞ —Ä—ã–Ω–∫–µ! üöÄ",
      "–í–∞—Å–µ—á–µ–∫, –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π —Å —É–º–æ–º, –∞ –Ω–µ –∫–∞–∫ –≤ —Ä—É–ª–µ—Ç–∫—É! üé∞",
      "–í–∞—Å–µ—á–µ–∫, —Ä—ã–Ω–æ–∫ –∫–∞–∫ –∂–µ–Ω—â–∏–Ω–∞ - –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤! üíÉ",
      "–í–∞—Å–µ—á–µ–∫, –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å, –∞ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏! üò±",
      "–í–∞—Å–µ—á–µ–∫, –ø–æ–º–Ω–∏: bulls make money, bears make money, pigs get slaughtered! üê∑",
      "–í–∞—Å–µ—á–µ–∫, —Ä—ã–Ω–æ–∫ –Ω–µ –¥–ª—è —Å–ª–∞–±–æ–Ω–µ—Ä–≤–Ω—ã—Ö, –Ω–æ –¥–ª—è —É–º–Ω—ã—Ö! üß†",
      "–í–∞—Å–µ—á–µ–∫, –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –∫–∞–∫ –≤ –∂–∏–∑–Ω–∏ - —á–µ–º –±–æ–ª—å—à–µ —É—á–∏—à—å—Å—è, —Ç–µ–º –º–µ–Ω—å—à–µ —Ç–µ—Ä—è–µ—à—å! üìö",
      "–í–∞—Å–µ—á–µ–∫, —Ä—ã–Ω–æ–∫ - —ç—Ç–æ –Ω–µ –∫–∞–∑–∏–Ω–æ, –∞ –±–∏–∑–Ω–µ—Å! üíº",
      "–í–∞—Å–µ—á–µ–∫, —Ç—Ä–µ–π–¥–∏–Ω–≥ - –∏—Å–∫—É—Å—Å—Ç–≤–æ —Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏ –º–µ–¥–ª–µ–Ω–Ω–æ! üé®"
    ];
    return jokes[Math.floor(Math.random() * jokes.length)];
  }

  async sendTelegramMessage(text) {
    try {
      await this.telegramBot.sendMessage(
        process.env.TELEGRAM_ADMIN_CHAT_IDS,
        text,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫
async function main() {
  try {
    console.log('ÔøΩÔøΩ –ó–∞–ø—É—Å–∫ MEXC –°–∫–∞–ª—å–ø–µ—Ä...');

    const scalper = new MexcAutoScalper();
    await scalper.start();

    console.log('‚úÖ MEXC –°–∫–∞–ª—å–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ú –†–ï–ñ–ò–ú–ï!');

    // Graceful shutdown
    process.on('SIGINT', async () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º...');
      await scalper.stop();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º...');
      await scalper.stop();
      process.exit(0);
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();
