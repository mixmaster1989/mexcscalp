#!/usr/bin/env node

require('dotenv').config();
const { MexcRestClient } = require('./dist/infra/mexcRest');

console.log('‚è∞ –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–õ–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

const client = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);

async function analyzeLast30Minutes() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        const now = new Date();
        const oneHourAgo = new Date(now.getTime() - (60 * 60 * 1000));
        
        console.log(`üïê –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥: ${oneHourAgo.toLocaleString('ru-RU')} - ${now.toLocaleString('ru-RU')}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        console.log('\nüì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ —Å API...');
        const trades = await client.getMyTrades('ETHUSDC', 100);
        
        if (trades.length === 0) {
            console.log('‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏');
            return;
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        const recentTrades = trades.filter(trade => {
            const tradeTime = new Date(trade.timestamp);
            return tradeTime > oneHourAgo;
        });
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ${recentTrades.length}`);
        
        if (recentTrades.length === 0) {
            console.log('‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            console.log('\nüìã –ü–û–°–õ–ï–î–ù–ò–ï 5 –°–î–ï–õ–û–ö:');
            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
            const lastTrades = trades.slice(0, 5);
            lastTrades.forEach((trade, index) => {
                const time = new Date(trade.timestamp).toLocaleString('ru-RU');
                console.log(`${index + 1}. ${trade.side.toUpperCase()} ${trade.price} x ${trade.quantity} | ${time}`);
            });
            return;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        recentTrades.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        console.log('\nüìã –°–î–ï–õ–ö–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        
        let totalVolume = 0;
        let buyTrades = 0;
        let sellTrades = 0;
        let totalNotional = 0;
        
        recentTrades.forEach((trade, index) => {
            const time = new Date(trade.timestamp).toLocaleString('ru-RU');
            const notional = trade.price * trade.quantity;
            totalNotional += notional;
            totalVolume += trade.quantity;
            
            if (trade.side === 'buy') buyTrades++;
            else sellTrades++;
            
            const sideIcon = trade.side === 'buy' ? 'üü¢' : 'üî¥';
            console.log(`${index + 1}. ${sideIcon} ${trade.side.toUpperCase()} ${trade.price} x ${trade.quantity} | ${notional.toFixed(4)} USDC | ${time}`);
        });
        
        // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const firstTrade = recentTrades[0];
        const lastTrade = recentTrades[recentTrades.length - 1];
        const timeDiff = new Date(lastTrade.timestamp) - new Date(firstTrade.timestamp);
        const minutes = timeDiff / (1000 * 60);
        
        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log(`üü¢ –ü–æ–∫—É–ø–∫–∏: ${buyTrades}`);
        console.log(`üî¥ –ü—Ä–æ–¥–∞–∂–∏: ${sellTrades}`);
        console.log(`üìä –û–±—â–∏–π –æ–±—ä–µ–º: ${totalVolume.toFixed(6)} ETH`);
        console.log(`üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: ${totalNotional.toFixed(4)} USDC`);
        console.log(`‚è±Ô∏è  –ü–µ—Ä–∏–æ–¥ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${minutes.toFixed(1)} –º–∏–Ω—É—Ç`);
        console.log(`üîÑ –°–¥–µ–ª–æ–∫ –≤ –º–∏–Ω—É—Ç—É: ${(recentTrades.length / Math.max(minutes, 1)).toFixed(1)}`);
        console.log(`üìà –û–±—ä–µ–º –≤ –º–∏–Ω—É—Ç—É: ${(totalVolume / Math.max(minutes, 1)).toFixed(6)} ETH`);
        console.log(`üí∞ –û–±–æ—Ä–æ—Ç –≤ –º–∏–Ω—É—Ç—É: ${(totalNotional / Math.max(minutes, 1)).toFixed(4)} USDC`);
        
        // –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        const prices = recentTrades.map(t => t.price);
        const minPrice = Math.min(...prices);
        const maxPrice = Math.max(...prices);
        const priceRange = maxPrice - minPrice;
        const avgPrice = prices.reduce((a, b) => a + b, 0) / prices.length;
        
        console.log('\nüíπ –ê–ù–ê–õ–ò–ó –¶–ï–ù:');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log(`üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${minPrice.toFixed(4)} USDC`);
        console.log(`üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${maxPrice.toFixed(4)} USDC`);
        console.log(`üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avgPrice.toFixed(4)} USDC`);
        console.log(`üìè –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${priceRange.toFixed(4)} USDC`);
        console.log(`üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${(priceRange / avgPrice * 100).toFixed(3)}%`);
        
        // –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂
        const buyVolume = recentTrades.filter(t => t.side === 'buy').reduce((sum, t) => sum + t.quantity, 0);
        const sellVolume = recentTrades.filter(t => t.side === 'sell').reduce((sum, t) => sum + t.quantity, 0);
        const netPosition = buyVolume - sellVolume;
        
        console.log('\n‚öñÔ∏è –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ò:');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log(`üü¢ –û–±—ä–µ–º –ø–æ–∫—É–ø–æ–∫: ${buyVolume.toFixed(6)} ETH`);
        console.log(`üî¥ –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: ${sellVolume.toFixed(6)} ETH`);
        console.log(`üìä –ß–∏—Å—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è: ${netPosition.toFixed(6)} ETH`);
        console.log(`üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${netPosition > 0 ? '–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ' : netPosition < 0 ? '–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞' : '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'}`);
        
        // –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢:');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        if (recentTrades.length > 0) {
            console.log(`‚úÖ –°–ö–ê–õ–¨–ü–ï–† –ê–ö–¢–ò–í–ù–û –¢–û–†–ì–£–ï–¢!`);
            console.log(`üîÑ ${recentTrades.length} —Å–¥–µ–ª–æ–∫ –∑–∞ ${minutes.toFixed(1)} –º–∏–Ω—É—Ç`);
            console.log(`üìä –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${(recentTrades.length / Math.max(minutes, 1)).toFixed(1)} —Å–¥–µ–ª–æ–∫/–º–∏–Ω`);
            console.log(`üí∞ –û–±–æ—Ä–æ—Ç: ${totalNotional.toFixed(4)} USDC`);
        } else {
            console.log(`‚è∏Ô∏è –°–ö–ê–õ–¨–ü–ï–† –ù–ï –¢–û–†–ì–£–ï–¢ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeLast30Minutes();
