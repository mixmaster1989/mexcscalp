#!/usr/bin/env node

require('dotenv').config();
const { execSync } = require('child_process');
const fs = require('fs');

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í MEXCSCALP');
console.log('='.repeat(60));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
function runCommand(command, timeout = 30000) {
    try {
        console.log(`\nüîÑ –í—ã–ø–æ–ª–Ω—è—é: ${command}`);
        const result = execSync(command, { 
            timeout, 
            encoding: 'utf8',
            stdio: 'pipe'
        });
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ');
        return { success: true, output: result };
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
function testBuild() {
    console.log('\nüì¶ –¢–ï–°–¢ 1: –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞');
    console.log('-'.repeat(40));
    
    const result = runCommand('npm run build');
    if (result.success) {
        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω');
        return true;
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏');
        return false;
    }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function testDependencies() {
    console.log('\nüìö –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    console.log('-'.repeat(40));
    
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const requiredDeps = ['axios', 'dotenv', 'ws', 'pino'];
    
    let allPresent = true;
    requiredDeps.forEach(dep => {
        if (packageJson.dependencies[dep]) {
            console.log(`‚úÖ ${dep}: ${packageJson.dependencies[dep]}`);
        } else {
            console.log(`‚ùå ${dep}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            allPresent = false;
        }
    });
    
    return allPresent;
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
function testEnvFile() {
    console.log('\nüîß –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞');
    console.log('-'.repeat(40));
    
    const requiredVars = [
        'MEXC_API_KEY',
        'MEXC_SECRET_KEY', 
        'TELEGRAM_BOT_TOKEN',
        'TELEGRAM_ADMIN_CHAT_IDS',
        'LLM_API'
    ];
    
    let allPresent = true;
    requiredVars.forEach(varName => {
        if (process.env[varName]) {
            console.log(`‚úÖ ${varName}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
        } else {
            console.log(`‚ùå ${varName}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            allPresent = false;
        }
    });
    
    return allPresent;
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
function testTypeScript() {
    console.log('\nüî® –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript');
    console.log('-'.repeat(40));
    
    const result = runCommand('npx tsc --noEmit');
    if (result.success) {
        console.log('‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫');
        return true;
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∏ TypeScript');
        return false;
    }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
function testFileStructure() {
    console.log('\nüìÅ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤');
    console.log('-'.repeat(40));
    
    const requiredFiles = [
        'src/main.ts',
        'src/paper-trading-main.ts',
        'src/market-analysis/market-analyzer.ts',
        'src/paper-trading/paper-trading.ts',
        'src/paper-trading/data/market-snapshot.ts',
        'src/paper-trading/analysis/result-analyzer.ts',
        'dist/main.js',
        'dist/paper-trading-main.js'
    ];
    
    let allPresent = true;
    requiredFiles.forEach(file => {
        if (fs.existsSync(file)) {
            console.log(`‚úÖ ${file}`);
        } else {
            console.log(`‚ùå ${file}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            allPresent = false;
        }
    });
    
    return allPresent;
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
function testImports() {
    console.log('\nüîó –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤');
    console.log('-'.repeat(40));
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        const mainModule = require('./dist/main.js');
        console.log('‚úÖ main.js –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è');
        
        const paperTradingModule = require('./dist/paper-trading-main.js');
        console.log('‚úÖ paper-trading-main.js –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è');
        
        return true;
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`);
        return false;
    }
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
async function testApiConnections() {
    console.log('\nüåê –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π');
    console.log('-'.repeat(40));
    
    try {
        const axios = require('axios');
        
        // –¢–µ—Å—Ç MEXC API
        console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É—é MEXC API...');
        const mexcResponse = await axios.get('https://api.mexc.com/api/v3/ping', { timeout: 10000 });
        if (mexcResponse.status === 200) {
            console.log('‚úÖ MEXC API –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
            console.log('‚ùå MEXC API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return false;
        }
        
        // –¢–µ—Å—Ç Cloud.ru LLM API
        console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É—é Cloud.ru LLM API...');
        const llmResponse = await axios.post(
            'https://foundation-models.api.cloud.ru/v1/chat/completions',
            {
                model: 'openai/gpt-oss-120b',
                messages: [{ role: 'user', content: '–¢–µ—Å—Ç' }],
                max_tokens: 10
            },
            {
                headers: {
                    'Authorization': `Bearer ${process.env.LLM_API}`,
                    'Content-Type': 'application/json'
                },
                timeout: 15000
            }
        );
        
        if (llmResponse.status === 200) {
            console.log('‚úÖ Cloud.ru LLM API –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
            console.log('‚ùå Cloud.ru LLM API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return false;
        }
        
        return true;
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n');
    
    const tests = [
        { name: '–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞', fn: testBuild },
        { name: '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', fn: testDependencies },
        { name: '.env —Ñ–∞–π–ª', fn: testEnvFile },
        { name: 'TypeScript', fn: testTypeScript },
        { name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤', fn: testFileStructure },
        { name: '–ò–º–ø–æ—Ä—Ç—ã', fn: testImports },
        { name: 'API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', fn: testApiConnections }
    ];
    
    const results = [];
    
    for (const test of tests) {
        try {
            const result = await test.fn();
            results.push({ name: test.name, success: result });
        } catch (error) {
            console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ "${test.name}": ${error.message}`);
            results.push({ name: test.name, success: false });
        }
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('='.repeat(60));
    
    let passedTests = 0;
    results.forEach((result, index) => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${index + 1}. ${result.name}`);
        if (result.success) passedTests++;
    });
    
    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${results.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passedTests === results.length) {
        console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.');
        return true;
    } else {
        console.log('‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.');
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runAllTests().then(success => {
        process.exit(success ? 0 : 1);
    }).catch(error => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = { runAllTests };
