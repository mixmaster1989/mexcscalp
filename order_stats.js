#!/usr/bin/env node
require('dotenv').config();
const sqlite3 = require('sqlite3').verbose();
const { MexcRestClient } = require('./dist/infra/mexcRest');

console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–†–î–ï–†–û–í MEXC SCALPER\n');

class OrderStatsAnalyzer {
  constructor() {
    this.db = null;
    this.client = new MexcRestClient(process.env.MEXC_API_KEY, process.env.MEXC_SECRET_KEY);
  }

  async connectDB() {
    return new Promise((resolve, reject) => {
      this.db = new sqlite3.Database('./data/mexc_bot.db', (err) => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }

  async closeDB() {
    if (this.db) {
      return new Promise((resolve) => {
        this.db.close(resolve);
      });
    }
  }

  async query(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.all(sql, params, (err, rows) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows || []);
        }
      });
    });
  }

  async getOne(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.get(sql, params, (err, row) => {
        if (err) {
          reject(err);
        } else {
          resolve(row);
        }
      });
    });
  }

  // –ê–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async analyzeDatabaseOrders() {
    console.log('üóÑÔ∏è –ê–ù–ê–õ–ò–ó –û–†–î–ï–†–û–í –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
    console.log('‚ïê'.repeat(60));

    try {
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
      const stats = await this.getOne(`
        SELECT 
          (SELECT COUNT(*) FROM orders) as total_orders,
          (SELECT COUNT(*) FROM fills) as total_fills,
          (SELECT COUNT(*) FROM trades) as total_trades,
          (SELECT COUNT(*) FROM events) as total_events
      `);

      console.log(`üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`   –û—Ä–¥–µ—Ä–æ–≤ –≤ –ë–î: ${stats.total_orders}`);
      console.log(`   –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–π: ${stats.total_fills}`);
      console.log(`   –°–¥–µ–ª–æ–∫: ${stats.total_trades}`);
      console.log(`   –°–æ–±—ã—Ç–∏–π: ${stats.total_events}\n`);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –æ—Ä–¥–µ—Ä–æ–≤
      const orderStatuses = await this.query(`
        SELECT status, COUNT(*) as count 
        FROM orders 
        GROUP BY status 
        ORDER BY count DESC
      `);

      console.log('üìà –°—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤:');
      orderStatuses.forEach(row => {
        const emoji = row.status === 'FILLED' ? '‚úÖ' : 
                     row.status === 'CANCELED' ? '‚ùå' : 
                     row.status === 'NEW' ? '‚è≥' : '‚ùì';
        console.log(`   ${emoji} ${row.status}: ${row.count}`);
      });

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º –æ—Ä–¥–µ—Ä–æ–≤
      const orderSides = await this.query(`
        SELECT side, COUNT(*) as count 
        FROM orders 
        GROUP BY side 
        ORDER BY count DESC
      `);

      console.log('\nüìä –°—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤:');
      orderSides.forEach(row => {
        const emoji = row.side === 'BUY' ? 'üü¢' : 'üî¥';
        console.log(`   ${emoji} ${row.side}: ${row.count}`);
      });

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
      const symbols = await this.query(`
        SELECT symbol, COUNT(*) as count 
        FROM orders 
        GROUP BY symbol 
        ORDER BY count DESC
      `);

      console.log('\nüí∞ –°–∏–º–≤–æ–ª—ã:');
      symbols.forEach(row => {
        console.log(`   ${row.symbol}: ${row.count} –æ—Ä–¥–µ—Ä–æ–≤`);
      });

      // –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const timeStats = await this.query(`
        SELECT 
          DATE(datetime(ts_open/1000, 'unixepoch')) as date,
          COUNT(*) as orders_count,
          COUNT(CASE WHEN status = 'FILLED' THEN 1 END) as filled_count,
          COUNT(CASE WHEN status = 'CANCELED' THEN 1 END) as canceled_count
        FROM orders 
        WHERE ts_open > strftime('%s', 'now', '-30 days') * 1000
        GROUP BY date 
        ORDER BY date DESC
        LIMIT 10
      `);

      console.log('\nüìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π):');
      timeStats.forEach(row => {
        const fillRate = row.orders_count > 0 ? (row.filled_count / row.orders_count * 100).toFixed(1) : 0;
        console.log(`   ${row.date}: ${row.orders_count} –æ—Ä–¥–µ—Ä–æ–≤ (${row.filled_count} –∏—Å–ø–æ–ª–Ω–µ–Ω–æ, ${row.canceled_count} –æ—Ç–º–µ–Ω–µ–Ω–æ, ${fillRate}% –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ)`);
      });

      // –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π
      if (stats.total_fills > 0) {
        const fillStats = await this.getOne(`
          SELECT 
            COUNT(*) as total_fills,
            SUM(qty) as total_volume,
            AVG(price) as avg_price,
            SUM(fee) as total_fees,
            MIN(ts) as first_fill,
            MAX(ts) as last_fill
          FROM fills
        `);

        console.log('\nüí∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π:');
        console.log(`   –í—Å–µ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π: ${fillStats.total_fills}`);
        console.log(`   –û–±—â–∏–π –æ–±—ä–µ–º: ${fillStats.total_volume?.toFixed(6) || 0} ETH`);
        console.log(`   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${fillStats.avg_price?.toFixed(2) || 0} USDC`);
        console.log(`   –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${fillStats.total_fees?.toFixed(4) || 0} USDC`);
        
        if (fillStats.first_fill && fillStats.last_fill) {
          const firstDate = new Date(fillStats.first_fill).toLocaleDateString('ru-RU');
          const lastDate = new Date(fillStats.last_fill).toLocaleDateString('ru-RU');
          console.log(`   –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: ${firstDate}`);
          console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: ${lastDate}`);
        }
      }

      // –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫
      if (stats.total_trades > 0) {
        const tradeStats = await this.getOne(`
          SELECT 
            COUNT(*) as total_trades,
            SUM(pnl) as total_pnl,
            AVG(pnl) as avg_pnl,
            COUNT(CASE WHEN pnl > 0 THEN 1 END) as winning_trades,
            COUNT(CASE WHEN pnl < 0 THEN 1 END) as losing_trades,
            MAX(pnl) as best_trade,
            MIN(pnl) as worst_trade
          FROM trades
        `);

        const winRate = tradeStats.total_trades > 0 ? (tradeStats.winning_trades / tradeStats.total_trades * 100) : 0;

        console.log('\nüéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫:');
        console.log(`   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${tradeStats.total_trades}`);
        console.log(`   –û–±—â–∏–π PnL: ${tradeStats.total_pnl >= 0 ? 'üü¢' : 'üî¥'} ${tradeStats.total_pnl?.toFixed(4) || 0} USDC`);
        console.log(`   –°—Ä–µ–¥–Ω–∏–π PnL: ${tradeStats.avg_pnl?.toFixed(4) || 0} USDC`);
        console.log(`   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${tradeStats.winning_trades}`);
        console.log(`   –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${tradeStats.losing_trades}`);
        console.log(`   –í–∏–Ω—Ä–µ–π—Ç: ${winRate.toFixed(2)}%`);
        console.log(`   –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: üü¢ +${tradeStats.best_trade?.toFixed(4) || 0} USDC`);
        console.log(`   –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: üî¥ ${tradeStats.worst_trade?.toFixed(4) || 0} USDC`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ë–î:', error.message);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API
  async analyzeActiveOrders() {
    console.log('\nüåê –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–´–• –û–†–î–ï–†–û–í –ß–ï–†–ï–ó API:');
    console.log('‚ïê'.repeat(60));

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
      const openOrders = await this.client.getOpenOrders('ETHUSDC');
      
      console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${openOrders.length}`);

      if (openOrders.length === 0) {
        console.log('   ‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤');
        return;
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º
      const buyOrders = openOrders.filter(o => o.side === 'buy');
      const sellOrders = openOrders.filter(o => o.side === 'sell');

      console.log(`   üü¢ BUY –æ—Ä–¥–µ—Ä–æ–≤: ${buyOrders.length}`);
      console.log(`   üî¥ SELL –æ—Ä–¥–µ—Ä–æ–≤: ${sellOrders.length}`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã
      const prices = openOrders.map(o => parseFloat(o.price));
      const minPrice = Math.min(...prices);
      const maxPrice = Math.max(...prices);
      const avgPrice = prices.reduce((sum, p) => sum + p, 0) / prices.length;

      console.log(`\nüí∞ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:`);
      console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: ${minPrice.toFixed(2)} USDC`);
      console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${maxPrice.toFixed(2)} USDC`);
      console.log(`   –°—Ä–µ–¥–Ω—è—è: ${avgPrice.toFixed(2)} USDC`);
      console.log(`   –î–∏–∞–ø–∞–∑–æ–Ω: ${(maxPrice - minPrice).toFixed(2)} USDC`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
      const volumes = openOrders.map(o => parseFloat(o.quantity));
      const totalVolume = volumes.reduce((sum, v) => sum + v, 0);
      const avgVolume = totalVolume / volumes.length;

      console.log(`\nüìè –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤:`);
      console.log(`   –û–±—â–∏–π –æ–±—ä–µ–º: ${totalVolume.toFixed(6)} ETH`);
      console.log(`   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${avgVolume.toFixed(6)} ETH`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç –æ—Ä–¥–µ—Ä–æ–≤
      const now = Date.now();
      const orderAges = openOrders.map(o => {
        const age = Math.floor((now - o.timestamp) / 1000 / 60); // –º–∏–Ω—É—Ç—ã
        return { ...o, age };
      });

      const avgAge = orderAges.reduce((sum, o) => sum + o.age, 0) / orderAges.length;
      const oldestOrder = orderAges.reduce((oldest, o) => o.age > oldest.age ? o : oldest);

      console.log(`\n‚è∞ –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ—Ä–¥–µ—Ä–æ–≤:`);
      console.log(`   –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: ${avgAge.toFixed(1)} –º–∏–Ω—É—Ç`);
      console.log(`   –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π: ${oldestOrder.age} –º–∏–Ω—É—Ç (${oldestOrder.side} ${oldestOrder.price})`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–æ–≤
      console.log(`\nüìã –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:`);
      openOrders.forEach((order, i) => {
        const age = Math.floor((now - order.timestamp) / 1000 / 60);
        const side = order.side === 'buy' ? 'üü¢ BUY' : 'üî¥ SELL';
        console.log(`   ${i + 1}. ${side} ${order.price} x ${order.quantity} (${age} –º–∏–Ω)`);
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      try {
        const ticker = await this.client.getBookTicker('ETHUSDC');
        const currentPrice = (parseFloat(ticker.bidPrice) + parseFloat(ticker.askPrice)) / 2;
        
        console.log(`\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º:`);
        console.log(`   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toFixed(2)} USDC`);
        console.log(`   Bid: ${ticker.bidPrice} USDC`);
        console.log(`   Ask: ${ticker.askPrice} USDC`);
        console.log(`   –°–ø—Ä–µ–¥: ${(parseFloat(ticker.askPrice) - parseFloat(ticker.bidPrice)).toFixed(2)} USDC`);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –æ—Ç —Ä—ã–Ω–∫–∞
        const buyOrdersFromMarket = buyOrders.map(o => {
          const distance = currentPrice - parseFloat(o.price);
          const distancePercent = (distance / currentPrice * 100);
          return { ...o, distance, distancePercent };
        });

        const sellOrdersFromMarket = sellOrders.map(o => {
          const distance = parseFloat(o.price) - currentPrice;
          const distancePercent = (distance / currentPrice * 100);
          return { ...o, distance, distancePercent };
        });

        if (buyOrdersFromMarket.length > 0) {
          const avgBuyDistance = buyOrdersFromMarket.reduce((sum, o) => sum + o.distancePercent, 0) / buyOrdersFromMarket.length;
          console.log(`   –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ BUY –æ—Ä–¥–µ—Ä–æ–≤: ${avgBuyDistance.toFixed(2)}% –æ—Ç —Ä—ã–Ω–∫–∞`);
        }

        if (sellOrdersFromMarket.length > 0) {
          const avgSellDistance = sellOrdersFromMarket.reduce((sum, o) => sum + o.distancePercent, 0) / sellOrdersFromMarket.length;
          console.log(`   –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ SELL –æ—Ä–¥–µ—Ä–æ–≤: ${avgSellDistance.toFixed(2)}% –æ—Ç —Ä—ã–Ω–∫–∞`);
        }

      } catch (error) {
        console.log('   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:', error.message);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
  async analyzeBalance() {
    console.log('\nüí∞ –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–ê:');
    console.log('‚ïê'.repeat(60));

    try {
      const account = await this.client.getAccountInfo();
      const eth = account.balances.find(b => b.asset === 'ETH');
      const usdc = account.balances.find(b => b.asset === 'USDC');

      console.log('üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:');
      console.log(`   ü™ô ETH —Å–≤–æ–±–æ–¥–Ω–æ: ${eth?.free || 0}`);
      console.log(`   üîí ETH –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${eth?.locked || 0}`);
      console.log(`   üíµ USDC —Å–≤–æ–±–æ–¥–Ω–æ: ${usdc?.free || 0}`);
      console.log(`   üîí USDC –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${usdc?.locked || 0}`);

      const totalEth = parseFloat(eth?.free || 0) + parseFloat(eth?.locked || 0);
      const totalUsdc = parseFloat(usdc?.free || 0) + parseFloat(usdc?.locked || 0);

      console.log(`\nüìä –û–±—â–∏–µ —Å—É–º–º—ã:`);
      console.log(`   ETH –≤—Å–µ–≥–æ: ${totalEth.toFixed(6)}`);
      console.log(`   USDC –≤—Å–µ–≥–æ: ${totalUsdc.toFixed(2)}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ
      const hasEthForSelling = parseFloat(eth?.free || 0) > 0.0001;
      const hasUsdcForBuying = parseFloat(usdc?.free || 0) > 10;

      console.log(`\n‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ:`);
      console.log(`   ETH –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: ${hasEthForSelling ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'}`);
      console.log(`   USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ${hasUsdcForBuying ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–ª–∞–Ω—Å–∞:', error.message);
    }
  }

  // –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã
  async generateSummary() {
    console.log('\nüéØ –û–ë–©–ò–ï –í–´–í–û–î–´:');
    console.log('‚ïê'.repeat(60));

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
      const recentEvents = await this.query(`
        SELECT type, COUNT(*) as count 
        FROM events 
        WHERE ts > strftime('%s', 'now', '-1 day') * 1000
        GROUP BY type 
        ORDER BY count DESC
      `);

      if (recentEvents.length > 0) {
        console.log('üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:');
        recentEvents.forEach(event => {
          console.log(`   ${event.type}: ${event.count} —Å–æ–±—ã—Ç–∏–π`);
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
      const lastOrder = await this.getOne(`
        SELECT ts_open, status, side, symbol 
        FROM orders 
        ORDER BY ts_open DESC 
        LIMIT 1
      `);

      if (lastOrder) {
        const lastOrderTime = new Date(lastOrder.ts_open).toLocaleString('ru-RU');
        console.log(`\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ä–¥–µ—Ä: ${lastOrderTime} (${lastOrder.status} ${lastOrder.side} ${lastOrder.symbol})`);
      }

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      
      const openOrders = await this.client.getOpenOrders('ETHUSDC');
      if (openOrders.length === 0) {
        console.log('   ‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏');
      } else if (openOrders.length < 4) {
        console.log('   ‚ö†Ô∏è –ú–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π');
      } else {
        console.log('   ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤');
      }

      const account = await this.client.getAccountInfo();
      const eth = account.balances.find(b => b.asset === 'ETH');
      const usdc = account.balances.find(b => b.asset === 'USDC');

      if (parseFloat(eth?.free || 0) < 0.001 && parseFloat(usdc?.free || 0) < 50) {
        console.log('   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏');
      } else {
        console.log('   ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–æ–≤:', error.message);
    }
  }

  async run() {
    try {
      await this.connectDB();
      await this.analyzeDatabaseOrders();
      await this.analyzeActiveOrders();
      await this.analyzeBalance();
      await this.generateSummary();
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
      await this.closeDB();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
const analyzer = new OrderStatsAnalyzer();
analyzer.run();


