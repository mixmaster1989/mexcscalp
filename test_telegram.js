#!/usr/bin/env node
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

console.log('üì± –¢–ï–°–¢ TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ô\n');

class TelegramTester {
  constructor() {
    this.telegramBot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
  }

  async testConnection() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...');
      
      const botInfo = await this.telegramBot.getMe();
      console.log(`‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @${botInfo.username}`);
      console.log(`üìù –ò–º—è: ${botInfo.first_name}`);
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error.message);
      return false;
    }
  }

  async testMessage() {
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      
      const message = 
        `üß™ *–¢–ï–°–¢ TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ô*\n\n` +
        `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n` +
        `üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
        `üöÄ –°–∫–∞–ª—å–ø–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!`;

      await this.telegramBot.sendMessage(
        process.env.TELEGRAM_ADMIN_CHAT_IDS,
        message,
        { parse_mode: 'Markdown' }
      );
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      return false;
    }
  }

  async testTradeNotification() {
    try {
      console.log('üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ...');
      
      const mockTrade = {
        side: 'buy',
        price: '4320.50',
        quantity: '0.0001',
        id: 'test_trade_123'
      };
      
      const side = mockTrade.side === 'buy' ? 'üü¢ –ü–û–ö–£–ü–ö–ê' : 'üî¥ –ü–†–û–î–ê–ñ–ê';
      const notional = (parseFloat(mockTrade.price) * parseFloat(mockTrade.quantity)).toFixed(2);
      const time = new Date().toLocaleTimeString('ru-RU');
      
      const message = 
        `üí∞ *–°–î–ï–õ–ö–ê –ò–°–ü–û–õ–ù–ï–ù–ê* (–¢–ï–°–¢)\n\n` +
        `${side}\n` +
        `üíµ –¶–µ–Ω–∞: ${mockTrade.price} USDC\n` +
        `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${mockTrade.quantity} ETH\n` +
        `üí∏ –°—É–º–º–∞: ${notional} USDC\n` +
        `‚è∞ –í—Ä–µ–º—è: ${time}\n\n` +
        `üìà *–°—Ç–∞—Ç—É—Å:*\n` +
        `‚Ä¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: 0.000100 ETH\n` +
        `‚Ä¢ –í $: -0.43 USDC\n` +
        `‚Ä¢ –†–µ–∂–∏–º: –Å—Ä—à–∏–∫–∏\n\n` +
        `üéØ TP —Ä–∞–∑–º–µ—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`;

      await this.telegramBot.sendMessage(
        process.env.TELEGRAM_ADMIN_CHAT_IDS,
        message,
        { parse_mode: 'Markdown' }
      );
      
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ:', error.message);
      return false;
    }
  }

  async testTPNotification() {
    try {
      console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ TP...');
      
      const message = 
        `üéØ *TAKE PROFIT –†–ê–ó–ú–ï–©–ï–ù* (–¢–ï–°–¢)\n\n` +
        `üìä SELL: 4324.32 USDC\n` +
        `üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: 0.0004 USDC\n` +
        `üìä TP: 0.10%\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}`;

      await this.telegramBot.sendMessage(
        process.env.TELEGRAM_ADMIN_CHAT_IDS,
        message,
        { parse_mode: 'Markdown' }
      );
      
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ TP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ TP:', error.message);
      return false;
    }
  }

  async testStatusNotification() {
    try {
      console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
      
      const message = 
        `üìä *–ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –°–¢–ê–¢–£–°* (–¢–ï–°–¢)\n\n` +
        `üéØ –†–µ–∂–∏–º: –Å—Ä—à–∏–∫–∏\n` +
        `üí∞ –¶–µ–Ω–∞: 4320.50 USDC\n` +
        `üìà VWAP: 4318.75 USDC\n` +
        `üìä ATR: 0.4321 USDC\n\n` +
        `üü¢ Buy –æ—Ä–¥–µ—Ä–æ–≤: 5\n` +
        `üî¥ Sell –æ—Ä–¥–µ—Ä–æ–≤: 5\n` +
        `üìä –í—Å–µ–≥–æ: 10\n\n` +
        `üìà *–ü–æ–∑–∏—Ü–∏—è:*\n` +
        `‚Ä¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: 0.000100 ETH\n` +
        `‚Ä¢ –í $: -0.43 USDC\n` +
        `‚Ä¢ PnL: 0.00 USDC\n\n` +
        `‚è∞ ${new Date().toLocaleTimeString('ru-RU')}`;

      await this.telegramBot.sendMessage(
        process.env.TELEGRAM_ADMIN_CHAT_IDS,
        message,
        { parse_mode: 'Markdown' }
      );
      
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
      return false;
    }
  }

  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Telegram...\n');
    
    const tests = [
      { name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', fn: () => this.testConnection() },
      { name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', fn: () => this.testMessage() },
      { name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ', fn: () => this.testTradeNotification() },
      { name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ TP', fn: () => this.testTPNotification() },
      { name: '–°—Ç–∞—Ç—É—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', fn: () => this.testStatusNotification() }
    ];
    
    let passed = 0;
    let failed = 0;
    
    for (const test of tests) {
      try {
        console.log(`\nüß™ –¢–µ—Å—Ç: ${test.name}`);
        const result = await test.fn();
        
        if (result) {
          console.log(`‚úÖ ${test.name}: –ü–†–û–ô–î–ï–ù`);
          passed++;
        } else {
          console.log(`‚ùå ${test.name}: –ü–†–û–í–ê–õ–ï–ù`);
          failed++;
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.log(`‚ùå ${test.name}: –û–®–ò–ë–ö–ê - ${error.message}`);
        failed++;
      }
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
    console.log(`üìä –í—Å–µ–≥–æ: ${passed + failed}`);
    
    if (failed === 0) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Telegram –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    } else {
      console.log('\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new TelegramTester();
  await tester.runAllTests();
}

main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});


