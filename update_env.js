#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞...\n');

// –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const newEnvContent = `# MEXC API Configuration
MEXC_API_KEY=mx0vgl1f470xehWJCT
MEXC_SECRET_KEY=67761938aebb4898b5e444a0133c0473
MEXC_BASE_URL=https://api.mexc.com
MEXC_WS_URL=wss://wbs.mexc.com/ws

# Database
DATABASE_PATH=./data/mexc_bot.db

# Logging
LOG_LEVEL=info
LOG_FILE=./logs/mexc_bot.log

# Bot Configuration
CONFIG_FILE=./config/defaults.ethusdc.json
SYMBOL=ETHUSDC
DEPOSIT_USD=100

# Trading toggles
ENABLE_TRADING=true
DRY_RUN=false

# Exchange filters (fallbacks ‚Äî —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ç—è–Ω—É—Ç—Å—è –∏–∑ exchangeInfo)
TICK_SIZE=0.01
STEP_SIZE=0.000001
MIN_NOTIONAL=1
MIN_QTY=0

# Order sizing and maker-guard
ORDER_NOTIONAL_USD=1.5
MAKER_GUARD_GAP_TICKS=1

# Repricing/TTL/cancel limits
TTL_MS=45000
DELTA_TICKS=3
REPRICE_MIN_INTERVAL_MS=15000
CANCEL_RATE_PER_MIN=30

# REST timing
MEXC_RECV_WINDOW=60000

# Auto-seed base inventory for SELLs (spot needs ETH)
AUTO_SEED_ETH=false
SEED_BASE_USD=10

# Dashboard
DASHBOARD_PORT=3000
ENABLE_DASHBOARD=true

# Telegram Bot
TELEGRAM_BOT_TOKEN=7975252884
# TELEGRAM_ADMIN_CHAT_IDS=-1002707629038
`;

try {
  // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ .env
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
  const backupPath = `.env.backup.${timestamp}`;
  
  if (fs.existsSync('.env')) {
    fs.copyFileSync('.env', backupPath);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${backupPath}`);
  }
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  fs.writeFileSync('.env', newEnvContent);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
  const stats = fs.statSync('.env');
  const fileSizeInBytes = stats.size;
  
  console.log('‚úÖ .env —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
  console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSizeInBytes} –±–∞–π—Ç`);
  console.log(`‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log('\nüìã –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞:');
  console.log('‚îÄ'.repeat(50));
  const lines = newEnvContent.split('\n').slice(0, 10);
  lines.forEach((line, index) => {
    if (line.trim()) {
      console.log(`${index + 1}: ${line}`);
    }
  });
  
  if (newEnvContent.split('\n').length > 10) {
    console.log('...');
    console.log(`... –∏ –µ—â–µ ${newEnvContent.split('\n').length - 10} —Å—Ç—Ä–æ–∫`);
  }
  
  console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞:', error.message);
  process.exit(1);
} 